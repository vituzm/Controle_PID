
PID.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000050bc  080001c8  080001c8  000011c8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  08005284  08005284  00006284  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800529c  0800529c  00007010  2**0
                  CONTENTS
  4 .ARM          00000008  0800529c  0800529c  0000629c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080052a4  080052a4  00007010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080052a4  080052a4  000062a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080052a8  080052a8  000062a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000010  20000000  080052ac  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002ec  20000010  080052bc  00007010  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  200002fc  080052bc  000072fc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00007010  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000c20e  00000000  00000000  00007040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001f74  00000000  00000000  0001324e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000c28  00000000  00000000  000151c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000967  00000000  00000000  00015df0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00022d9e  00000000  00000000  00016757  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000ed03  00000000  00000000  000394f5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000dab5b  00000000  00000000  000481f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00122d53  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003484  00000000  00000000  00122d98  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000041  00000000  00000000  0012621c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c8 <__do_global_dtors_aux>:
 80001c8:	b510      	push	{r4, lr}
 80001ca:	4c05      	ldr	r4, [pc, #20]	@ (80001e0 <__do_global_dtors_aux+0x18>)
 80001cc:	7823      	ldrb	r3, [r4, #0]
 80001ce:	b933      	cbnz	r3, 80001de <__do_global_dtors_aux+0x16>
 80001d0:	4b04      	ldr	r3, [pc, #16]	@ (80001e4 <__do_global_dtors_aux+0x1c>)
 80001d2:	b113      	cbz	r3, 80001da <__do_global_dtors_aux+0x12>
 80001d4:	4804      	ldr	r0, [pc, #16]	@ (80001e8 <__do_global_dtors_aux+0x20>)
 80001d6:	f3af 8000 	nop.w
 80001da:	2301      	movs	r3, #1
 80001dc:	7023      	strb	r3, [r4, #0]
 80001de:	bd10      	pop	{r4, pc}
 80001e0:	20000010 	.word	0x20000010
 80001e4:	00000000 	.word	0x00000000
 80001e8:	0800526c 	.word	0x0800526c

080001ec <frame_dummy>:
 80001ec:	b508      	push	{r3, lr}
 80001ee:	4b03      	ldr	r3, [pc, #12]	@ (80001fc <frame_dummy+0x10>)
 80001f0:	b11b      	cbz	r3, 80001fa <frame_dummy+0xe>
 80001f2:	4903      	ldr	r1, [pc, #12]	@ (8000200 <frame_dummy+0x14>)
 80001f4:	4803      	ldr	r0, [pc, #12]	@ (8000204 <frame_dummy+0x18>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	bd08      	pop	{r3, pc}
 80001fc:	00000000 	.word	0x00000000
 8000200:	20000014 	.word	0x20000014
 8000204:	0800526c 	.word	0x0800526c

08000208 <__aeabi_drsub>:
 8000208:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 800020c:	e002      	b.n	8000214 <__adddf3>
 800020e:	bf00      	nop

08000210 <__aeabi_dsub>:
 8000210:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

08000214 <__adddf3>:
 8000214:	b530      	push	{r4, r5, lr}
 8000216:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800021a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800021e:	ea94 0f05 	teq	r4, r5
 8000222:	bf08      	it	eq
 8000224:	ea90 0f02 	teqeq	r0, r2
 8000228:	bf1f      	itttt	ne
 800022a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800022e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000232:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000236:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800023a:	f000 80e2 	beq.w	8000402 <__adddf3+0x1ee>
 800023e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000242:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000246:	bfb8      	it	lt
 8000248:	426d      	neglt	r5, r5
 800024a:	dd0c      	ble.n	8000266 <__adddf3+0x52>
 800024c:	442c      	add	r4, r5
 800024e:	ea80 0202 	eor.w	r2, r0, r2
 8000252:	ea81 0303 	eor.w	r3, r1, r3
 8000256:	ea82 0000 	eor.w	r0, r2, r0
 800025a:	ea83 0101 	eor.w	r1, r3, r1
 800025e:	ea80 0202 	eor.w	r2, r0, r2
 8000262:	ea81 0303 	eor.w	r3, r1, r3
 8000266:	2d36      	cmp	r5, #54	@ 0x36
 8000268:	bf88      	it	hi
 800026a:	bd30      	pophi	{r4, r5, pc}
 800026c:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000270:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000274:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000278:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800027c:	d002      	beq.n	8000284 <__adddf3+0x70>
 800027e:	4240      	negs	r0, r0
 8000280:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000284:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000288:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800028c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000290:	d002      	beq.n	8000298 <__adddf3+0x84>
 8000292:	4252      	negs	r2, r2
 8000294:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000298:	ea94 0f05 	teq	r4, r5
 800029c:	f000 80a7 	beq.w	80003ee <__adddf3+0x1da>
 80002a0:	f1a4 0401 	sub.w	r4, r4, #1
 80002a4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002a8:	db0d      	blt.n	80002c6 <__adddf3+0xb2>
 80002aa:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002ae:	fa22 f205 	lsr.w	r2, r2, r5
 80002b2:	1880      	adds	r0, r0, r2
 80002b4:	f141 0100 	adc.w	r1, r1, #0
 80002b8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002bc:	1880      	adds	r0, r0, r2
 80002be:	fa43 f305 	asr.w	r3, r3, r5
 80002c2:	4159      	adcs	r1, r3
 80002c4:	e00e      	b.n	80002e4 <__adddf3+0xd0>
 80002c6:	f1a5 0520 	sub.w	r5, r5, #32
 80002ca:	f10e 0e20 	add.w	lr, lr, #32
 80002ce:	2a01      	cmp	r2, #1
 80002d0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002d4:	bf28      	it	cs
 80002d6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002da:	fa43 f305 	asr.w	r3, r3, r5
 80002de:	18c0      	adds	r0, r0, r3
 80002e0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002e4:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80002e8:	d507      	bpl.n	80002fa <__adddf3+0xe6>
 80002ea:	f04f 0e00 	mov.w	lr, #0
 80002ee:	f1dc 0c00 	rsbs	ip, ip, #0
 80002f2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002f6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002fa:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80002fe:	d31b      	bcc.n	8000338 <__adddf3+0x124>
 8000300:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 8000304:	d30c      	bcc.n	8000320 <__adddf3+0x10c>
 8000306:	0849      	lsrs	r1, r1, #1
 8000308:	ea5f 0030 	movs.w	r0, r0, rrx
 800030c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000310:	f104 0401 	add.w	r4, r4, #1
 8000314:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000318:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 800031c:	f080 809a 	bcs.w	8000454 <__adddf3+0x240>
 8000320:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000324:	bf08      	it	eq
 8000326:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800032a:	f150 0000 	adcs.w	r0, r0, #0
 800032e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000332:	ea41 0105 	orr.w	r1, r1, r5
 8000336:	bd30      	pop	{r4, r5, pc}
 8000338:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800033c:	4140      	adcs	r0, r0
 800033e:	eb41 0101 	adc.w	r1, r1, r1
 8000342:	3c01      	subs	r4, #1
 8000344:	bf28      	it	cs
 8000346:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 800034a:	d2e9      	bcs.n	8000320 <__adddf3+0x10c>
 800034c:	f091 0f00 	teq	r1, #0
 8000350:	bf04      	itt	eq
 8000352:	4601      	moveq	r1, r0
 8000354:	2000      	moveq	r0, #0
 8000356:	fab1 f381 	clz	r3, r1
 800035a:	bf08      	it	eq
 800035c:	3320      	addeq	r3, #32
 800035e:	f1a3 030b 	sub.w	r3, r3, #11
 8000362:	f1b3 0220 	subs.w	r2, r3, #32
 8000366:	da0c      	bge.n	8000382 <__adddf3+0x16e>
 8000368:	320c      	adds	r2, #12
 800036a:	dd08      	ble.n	800037e <__adddf3+0x16a>
 800036c:	f102 0c14 	add.w	ip, r2, #20
 8000370:	f1c2 020c 	rsb	r2, r2, #12
 8000374:	fa01 f00c 	lsl.w	r0, r1, ip
 8000378:	fa21 f102 	lsr.w	r1, r1, r2
 800037c:	e00c      	b.n	8000398 <__adddf3+0x184>
 800037e:	f102 0214 	add.w	r2, r2, #20
 8000382:	bfd8      	it	le
 8000384:	f1c2 0c20 	rsble	ip, r2, #32
 8000388:	fa01 f102 	lsl.w	r1, r1, r2
 800038c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000390:	bfdc      	itt	le
 8000392:	ea41 010c 	orrle.w	r1, r1, ip
 8000396:	4090      	lslle	r0, r2
 8000398:	1ae4      	subs	r4, r4, r3
 800039a:	bfa2      	ittt	ge
 800039c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003a0:	4329      	orrge	r1, r5
 80003a2:	bd30      	popge	{r4, r5, pc}
 80003a4:	ea6f 0404 	mvn.w	r4, r4
 80003a8:	3c1f      	subs	r4, #31
 80003aa:	da1c      	bge.n	80003e6 <__adddf3+0x1d2>
 80003ac:	340c      	adds	r4, #12
 80003ae:	dc0e      	bgt.n	80003ce <__adddf3+0x1ba>
 80003b0:	f104 0414 	add.w	r4, r4, #20
 80003b4:	f1c4 0220 	rsb	r2, r4, #32
 80003b8:	fa20 f004 	lsr.w	r0, r0, r4
 80003bc:	fa01 f302 	lsl.w	r3, r1, r2
 80003c0:	ea40 0003 	orr.w	r0, r0, r3
 80003c4:	fa21 f304 	lsr.w	r3, r1, r4
 80003c8:	ea45 0103 	orr.w	r1, r5, r3
 80003cc:	bd30      	pop	{r4, r5, pc}
 80003ce:	f1c4 040c 	rsb	r4, r4, #12
 80003d2:	f1c4 0220 	rsb	r2, r4, #32
 80003d6:	fa20 f002 	lsr.w	r0, r0, r2
 80003da:	fa01 f304 	lsl.w	r3, r1, r4
 80003de:	ea40 0003 	orr.w	r0, r0, r3
 80003e2:	4629      	mov	r1, r5
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	fa21 f004 	lsr.w	r0, r1, r4
 80003ea:	4629      	mov	r1, r5
 80003ec:	bd30      	pop	{r4, r5, pc}
 80003ee:	f094 0f00 	teq	r4, #0
 80003f2:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80003f6:	bf06      	itte	eq
 80003f8:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80003fc:	3401      	addeq	r4, #1
 80003fe:	3d01      	subne	r5, #1
 8000400:	e74e      	b.n	80002a0 <__adddf3+0x8c>
 8000402:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000406:	bf18      	it	ne
 8000408:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800040c:	d029      	beq.n	8000462 <__adddf3+0x24e>
 800040e:	ea94 0f05 	teq	r4, r5
 8000412:	bf08      	it	eq
 8000414:	ea90 0f02 	teqeq	r0, r2
 8000418:	d005      	beq.n	8000426 <__adddf3+0x212>
 800041a:	ea54 0c00 	orrs.w	ip, r4, r0
 800041e:	bf04      	itt	eq
 8000420:	4619      	moveq	r1, r3
 8000422:	4610      	moveq	r0, r2
 8000424:	bd30      	pop	{r4, r5, pc}
 8000426:	ea91 0f03 	teq	r1, r3
 800042a:	bf1e      	ittt	ne
 800042c:	2100      	movne	r1, #0
 800042e:	2000      	movne	r0, #0
 8000430:	bd30      	popne	{r4, r5, pc}
 8000432:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000436:	d105      	bne.n	8000444 <__adddf3+0x230>
 8000438:	0040      	lsls	r0, r0, #1
 800043a:	4149      	adcs	r1, r1
 800043c:	bf28      	it	cs
 800043e:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 8000442:	bd30      	pop	{r4, r5, pc}
 8000444:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000448:	bf3c      	itt	cc
 800044a:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800044e:	bd30      	popcc	{r4, r5, pc}
 8000450:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000454:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000458:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800045c:	f04f 0000 	mov.w	r0, #0
 8000460:	bd30      	pop	{r4, r5, pc}
 8000462:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000466:	bf1a      	itte	ne
 8000468:	4619      	movne	r1, r3
 800046a:	4610      	movne	r0, r2
 800046c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000470:	bf1c      	itt	ne
 8000472:	460b      	movne	r3, r1
 8000474:	4602      	movne	r2, r0
 8000476:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800047a:	bf06      	itte	eq
 800047c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000480:	ea91 0f03 	teqeq	r1, r3
 8000484:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000488:	bd30      	pop	{r4, r5, pc}
 800048a:	bf00      	nop

0800048c <__aeabi_ui2d>:
 800048c:	f090 0f00 	teq	r0, #0
 8000490:	bf04      	itt	eq
 8000492:	2100      	moveq	r1, #0
 8000494:	4770      	bxeq	lr
 8000496:	b530      	push	{r4, r5, lr}
 8000498:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800049c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004a0:	f04f 0500 	mov.w	r5, #0
 80004a4:	f04f 0100 	mov.w	r1, #0
 80004a8:	e750      	b.n	800034c <__adddf3+0x138>
 80004aa:	bf00      	nop

080004ac <__aeabi_i2d>:
 80004ac:	f090 0f00 	teq	r0, #0
 80004b0:	bf04      	itt	eq
 80004b2:	2100      	moveq	r1, #0
 80004b4:	4770      	bxeq	lr
 80004b6:	b530      	push	{r4, r5, lr}
 80004b8:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004bc:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004c0:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80004c4:	bf48      	it	mi
 80004c6:	4240      	negmi	r0, r0
 80004c8:	f04f 0100 	mov.w	r1, #0
 80004cc:	e73e      	b.n	800034c <__adddf3+0x138>
 80004ce:	bf00      	nop

080004d0 <__aeabi_f2d>:
 80004d0:	0042      	lsls	r2, r0, #1
 80004d2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004d6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004da:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004de:	bf1f      	itttt	ne
 80004e0:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80004e4:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80004e8:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80004ec:	4770      	bxne	lr
 80004ee:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80004f2:	bf08      	it	eq
 80004f4:	4770      	bxeq	lr
 80004f6:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80004fa:	bf04      	itt	eq
 80004fc:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000500:	4770      	bxeq	lr
 8000502:	b530      	push	{r4, r5, lr}
 8000504:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800050c:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000510:	e71c      	b.n	800034c <__adddf3+0x138>
 8000512:	bf00      	nop

08000514 <__aeabi_ul2d>:
 8000514:	ea50 0201 	orrs.w	r2, r0, r1
 8000518:	bf08      	it	eq
 800051a:	4770      	bxeq	lr
 800051c:	b530      	push	{r4, r5, lr}
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	e00a      	b.n	800053a <__aeabi_l2d+0x16>

08000524 <__aeabi_l2d>:
 8000524:	ea50 0201 	orrs.w	r2, r0, r1
 8000528:	bf08      	it	eq
 800052a:	4770      	bxeq	lr
 800052c:	b530      	push	{r4, r5, lr}
 800052e:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 8000532:	d502      	bpl.n	800053a <__aeabi_l2d+0x16>
 8000534:	4240      	negs	r0, r0
 8000536:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800053a:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800053e:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000542:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000546:	f43f aed8 	beq.w	80002fa <__adddf3+0xe6>
 800054a:	f04f 0203 	mov.w	r2, #3
 800054e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000552:	bf18      	it	ne
 8000554:	3203      	addne	r2, #3
 8000556:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800055a:	bf18      	it	ne
 800055c:	3203      	addne	r2, #3
 800055e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000562:	f1c2 0320 	rsb	r3, r2, #32
 8000566:	fa00 fc03 	lsl.w	ip, r0, r3
 800056a:	fa20 f002 	lsr.w	r0, r0, r2
 800056e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000572:	ea40 000e 	orr.w	r0, r0, lr
 8000576:	fa21 f102 	lsr.w	r1, r1, r2
 800057a:	4414      	add	r4, r2
 800057c:	e6bd      	b.n	80002fa <__adddf3+0xe6>
 800057e:	bf00      	nop

08000580 <__aeabi_dmul>:
 8000580:	b570      	push	{r4, r5, r6, lr}
 8000582:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000586:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800058a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800058e:	bf1d      	ittte	ne
 8000590:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000594:	ea94 0f0c 	teqne	r4, ip
 8000598:	ea95 0f0c 	teqne	r5, ip
 800059c:	f000 f8de 	bleq	800075c <__aeabi_dmul+0x1dc>
 80005a0:	442c      	add	r4, r5
 80005a2:	ea81 0603 	eor.w	r6, r1, r3
 80005a6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005aa:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005ae:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005b2:	bf18      	it	ne
 80005b4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005b8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005bc:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80005c0:	d038      	beq.n	8000634 <__aeabi_dmul+0xb4>
 80005c2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005ce:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80005d2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005d6:	f04f 0600 	mov.w	r6, #0
 80005da:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005de:	f09c 0f00 	teq	ip, #0
 80005e2:	bf18      	it	ne
 80005e4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005e8:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80005ec:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80005f0:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80005f4:	d204      	bcs.n	8000600 <__aeabi_dmul+0x80>
 80005f6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005fa:	416d      	adcs	r5, r5
 80005fc:	eb46 0606 	adc.w	r6, r6, r6
 8000600:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000604:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000608:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800060c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000610:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000614:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000618:	bf88      	it	hi
 800061a:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800061e:	d81e      	bhi.n	800065e <__aeabi_dmul+0xde>
 8000620:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 8000624:	bf08      	it	eq
 8000626:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800062a:	f150 0000 	adcs.w	r0, r0, #0
 800062e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000632:	bd70      	pop	{r4, r5, r6, pc}
 8000634:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000638:	ea46 0101 	orr.w	r1, r6, r1
 800063c:	ea40 0002 	orr.w	r0, r0, r2
 8000640:	ea81 0103 	eor.w	r1, r1, r3
 8000644:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000648:	bfc2      	ittt	gt
 800064a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800064e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000652:	bd70      	popgt	{r4, r5, r6, pc}
 8000654:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000658:	f04f 0e00 	mov.w	lr, #0
 800065c:	3c01      	subs	r4, #1
 800065e:	f300 80ab 	bgt.w	80007b8 <__aeabi_dmul+0x238>
 8000662:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000666:	bfde      	ittt	le
 8000668:	2000      	movle	r0, #0
 800066a:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800066e:	bd70      	pople	{r4, r5, r6, pc}
 8000670:	f1c4 0400 	rsb	r4, r4, #0
 8000674:	3c20      	subs	r4, #32
 8000676:	da35      	bge.n	80006e4 <__aeabi_dmul+0x164>
 8000678:	340c      	adds	r4, #12
 800067a:	dc1b      	bgt.n	80006b4 <__aeabi_dmul+0x134>
 800067c:	f104 0414 	add.w	r4, r4, #20
 8000680:	f1c4 0520 	rsb	r5, r4, #32
 8000684:	fa00 f305 	lsl.w	r3, r0, r5
 8000688:	fa20 f004 	lsr.w	r0, r0, r4
 800068c:	fa01 f205 	lsl.w	r2, r1, r5
 8000690:	ea40 0002 	orr.w	r0, r0, r2
 8000694:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000698:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 800069c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006a0:	fa21 f604 	lsr.w	r6, r1, r4
 80006a4:	eb42 0106 	adc.w	r1, r2, r6
 80006a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ac:	bf08      	it	eq
 80006ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006b2:	bd70      	pop	{r4, r5, r6, pc}
 80006b4:	f1c4 040c 	rsb	r4, r4, #12
 80006b8:	f1c4 0520 	rsb	r5, r4, #32
 80006bc:	fa00 f304 	lsl.w	r3, r0, r4
 80006c0:	fa20 f005 	lsr.w	r0, r0, r5
 80006c4:	fa01 f204 	lsl.w	r2, r1, r4
 80006c8:	ea40 0002 	orr.w	r0, r0, r2
 80006cc:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006d0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006d4:	f141 0100 	adc.w	r1, r1, #0
 80006d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006dc:	bf08      	it	eq
 80006de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006e2:	bd70      	pop	{r4, r5, r6, pc}
 80006e4:	f1c4 0520 	rsb	r5, r4, #32
 80006e8:	fa00 f205 	lsl.w	r2, r0, r5
 80006ec:	ea4e 0e02 	orr.w	lr, lr, r2
 80006f0:	fa20 f304 	lsr.w	r3, r0, r4
 80006f4:	fa01 f205 	lsl.w	r2, r1, r5
 80006f8:	ea43 0302 	orr.w	r3, r3, r2
 80006fc:	fa21 f004 	lsr.w	r0, r1, r4
 8000700:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000704:	fa21 f204 	lsr.w	r2, r1, r4
 8000708:	ea20 0002 	bic.w	r0, r0, r2
 800070c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000710:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000714:	bf08      	it	eq
 8000716:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800071a:	bd70      	pop	{r4, r5, r6, pc}
 800071c:	f094 0f00 	teq	r4, #0
 8000720:	d10f      	bne.n	8000742 <__aeabi_dmul+0x1c2>
 8000722:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 8000726:	0040      	lsls	r0, r0, #1
 8000728:	eb41 0101 	adc.w	r1, r1, r1
 800072c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000730:	bf08      	it	eq
 8000732:	3c01      	subeq	r4, #1
 8000734:	d0f7      	beq.n	8000726 <__aeabi_dmul+0x1a6>
 8000736:	ea41 0106 	orr.w	r1, r1, r6
 800073a:	f095 0f00 	teq	r5, #0
 800073e:	bf18      	it	ne
 8000740:	4770      	bxne	lr
 8000742:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8000746:	0052      	lsls	r2, r2, #1
 8000748:	eb43 0303 	adc.w	r3, r3, r3
 800074c:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000750:	bf08      	it	eq
 8000752:	3d01      	subeq	r5, #1
 8000754:	d0f7      	beq.n	8000746 <__aeabi_dmul+0x1c6>
 8000756:	ea43 0306 	orr.w	r3, r3, r6
 800075a:	4770      	bx	lr
 800075c:	ea94 0f0c 	teq	r4, ip
 8000760:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000764:	bf18      	it	ne
 8000766:	ea95 0f0c 	teqne	r5, ip
 800076a:	d00c      	beq.n	8000786 <__aeabi_dmul+0x206>
 800076c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000770:	bf18      	it	ne
 8000772:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000776:	d1d1      	bne.n	800071c <__aeabi_dmul+0x19c>
 8000778:	ea81 0103 	eor.w	r1, r1, r3
 800077c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000780:	f04f 0000 	mov.w	r0, #0
 8000784:	bd70      	pop	{r4, r5, r6, pc}
 8000786:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800078a:	bf06      	itte	eq
 800078c:	4610      	moveq	r0, r2
 800078e:	4619      	moveq	r1, r3
 8000790:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000794:	d019      	beq.n	80007ca <__aeabi_dmul+0x24a>
 8000796:	ea94 0f0c 	teq	r4, ip
 800079a:	d102      	bne.n	80007a2 <__aeabi_dmul+0x222>
 800079c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007a0:	d113      	bne.n	80007ca <__aeabi_dmul+0x24a>
 80007a2:	ea95 0f0c 	teq	r5, ip
 80007a6:	d105      	bne.n	80007b4 <__aeabi_dmul+0x234>
 80007a8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007ac:	bf1c      	itt	ne
 80007ae:	4610      	movne	r0, r2
 80007b0:	4619      	movne	r1, r3
 80007b2:	d10a      	bne.n	80007ca <__aeabi_dmul+0x24a>
 80007b4:	ea81 0103 	eor.w	r1, r1, r3
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007bc:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007c0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80007c4:	f04f 0000 	mov.w	r0, #0
 80007c8:	bd70      	pop	{r4, r5, r6, pc}
 80007ca:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007ce:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80007d2:	bd70      	pop	{r4, r5, r6, pc}

080007d4 <__aeabi_ddiv>:
 80007d4:	b570      	push	{r4, r5, r6, lr}
 80007d6:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80007da:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80007de:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007e2:	bf1d      	ittte	ne
 80007e4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007e8:	ea94 0f0c 	teqne	r4, ip
 80007ec:	ea95 0f0c 	teqne	r5, ip
 80007f0:	f000 f8a7 	bleq	8000942 <__aeabi_ddiv+0x16e>
 80007f4:	eba4 0405 	sub.w	r4, r4, r5
 80007f8:	ea81 0e03 	eor.w	lr, r1, r3
 80007fc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000800:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000804:	f000 8088 	beq.w	8000918 <__aeabi_ddiv+0x144>
 8000808:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800080c:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000810:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000814:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000818:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800081c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000820:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000824:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000828:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 800082c:	429d      	cmp	r5, r3
 800082e:	bf08      	it	eq
 8000830:	4296      	cmpeq	r6, r2
 8000832:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 8000836:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 800083a:	d202      	bcs.n	8000842 <__aeabi_ddiv+0x6e>
 800083c:	085b      	lsrs	r3, r3, #1
 800083e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000842:	1ab6      	subs	r6, r6, r2
 8000844:	eb65 0503 	sbc.w	r5, r5, r3
 8000848:	085b      	lsrs	r3, r3, #1
 800084a:	ea4f 0232 	mov.w	r2, r2, rrx
 800084e:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8000852:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 000c 	orrcs.w	r0, r0, ip
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000880:	085b      	lsrs	r3, r3, #1
 8000882:	ea4f 0232 	mov.w	r2, r2, rrx
 8000886:	ebb6 0e02 	subs.w	lr, r6, r2
 800088a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800088e:	bf22      	ittt	cs
 8000890:	1ab6      	subcs	r6, r6, r2
 8000892:	4675      	movcs	r5, lr
 8000894:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000898:	085b      	lsrs	r3, r3, #1
 800089a:	ea4f 0232 	mov.w	r2, r2, rrx
 800089e:	ebb6 0e02 	subs.w	lr, r6, r2
 80008a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008a6:	bf22      	ittt	cs
 80008a8:	1ab6      	subcs	r6, r6, r2
 80008aa:	4675      	movcs	r5, lr
 80008ac:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008b0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008b4:	d018      	beq.n	80008e8 <__aeabi_ddiv+0x114>
 80008b6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008ba:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008be:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008c2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008c6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008ca:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008ce:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008d2:	d1c0      	bne.n	8000856 <__aeabi_ddiv+0x82>
 80008d4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008d8:	d10b      	bne.n	80008f2 <__aeabi_ddiv+0x11e>
 80008da:	ea41 0100 	orr.w	r1, r1, r0
 80008de:	f04f 0000 	mov.w	r0, #0
 80008e2:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80008e6:	e7b6      	b.n	8000856 <__aeabi_ddiv+0x82>
 80008e8:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008ec:	bf04      	itt	eq
 80008ee:	4301      	orreq	r1, r0
 80008f0:	2000      	moveq	r0, #0
 80008f2:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80008f6:	bf88      	it	hi
 80008f8:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80008fc:	f63f aeaf 	bhi.w	800065e <__aeabi_dmul+0xde>
 8000900:	ebb5 0c03 	subs.w	ip, r5, r3
 8000904:	bf04      	itt	eq
 8000906:	ebb6 0c02 	subseq.w	ip, r6, r2
 800090a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800090e:	f150 0000 	adcs.w	r0, r0, #0
 8000912:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000916:	bd70      	pop	{r4, r5, r6, pc}
 8000918:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 800091c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000920:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000924:	bfc2      	ittt	gt
 8000926:	ebd4 050c 	rsbsgt	r5, r4, ip
 800092a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800092e:	bd70      	popgt	{r4, r5, r6, pc}
 8000930:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000934:	f04f 0e00 	mov.w	lr, #0
 8000938:	3c01      	subs	r4, #1
 800093a:	e690      	b.n	800065e <__aeabi_dmul+0xde>
 800093c:	ea45 0e06 	orr.w	lr, r5, r6
 8000940:	e68d      	b.n	800065e <__aeabi_dmul+0xde>
 8000942:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000946:	ea94 0f0c 	teq	r4, ip
 800094a:	bf08      	it	eq
 800094c:	ea95 0f0c 	teqeq	r5, ip
 8000950:	f43f af3b 	beq.w	80007ca <__aeabi_dmul+0x24a>
 8000954:	ea94 0f0c 	teq	r4, ip
 8000958:	d10a      	bne.n	8000970 <__aeabi_ddiv+0x19c>
 800095a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800095e:	f47f af34 	bne.w	80007ca <__aeabi_dmul+0x24a>
 8000962:	ea95 0f0c 	teq	r5, ip
 8000966:	f47f af25 	bne.w	80007b4 <__aeabi_dmul+0x234>
 800096a:	4610      	mov	r0, r2
 800096c:	4619      	mov	r1, r3
 800096e:	e72c      	b.n	80007ca <__aeabi_dmul+0x24a>
 8000970:	ea95 0f0c 	teq	r5, ip
 8000974:	d106      	bne.n	8000984 <__aeabi_ddiv+0x1b0>
 8000976:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800097a:	f43f aefd 	beq.w	8000778 <__aeabi_dmul+0x1f8>
 800097e:	4610      	mov	r0, r2
 8000980:	4619      	mov	r1, r3
 8000982:	e722      	b.n	80007ca <__aeabi_dmul+0x24a>
 8000984:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000988:	bf18      	it	ne
 800098a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800098e:	f47f aec5 	bne.w	800071c <__aeabi_dmul+0x19c>
 8000992:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000996:	f47f af0d 	bne.w	80007b4 <__aeabi_dmul+0x234>
 800099a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800099e:	f47f aeeb 	bne.w	8000778 <__aeabi_dmul+0x1f8>
 80009a2:	e712      	b.n	80007ca <__aeabi_dmul+0x24a>

080009a4 <__gedf2>:
 80009a4:	f04f 3cff 	mov.w	ip, #4294967295
 80009a8:	e006      	b.n	80009b8 <__cmpdf2+0x4>
 80009aa:	bf00      	nop

080009ac <__ledf2>:
 80009ac:	f04f 0c01 	mov.w	ip, #1
 80009b0:	e002      	b.n	80009b8 <__cmpdf2+0x4>
 80009b2:	bf00      	nop

080009b4 <__cmpdf2>:
 80009b4:	f04f 0c01 	mov.w	ip, #1
 80009b8:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009bc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009c0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009c4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009c8:	bf18      	it	ne
 80009ca:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009ce:	d01b      	beq.n	8000a08 <__cmpdf2+0x54>
 80009d0:	b001      	add	sp, #4
 80009d2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009d6:	bf0c      	ite	eq
 80009d8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009dc:	ea91 0f03 	teqne	r1, r3
 80009e0:	bf02      	ittt	eq
 80009e2:	ea90 0f02 	teqeq	r0, r2
 80009e6:	2000      	moveq	r0, #0
 80009e8:	4770      	bxeq	lr
 80009ea:	f110 0f00 	cmn.w	r0, #0
 80009ee:	ea91 0f03 	teq	r1, r3
 80009f2:	bf58      	it	pl
 80009f4:	4299      	cmppl	r1, r3
 80009f6:	bf08      	it	eq
 80009f8:	4290      	cmpeq	r0, r2
 80009fa:	bf2c      	ite	cs
 80009fc:	17d8      	asrcs	r0, r3, #31
 80009fe:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a02:	f040 0001 	orr.w	r0, r0, #1
 8000a06:	4770      	bx	lr
 8000a08:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a0c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a10:	d102      	bne.n	8000a18 <__cmpdf2+0x64>
 8000a12:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a16:	d107      	bne.n	8000a28 <__cmpdf2+0x74>
 8000a18:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a1c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a20:	d1d6      	bne.n	80009d0 <__cmpdf2+0x1c>
 8000a22:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a26:	d0d3      	beq.n	80009d0 <__cmpdf2+0x1c>
 8000a28:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a2c:	4770      	bx	lr
 8000a2e:	bf00      	nop

08000a30 <__aeabi_cdrcmple>:
 8000a30:	4684      	mov	ip, r0
 8000a32:	4610      	mov	r0, r2
 8000a34:	4662      	mov	r2, ip
 8000a36:	468c      	mov	ip, r1
 8000a38:	4619      	mov	r1, r3
 8000a3a:	4663      	mov	r3, ip
 8000a3c:	e000      	b.n	8000a40 <__aeabi_cdcmpeq>
 8000a3e:	bf00      	nop

08000a40 <__aeabi_cdcmpeq>:
 8000a40:	b501      	push	{r0, lr}
 8000a42:	f7ff ffb7 	bl	80009b4 <__cmpdf2>
 8000a46:	2800      	cmp	r0, #0
 8000a48:	bf48      	it	mi
 8000a4a:	f110 0f00 	cmnmi.w	r0, #0
 8000a4e:	bd01      	pop	{r0, pc}

08000a50 <__aeabi_dcmpeq>:
 8000a50:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a54:	f7ff fff4 	bl	8000a40 <__aeabi_cdcmpeq>
 8000a58:	bf0c      	ite	eq
 8000a5a:	2001      	moveq	r0, #1
 8000a5c:	2000      	movne	r0, #0
 8000a5e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a62:	bf00      	nop

08000a64 <__aeabi_dcmplt>:
 8000a64:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a68:	f7ff ffea 	bl	8000a40 <__aeabi_cdcmpeq>
 8000a6c:	bf34      	ite	cc
 8000a6e:	2001      	movcc	r0, #1
 8000a70:	2000      	movcs	r0, #0
 8000a72:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a76:	bf00      	nop

08000a78 <__aeabi_dcmple>:
 8000a78:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a7c:	f7ff ffe0 	bl	8000a40 <__aeabi_cdcmpeq>
 8000a80:	bf94      	ite	ls
 8000a82:	2001      	movls	r0, #1
 8000a84:	2000      	movhi	r0, #0
 8000a86:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a8a:	bf00      	nop

08000a8c <__aeabi_dcmpge>:
 8000a8c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a90:	f7ff ffce 	bl	8000a30 <__aeabi_cdrcmple>
 8000a94:	bf94      	ite	ls
 8000a96:	2001      	movls	r0, #1
 8000a98:	2000      	movhi	r0, #0
 8000a9a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a9e:	bf00      	nop

08000aa0 <__aeabi_dcmpgt>:
 8000aa0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aa4:	f7ff ffc4 	bl	8000a30 <__aeabi_cdrcmple>
 8000aa8:	bf34      	ite	cc
 8000aaa:	2001      	movcc	r0, #1
 8000aac:	2000      	movcs	r0, #0
 8000aae:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ab2:	bf00      	nop

08000ab4 <__aeabi_uldivmod>:
 8000ab4:	b953      	cbnz	r3, 8000acc <__aeabi_uldivmod+0x18>
 8000ab6:	b94a      	cbnz	r2, 8000acc <__aeabi_uldivmod+0x18>
 8000ab8:	2900      	cmp	r1, #0
 8000aba:	bf08      	it	eq
 8000abc:	2800      	cmpeq	r0, #0
 8000abe:	bf1c      	itt	ne
 8000ac0:	f04f 31ff 	movne.w	r1, #4294967295
 8000ac4:	f04f 30ff 	movne.w	r0, #4294967295
 8000ac8:	f000 b96a 	b.w	8000da0 <__aeabi_idiv0>
 8000acc:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ad0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ad4:	f000 f806 	bl	8000ae4 <__udivmoddi4>
 8000ad8:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000adc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ae0:	b004      	add	sp, #16
 8000ae2:	4770      	bx	lr

08000ae4 <__udivmoddi4>:
 8000ae4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ae8:	9d08      	ldr	r5, [sp, #32]
 8000aea:	460c      	mov	r4, r1
 8000aec:	2b00      	cmp	r3, #0
 8000aee:	d14e      	bne.n	8000b8e <__udivmoddi4+0xaa>
 8000af0:	4694      	mov	ip, r2
 8000af2:	458c      	cmp	ip, r1
 8000af4:	4686      	mov	lr, r0
 8000af6:	fab2 f282 	clz	r2, r2
 8000afa:	d962      	bls.n	8000bc2 <__udivmoddi4+0xde>
 8000afc:	b14a      	cbz	r2, 8000b12 <__udivmoddi4+0x2e>
 8000afe:	f1c2 0320 	rsb	r3, r2, #32
 8000b02:	4091      	lsls	r1, r2
 8000b04:	fa20 f303 	lsr.w	r3, r0, r3
 8000b08:	fa0c fc02 	lsl.w	ip, ip, r2
 8000b0c:	4319      	orrs	r1, r3
 8000b0e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000b12:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000b16:	fa1f f68c 	uxth.w	r6, ip
 8000b1a:	fbb1 f4f7 	udiv	r4, r1, r7
 8000b1e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000b22:	fb07 1114 	mls	r1, r7, r4, r1
 8000b26:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000b2a:	fb04 f106 	mul.w	r1, r4, r6
 8000b2e:	4299      	cmp	r1, r3
 8000b30:	d90a      	bls.n	8000b48 <__udivmoddi4+0x64>
 8000b32:	eb1c 0303 	adds.w	r3, ip, r3
 8000b36:	f104 30ff 	add.w	r0, r4, #4294967295
 8000b3a:	f080 8112 	bcs.w	8000d62 <__udivmoddi4+0x27e>
 8000b3e:	4299      	cmp	r1, r3
 8000b40:	f240 810f 	bls.w	8000d62 <__udivmoddi4+0x27e>
 8000b44:	3c02      	subs	r4, #2
 8000b46:	4463      	add	r3, ip
 8000b48:	1a59      	subs	r1, r3, r1
 8000b4a:	fa1f f38e 	uxth.w	r3, lr
 8000b4e:	fbb1 f0f7 	udiv	r0, r1, r7
 8000b52:	fb07 1110 	mls	r1, r7, r0, r1
 8000b56:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000b5a:	fb00 f606 	mul.w	r6, r0, r6
 8000b5e:	429e      	cmp	r6, r3
 8000b60:	d90a      	bls.n	8000b78 <__udivmoddi4+0x94>
 8000b62:	eb1c 0303 	adds.w	r3, ip, r3
 8000b66:	f100 31ff 	add.w	r1, r0, #4294967295
 8000b6a:	f080 80fc 	bcs.w	8000d66 <__udivmoddi4+0x282>
 8000b6e:	429e      	cmp	r6, r3
 8000b70:	f240 80f9 	bls.w	8000d66 <__udivmoddi4+0x282>
 8000b74:	4463      	add	r3, ip
 8000b76:	3802      	subs	r0, #2
 8000b78:	1b9b      	subs	r3, r3, r6
 8000b7a:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000b7e:	2100      	movs	r1, #0
 8000b80:	b11d      	cbz	r5, 8000b8a <__udivmoddi4+0xa6>
 8000b82:	40d3      	lsrs	r3, r2
 8000b84:	2200      	movs	r2, #0
 8000b86:	e9c5 3200 	strd	r3, r2, [r5]
 8000b8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b8e:	428b      	cmp	r3, r1
 8000b90:	d905      	bls.n	8000b9e <__udivmoddi4+0xba>
 8000b92:	b10d      	cbz	r5, 8000b98 <__udivmoddi4+0xb4>
 8000b94:	e9c5 0100 	strd	r0, r1, [r5]
 8000b98:	2100      	movs	r1, #0
 8000b9a:	4608      	mov	r0, r1
 8000b9c:	e7f5      	b.n	8000b8a <__udivmoddi4+0xa6>
 8000b9e:	fab3 f183 	clz	r1, r3
 8000ba2:	2900      	cmp	r1, #0
 8000ba4:	d146      	bne.n	8000c34 <__udivmoddi4+0x150>
 8000ba6:	42a3      	cmp	r3, r4
 8000ba8:	d302      	bcc.n	8000bb0 <__udivmoddi4+0xcc>
 8000baa:	4290      	cmp	r0, r2
 8000bac:	f0c0 80f0 	bcc.w	8000d90 <__udivmoddi4+0x2ac>
 8000bb0:	1a86      	subs	r6, r0, r2
 8000bb2:	eb64 0303 	sbc.w	r3, r4, r3
 8000bb6:	2001      	movs	r0, #1
 8000bb8:	2d00      	cmp	r5, #0
 8000bba:	d0e6      	beq.n	8000b8a <__udivmoddi4+0xa6>
 8000bbc:	e9c5 6300 	strd	r6, r3, [r5]
 8000bc0:	e7e3      	b.n	8000b8a <__udivmoddi4+0xa6>
 8000bc2:	2a00      	cmp	r2, #0
 8000bc4:	f040 8090 	bne.w	8000ce8 <__udivmoddi4+0x204>
 8000bc8:	eba1 040c 	sub.w	r4, r1, ip
 8000bcc:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000bd0:	fa1f f78c 	uxth.w	r7, ip
 8000bd4:	2101      	movs	r1, #1
 8000bd6:	fbb4 f6f8 	udiv	r6, r4, r8
 8000bda:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000bde:	fb08 4416 	mls	r4, r8, r6, r4
 8000be2:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000be6:	fb07 f006 	mul.w	r0, r7, r6
 8000bea:	4298      	cmp	r0, r3
 8000bec:	d908      	bls.n	8000c00 <__udivmoddi4+0x11c>
 8000bee:	eb1c 0303 	adds.w	r3, ip, r3
 8000bf2:	f106 34ff 	add.w	r4, r6, #4294967295
 8000bf6:	d202      	bcs.n	8000bfe <__udivmoddi4+0x11a>
 8000bf8:	4298      	cmp	r0, r3
 8000bfa:	f200 80cd 	bhi.w	8000d98 <__udivmoddi4+0x2b4>
 8000bfe:	4626      	mov	r6, r4
 8000c00:	1a1c      	subs	r4, r3, r0
 8000c02:	fa1f f38e 	uxth.w	r3, lr
 8000c06:	fbb4 f0f8 	udiv	r0, r4, r8
 8000c0a:	fb08 4410 	mls	r4, r8, r0, r4
 8000c0e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000c12:	fb00 f707 	mul.w	r7, r0, r7
 8000c16:	429f      	cmp	r7, r3
 8000c18:	d908      	bls.n	8000c2c <__udivmoddi4+0x148>
 8000c1a:	eb1c 0303 	adds.w	r3, ip, r3
 8000c1e:	f100 34ff 	add.w	r4, r0, #4294967295
 8000c22:	d202      	bcs.n	8000c2a <__udivmoddi4+0x146>
 8000c24:	429f      	cmp	r7, r3
 8000c26:	f200 80b0 	bhi.w	8000d8a <__udivmoddi4+0x2a6>
 8000c2a:	4620      	mov	r0, r4
 8000c2c:	1bdb      	subs	r3, r3, r7
 8000c2e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c32:	e7a5      	b.n	8000b80 <__udivmoddi4+0x9c>
 8000c34:	f1c1 0620 	rsb	r6, r1, #32
 8000c38:	408b      	lsls	r3, r1
 8000c3a:	fa22 f706 	lsr.w	r7, r2, r6
 8000c3e:	431f      	orrs	r7, r3
 8000c40:	fa20 fc06 	lsr.w	ip, r0, r6
 8000c44:	fa04 f301 	lsl.w	r3, r4, r1
 8000c48:	ea43 030c 	orr.w	r3, r3, ip
 8000c4c:	40f4      	lsrs	r4, r6
 8000c4e:	fa00 f801 	lsl.w	r8, r0, r1
 8000c52:	0c38      	lsrs	r0, r7, #16
 8000c54:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000c58:	fbb4 fef0 	udiv	lr, r4, r0
 8000c5c:	fa1f fc87 	uxth.w	ip, r7
 8000c60:	fb00 441e 	mls	r4, r0, lr, r4
 8000c64:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000c68:	fb0e f90c 	mul.w	r9, lr, ip
 8000c6c:	45a1      	cmp	r9, r4
 8000c6e:	fa02 f201 	lsl.w	r2, r2, r1
 8000c72:	d90a      	bls.n	8000c8a <__udivmoddi4+0x1a6>
 8000c74:	193c      	adds	r4, r7, r4
 8000c76:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000c7a:	f080 8084 	bcs.w	8000d86 <__udivmoddi4+0x2a2>
 8000c7e:	45a1      	cmp	r9, r4
 8000c80:	f240 8081 	bls.w	8000d86 <__udivmoddi4+0x2a2>
 8000c84:	f1ae 0e02 	sub.w	lr, lr, #2
 8000c88:	443c      	add	r4, r7
 8000c8a:	eba4 0409 	sub.w	r4, r4, r9
 8000c8e:	fa1f f983 	uxth.w	r9, r3
 8000c92:	fbb4 f3f0 	udiv	r3, r4, r0
 8000c96:	fb00 4413 	mls	r4, r0, r3, r4
 8000c9a:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000c9e:	fb03 fc0c 	mul.w	ip, r3, ip
 8000ca2:	45a4      	cmp	ip, r4
 8000ca4:	d907      	bls.n	8000cb6 <__udivmoddi4+0x1d2>
 8000ca6:	193c      	adds	r4, r7, r4
 8000ca8:	f103 30ff 	add.w	r0, r3, #4294967295
 8000cac:	d267      	bcs.n	8000d7e <__udivmoddi4+0x29a>
 8000cae:	45a4      	cmp	ip, r4
 8000cb0:	d965      	bls.n	8000d7e <__udivmoddi4+0x29a>
 8000cb2:	3b02      	subs	r3, #2
 8000cb4:	443c      	add	r4, r7
 8000cb6:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000cba:	fba0 9302 	umull	r9, r3, r0, r2
 8000cbe:	eba4 040c 	sub.w	r4, r4, ip
 8000cc2:	429c      	cmp	r4, r3
 8000cc4:	46ce      	mov	lr, r9
 8000cc6:	469c      	mov	ip, r3
 8000cc8:	d351      	bcc.n	8000d6e <__udivmoddi4+0x28a>
 8000cca:	d04e      	beq.n	8000d6a <__udivmoddi4+0x286>
 8000ccc:	b155      	cbz	r5, 8000ce4 <__udivmoddi4+0x200>
 8000cce:	ebb8 030e 	subs.w	r3, r8, lr
 8000cd2:	eb64 040c 	sbc.w	r4, r4, ip
 8000cd6:	fa04 f606 	lsl.w	r6, r4, r6
 8000cda:	40cb      	lsrs	r3, r1
 8000cdc:	431e      	orrs	r6, r3
 8000cde:	40cc      	lsrs	r4, r1
 8000ce0:	e9c5 6400 	strd	r6, r4, [r5]
 8000ce4:	2100      	movs	r1, #0
 8000ce6:	e750      	b.n	8000b8a <__udivmoddi4+0xa6>
 8000ce8:	f1c2 0320 	rsb	r3, r2, #32
 8000cec:	fa20 f103 	lsr.w	r1, r0, r3
 8000cf0:	fa0c fc02 	lsl.w	ip, ip, r2
 8000cf4:	fa24 f303 	lsr.w	r3, r4, r3
 8000cf8:	4094      	lsls	r4, r2
 8000cfa:	430c      	orrs	r4, r1
 8000cfc:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d00:	fa00 fe02 	lsl.w	lr, r0, r2
 8000d04:	fa1f f78c 	uxth.w	r7, ip
 8000d08:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d0c:	fb08 3110 	mls	r1, r8, r0, r3
 8000d10:	0c23      	lsrs	r3, r4, #16
 8000d12:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d16:	fb00 f107 	mul.w	r1, r0, r7
 8000d1a:	4299      	cmp	r1, r3
 8000d1c:	d908      	bls.n	8000d30 <__udivmoddi4+0x24c>
 8000d1e:	eb1c 0303 	adds.w	r3, ip, r3
 8000d22:	f100 36ff 	add.w	r6, r0, #4294967295
 8000d26:	d22c      	bcs.n	8000d82 <__udivmoddi4+0x29e>
 8000d28:	4299      	cmp	r1, r3
 8000d2a:	d92a      	bls.n	8000d82 <__udivmoddi4+0x29e>
 8000d2c:	3802      	subs	r0, #2
 8000d2e:	4463      	add	r3, ip
 8000d30:	1a5b      	subs	r3, r3, r1
 8000d32:	b2a4      	uxth	r4, r4
 8000d34:	fbb3 f1f8 	udiv	r1, r3, r8
 8000d38:	fb08 3311 	mls	r3, r8, r1, r3
 8000d3c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d40:	fb01 f307 	mul.w	r3, r1, r7
 8000d44:	42a3      	cmp	r3, r4
 8000d46:	d908      	bls.n	8000d5a <__udivmoddi4+0x276>
 8000d48:	eb1c 0404 	adds.w	r4, ip, r4
 8000d4c:	f101 36ff 	add.w	r6, r1, #4294967295
 8000d50:	d213      	bcs.n	8000d7a <__udivmoddi4+0x296>
 8000d52:	42a3      	cmp	r3, r4
 8000d54:	d911      	bls.n	8000d7a <__udivmoddi4+0x296>
 8000d56:	3902      	subs	r1, #2
 8000d58:	4464      	add	r4, ip
 8000d5a:	1ae4      	subs	r4, r4, r3
 8000d5c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000d60:	e739      	b.n	8000bd6 <__udivmoddi4+0xf2>
 8000d62:	4604      	mov	r4, r0
 8000d64:	e6f0      	b.n	8000b48 <__udivmoddi4+0x64>
 8000d66:	4608      	mov	r0, r1
 8000d68:	e706      	b.n	8000b78 <__udivmoddi4+0x94>
 8000d6a:	45c8      	cmp	r8, r9
 8000d6c:	d2ae      	bcs.n	8000ccc <__udivmoddi4+0x1e8>
 8000d6e:	ebb9 0e02 	subs.w	lr, r9, r2
 8000d72:	eb63 0c07 	sbc.w	ip, r3, r7
 8000d76:	3801      	subs	r0, #1
 8000d78:	e7a8      	b.n	8000ccc <__udivmoddi4+0x1e8>
 8000d7a:	4631      	mov	r1, r6
 8000d7c:	e7ed      	b.n	8000d5a <__udivmoddi4+0x276>
 8000d7e:	4603      	mov	r3, r0
 8000d80:	e799      	b.n	8000cb6 <__udivmoddi4+0x1d2>
 8000d82:	4630      	mov	r0, r6
 8000d84:	e7d4      	b.n	8000d30 <__udivmoddi4+0x24c>
 8000d86:	46d6      	mov	lr, sl
 8000d88:	e77f      	b.n	8000c8a <__udivmoddi4+0x1a6>
 8000d8a:	4463      	add	r3, ip
 8000d8c:	3802      	subs	r0, #2
 8000d8e:	e74d      	b.n	8000c2c <__udivmoddi4+0x148>
 8000d90:	4606      	mov	r6, r0
 8000d92:	4623      	mov	r3, r4
 8000d94:	4608      	mov	r0, r1
 8000d96:	e70f      	b.n	8000bb8 <__udivmoddi4+0xd4>
 8000d98:	3e02      	subs	r6, #2
 8000d9a:	4463      	add	r3, ip
 8000d9c:	e730      	b.n	8000c00 <__udivmoddi4+0x11c>
 8000d9e:	bf00      	nop

08000da0 <__aeabi_idiv0>:
 8000da0:	4770      	bx	lr
 8000da2:	bf00      	nop
 8000da4:	0000      	movs	r0, r0
	...

08000da8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000da8:	b580      	push	{r7, lr}
 8000daa:	b082      	sub	sp, #8
 8000dac:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000dae:	f001 f829 	bl	8001e04 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000db2:	f000 f865 	bl	8000e80 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000db6:	f000 fa41 	bl	800123c <MX_GPIO_Init>
  MX_DMA_Init();
 8000dba:	f000 fa1f 	bl	80011fc <MX_DMA_Init>
  MX_ADC1_Init();
 8000dbe:	f000 f8cd 	bl	8000f5c <MX_ADC1_Init>
  MX_TIM3_Init();
 8000dc2:	f000 f9a5 	bl	8001110 <MX_TIM3_Init>
  MX_TIM2_Init();
 8000dc6:	f000 f91b 	bl	8001000 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  // Your temp setpoint
   TempDesejada = 4095;
 8000dca:	4925      	ldr	r1, [pc, #148]	@ (8000e60 <main+0xb8>)
 8000dcc:	a31a      	add	r3, pc, #104	@ (adr r3, 8000e38 <main+0x90>)
 8000dce:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000dd2:	e9c1 2300 	strd	r2, r3, [r1]

   PID(&TPID, &TempMedida, &Val_CCR, &TempDesejada, 8, 0.001, 0, _PID_P_ON_E, _PID_CD_DIRECT);
 8000dd6:	2300      	movs	r3, #0
 8000dd8:	9301      	str	r3, [sp, #4]
 8000dda:	2301      	movs	r3, #1
 8000ddc:	9300      	str	r3, [sp, #0]
 8000dde:	ed9f 2b18 	vldr	d2, [pc, #96]	@ 8000e40 <main+0x98>
 8000de2:	ed9f 1b19 	vldr	d1, [pc, #100]	@ 8000e48 <main+0xa0>
 8000de6:	ed9f 0b1a 	vldr	d0, [pc, #104]	@ 8000e50 <main+0xa8>
 8000dea:	4b1d      	ldr	r3, [pc, #116]	@ (8000e60 <main+0xb8>)
 8000dec:	4a1d      	ldr	r2, [pc, #116]	@ (8000e64 <main+0xbc>)
 8000dee:	491e      	ldr	r1, [pc, #120]	@ (8000e68 <main+0xc0>)
 8000df0:	481e      	ldr	r0, [pc, #120]	@ (8000e6c <main+0xc4>)
 8000df2:	f000 fb41 	bl	8001478 <PID>

   PID_SetMode(&TPID, _PID_MODE_AUTOMATIC);
 8000df6:	2101      	movs	r1, #1
 8000df8:	481c      	ldr	r0, [pc, #112]	@ (8000e6c <main+0xc4>)
 8000dfa:	f000 fc73 	bl	80016e4 <PID_SetMode>
   PID_SetSampleTime(&TPID, 1000);
 8000dfe:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8000e02:	481a      	ldr	r0, [pc, #104]	@ (8000e6c <main+0xc4>)
 8000e04:	f000 fde2 	bl	80019cc <PID_SetSampleTime>
   PID_SetOutputLimits(&TPID, 1800, 0);
 8000e08:	ed9f 1b0d 	vldr	d1, [pc, #52]	@ 8000e40 <main+0x98>
 8000e0c:	ed9f 0b12 	vldr	d0, [pc, #72]	@ 8000e58 <main+0xb0>
 8000e10:	4816      	ldr	r0, [pc, #88]	@ (8000e6c <main+0xc4>)
 8000e12:	f000 fc85 	bl	8001720 <PID_SetOutputLimits>


   HAL_TIM_OC_Start_IT(&htim2, TIM_CHANNEL_2);
 8000e16:	2104      	movs	r1, #4
 8000e18:	4815      	ldr	r0, [pc, #84]	@ (8000e70 <main+0xc8>)
 8000e1a:	f003 f9d1 	bl	80041c0 <HAL_TIM_OC_Start_IT>
   HAL_TIM_OC_Start(&htim3, TIM_CHANNEL_1);
 8000e1e:	2100      	movs	r1, #0
 8000e20:	4814      	ldr	r0, [pc, #80]	@ (8000e74 <main+0xcc>)
 8000e22:	f003 f905 	bl	8004030 <HAL_TIM_OC_Start>
   HAL_ADC_Start_DMA(&hadc1, &medidas[0], N_AMOSTRAS);
 8000e26:	2280      	movs	r2, #128	@ 0x80
 8000e28:	4913      	ldr	r1, [pc, #76]	@ (8000e78 <main+0xd0>)
 8000e2a:	4814      	ldr	r0, [pc, #80]	@ (8000e7c <main+0xd4>)
 8000e2c:	f001 f8a0 	bl	8001f70 <HAL_ADC_Start_DMA>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000e30:	bf00      	nop
 8000e32:	e7fd      	b.n	8000e30 <main+0x88>
 8000e34:	f3af 8000 	nop.w
 8000e38:	00000000 	.word	0x00000000
 8000e3c:	40affe00 	.word	0x40affe00
	...
 8000e48:	d2f1a9fc 	.word	0xd2f1a9fc
 8000e4c:	3f50624d 	.word	0x3f50624d
 8000e50:	00000000 	.word	0x00000000
 8000e54:	40200000 	.word	0x40200000
 8000e58:	00000000 	.word	0x00000000
 8000e5c:	409c2000 	.word	0x409c2000
 8000e60:	20000178 	.word	0x20000178
 8000e64:	20000170 	.word	0x20000170
 8000e68:	20000168 	.word	0x20000168
 8000e6c:	20000288 	.word	0x20000288
 8000e70:	200000d4 	.word	0x200000d4
 8000e74:	2000011c 	.word	0x2000011c
 8000e78:	20000180 	.word	0x20000180
 8000e7c:	2000002c 	.word	0x2000002c

08000e80 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000e80:	b580      	push	{r7, lr}
 8000e82:	b094      	sub	sp, #80	@ 0x50
 8000e84:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000e86:	f107 031c 	add.w	r3, r7, #28
 8000e8a:	2234      	movs	r2, #52	@ 0x34
 8000e8c:	2100      	movs	r1, #0
 8000e8e:	4618      	mov	r0, r3
 8000e90:	f004 f9c0 	bl	8005214 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000e94:	f107 0308 	add.w	r3, r7, #8
 8000e98:	2200      	movs	r2, #0
 8000e9a:	601a      	str	r2, [r3, #0]
 8000e9c:	605a      	str	r2, [r3, #4]
 8000e9e:	609a      	str	r2, [r3, #8]
 8000ea0:	60da      	str	r2, [r3, #12]
 8000ea2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ea4:	2300      	movs	r3, #0
 8000ea6:	607b      	str	r3, [r7, #4]
 8000ea8:	4b2a      	ldr	r3, [pc, #168]	@ (8000f54 <SystemClock_Config+0xd4>)
 8000eaa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000eac:	4a29      	ldr	r2, [pc, #164]	@ (8000f54 <SystemClock_Config+0xd4>)
 8000eae:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000eb2:	6413      	str	r3, [r2, #64]	@ 0x40
 8000eb4:	4b27      	ldr	r3, [pc, #156]	@ (8000f54 <SystemClock_Config+0xd4>)
 8000eb6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000eb8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000ebc:	607b      	str	r3, [r7, #4]
 8000ebe:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000ec0:	2300      	movs	r3, #0
 8000ec2:	603b      	str	r3, [r7, #0]
 8000ec4:	4b24      	ldr	r3, [pc, #144]	@ (8000f58 <SystemClock_Config+0xd8>)
 8000ec6:	681b      	ldr	r3, [r3, #0]
 8000ec8:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000ecc:	4a22      	ldr	r2, [pc, #136]	@ (8000f58 <SystemClock_Config+0xd8>)
 8000ece:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000ed2:	6013      	str	r3, [r2, #0]
 8000ed4:	4b20      	ldr	r3, [pc, #128]	@ (8000f58 <SystemClock_Config+0xd8>)
 8000ed6:	681b      	ldr	r3, [r3, #0]
 8000ed8:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000edc:	603b      	str	r3, [r7, #0]
 8000ede:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000ee0:	2302      	movs	r3, #2
 8000ee2:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000ee4:	2301      	movs	r3, #1
 8000ee6:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000ee8:	2310      	movs	r3, #16
 8000eea:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000eec:	2302      	movs	r3, #2
 8000eee:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000ef0:	2300      	movs	r3, #0
 8000ef2:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 8000ef4:	2310      	movs	r3, #16
 8000ef6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000ef8:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8000efc:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000efe:	2304      	movs	r3, #4
 8000f00:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000f02:	2302      	movs	r3, #2
 8000f04:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000f06:	2302      	movs	r3, #2
 8000f08:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000f0a:	f107 031c 	add.w	r3, r7, #28
 8000f0e:	4618      	mov	r0, r3
 8000f10:	f002 fd48 	bl	80039a4 <HAL_RCC_OscConfig>
 8000f14:	4603      	mov	r3, r0
 8000f16:	2b00      	cmp	r3, #0
 8000f18:	d001      	beq.n	8000f1e <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8000f1a:	f000 fa6d 	bl	80013f8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000f1e:	230f      	movs	r3, #15
 8000f20:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000f22:	2302      	movs	r3, #2
 8000f24:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000f26:	2300      	movs	r3, #0
 8000f28:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000f2a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000f2e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000f30:	2300      	movs	r3, #0
 8000f32:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000f34:	f107 0308 	add.w	r3, r7, #8
 8000f38:	2102      	movs	r1, #2
 8000f3a:	4618      	mov	r0, r3
 8000f3c:	f002 fa1c 	bl	8003378 <HAL_RCC_ClockConfig>
 8000f40:	4603      	mov	r3, r0
 8000f42:	2b00      	cmp	r3, #0
 8000f44:	d001      	beq.n	8000f4a <SystemClock_Config+0xca>
  {
    Error_Handler();
 8000f46:	f000 fa57 	bl	80013f8 <Error_Handler>
  }
}
 8000f4a:	bf00      	nop
 8000f4c:	3750      	adds	r7, #80	@ 0x50
 8000f4e:	46bd      	mov	sp, r7
 8000f50:	bd80      	pop	{r7, pc}
 8000f52:	bf00      	nop
 8000f54:	40023800 	.word	0x40023800
 8000f58:	40007000 	.word	0x40007000

08000f5c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000f5c:	b580      	push	{r7, lr}
 8000f5e:	b084      	sub	sp, #16
 8000f60:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000f62:	463b      	mov	r3, r7
 8000f64:	2200      	movs	r2, #0
 8000f66:	601a      	str	r2, [r3, #0]
 8000f68:	605a      	str	r2, [r3, #4]
 8000f6a:	609a      	str	r2, [r3, #8]
 8000f6c:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000f6e:	4b22      	ldr	r3, [pc, #136]	@ (8000ff8 <MX_ADC1_Init+0x9c>)
 8000f70:	4a22      	ldr	r2, [pc, #136]	@ (8000ffc <MX_ADC1_Init+0xa0>)
 8000f72:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000f74:	4b20      	ldr	r3, [pc, #128]	@ (8000ff8 <MX_ADC1_Init+0x9c>)
 8000f76:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8000f7a:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000f7c:	4b1e      	ldr	r3, [pc, #120]	@ (8000ff8 <MX_ADC1_Init+0x9c>)
 8000f7e:	2200      	movs	r2, #0
 8000f80:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8000f82:	4b1d      	ldr	r3, [pc, #116]	@ (8000ff8 <MX_ADC1_Init+0x9c>)
 8000f84:	2200      	movs	r2, #0
 8000f86:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000f88:	4b1b      	ldr	r3, [pc, #108]	@ (8000ff8 <MX_ADC1_Init+0x9c>)
 8000f8a:	2200      	movs	r2, #0
 8000f8c:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000f8e:	4b1a      	ldr	r3, [pc, #104]	@ (8000ff8 <MX_ADC1_Init+0x9c>)
 8000f90:	2200      	movs	r2, #0
 8000f92:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8000f96:	4b18      	ldr	r3, [pc, #96]	@ (8000ff8 <MX_ADC1_Init+0x9c>)
 8000f98:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8000f9c:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T3_TRGO;
 8000f9e:	4b16      	ldr	r3, [pc, #88]	@ (8000ff8 <MX_ADC1_Init+0x9c>)
 8000fa0:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8000fa4:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000fa6:	4b14      	ldr	r3, [pc, #80]	@ (8000ff8 <MX_ADC1_Init+0x9c>)
 8000fa8:	2200      	movs	r2, #0
 8000faa:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000fac:	4b12      	ldr	r3, [pc, #72]	@ (8000ff8 <MX_ADC1_Init+0x9c>)
 8000fae:	2201      	movs	r2, #1
 8000fb0:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000fb2:	4b11      	ldr	r3, [pc, #68]	@ (8000ff8 <MX_ADC1_Init+0x9c>)
 8000fb4:	2200      	movs	r2, #0
 8000fb6:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000fba:	4b0f      	ldr	r3, [pc, #60]	@ (8000ff8 <MX_ADC1_Init+0x9c>)
 8000fbc:	2201      	movs	r2, #1
 8000fbe:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000fc0:	480d      	ldr	r0, [pc, #52]	@ (8000ff8 <MX_ADC1_Init+0x9c>)
 8000fc2:	f000 ff91 	bl	8001ee8 <HAL_ADC_Init>
 8000fc6:	4603      	mov	r3, r0
 8000fc8:	2b00      	cmp	r3, #0
 8000fca:	d001      	beq.n	8000fd0 <MX_ADC1_Init+0x74>
  {
    Error_Handler();
 8000fcc:	f000 fa14 	bl	80013f8 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000fd0:	2300      	movs	r3, #0
 8000fd2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000fd4:	2301      	movs	r3, #1
 8000fd6:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000fd8:	2300      	movs	r3, #0
 8000fda:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000fdc:	463b      	mov	r3, r7
 8000fde:	4619      	mov	r1, r3
 8000fe0:	4805      	ldr	r0, [pc, #20]	@ (8000ff8 <MX_ADC1_Init+0x9c>)
 8000fe2:	f001 f8e9 	bl	80021b8 <HAL_ADC_ConfigChannel>
 8000fe6:	4603      	mov	r3, r0
 8000fe8:	2b00      	cmp	r3, #0
 8000fea:	d001      	beq.n	8000ff0 <MX_ADC1_Init+0x94>
  {
    Error_Handler();
 8000fec:	f000 fa04 	bl	80013f8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000ff0:	bf00      	nop
 8000ff2:	3710      	adds	r7, #16
 8000ff4:	46bd      	mov	sp, r7
 8000ff6:	bd80      	pop	{r7, pc}
 8000ff8:	2000002c 	.word	0x2000002c
 8000ffc:	40012000 	.word	0x40012000

08001000 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001000:	b580      	push	{r7, lr}
 8001002:	b08e      	sub	sp, #56	@ 0x38
 8001004:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8001006:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800100a:	2200      	movs	r2, #0
 800100c:	601a      	str	r2, [r3, #0]
 800100e:	605a      	str	r2, [r3, #4]
 8001010:	609a      	str	r2, [r3, #8]
 8001012:	60da      	str	r2, [r3, #12]
 8001014:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001016:	f107 031c 	add.w	r3, r7, #28
 800101a:	2200      	movs	r2, #0
 800101c:	601a      	str	r2, [r3, #0]
 800101e:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001020:	463b      	mov	r3, r7
 8001022:	2200      	movs	r2, #0
 8001024:	601a      	str	r2, [r3, #0]
 8001026:	605a      	str	r2, [r3, #4]
 8001028:	609a      	str	r2, [r3, #8]
 800102a:	60da      	str	r2, [r3, #12]
 800102c:	611a      	str	r2, [r3, #16]
 800102e:	615a      	str	r2, [r3, #20]
 8001030:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001032:	4b36      	ldr	r3, [pc, #216]	@ (800110c <MX_TIM2_Init+0x10c>)
 8001034:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001038:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 386;
 800103a:	4b34      	ldr	r3, [pc, #208]	@ (800110c <MX_TIM2_Init+0x10c>)
 800103c:	f44f 72c1 	mov.w	r2, #386	@ 0x182
 8001040:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001042:	4b32      	ldr	r3, [pc, #200]	@ (800110c <MX_TIM2_Init+0x10c>)
 8001044:	2200      	movs	r2, #0
 8001046:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1799;
 8001048:	4b30      	ldr	r3, [pc, #192]	@ (800110c <MX_TIM2_Init+0x10c>)
 800104a:	f240 7207 	movw	r2, #1799	@ 0x707
 800104e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001050:	4b2e      	ldr	r3, [pc, #184]	@ (800110c <MX_TIM2_Init+0x10c>)
 8001052:	2200      	movs	r2, #0
 8001054:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001056:	4b2d      	ldr	r3, [pc, #180]	@ (800110c <MX_TIM2_Init+0x10c>)
 8001058:	2200      	movs	r2, #0
 800105a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800105c:	482b      	ldr	r0, [pc, #172]	@ (800110c <MX_TIM2_Init+0x10c>)
 800105e:	f002 ff3f 	bl	8003ee0 <HAL_TIM_Base_Init>
 8001062:	4603      	mov	r3, r0
 8001064:	2b00      	cmp	r3, #0
 8001066:	d001      	beq.n	800106c <MX_TIM2_Init+0x6c>
  {
    Error_Handler();
 8001068:	f000 f9c6 	bl	80013f8 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim2) != HAL_OK)
 800106c:	4827      	ldr	r0, [pc, #156]	@ (800110c <MX_TIM2_Init+0x10c>)
 800106e:	f002 ff86 	bl	8003f7e <HAL_TIM_OC_Init>
 8001072:	4603      	mov	r3, r0
 8001074:	2b00      	cmp	r3, #0
 8001076:	d001      	beq.n	800107c <MX_TIM2_Init+0x7c>
  {
    Error_Handler();
 8001078:	f000 f9be 	bl	80013f8 <Error_Handler>
  }
  if (HAL_TIM_OnePulse_Init(&htim2, TIM_OPMODE_SINGLE) != HAL_OK)
 800107c:	2108      	movs	r1, #8
 800107e:	4823      	ldr	r0, [pc, #140]	@ (800110c <MX_TIM2_Init+0x10c>)
 8001080:	f003 f9b4 	bl	80043ec <HAL_TIM_OnePulse_Init>
 8001084:	4603      	mov	r3, r0
 8001086:	2b00      	cmp	r3, #0
 8001088:	d001      	beq.n	800108e <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 800108a:	f000 f9b5 	bl	80013f8 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_TRIGGER;
 800108e:	2306      	movs	r3, #6
 8001090:	627b      	str	r3, [r7, #36]	@ 0x24
  sSlaveConfig.InputTrigger = TIM_TS_ETRF;
 8001092:	2370      	movs	r3, #112	@ 0x70
 8001094:	62bb      	str	r3, [r7, #40]	@ 0x28
  sSlaveConfig.TriggerPolarity = TIM_TRIGGERPOLARITY_NONINVERTED;
 8001096:	2300      	movs	r3, #0
 8001098:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sSlaveConfig.TriggerPrescaler = TIM_TRIGGERPRESCALER_DIV1;
 800109a:	2300      	movs	r3, #0
 800109c:	633b      	str	r3, [r7, #48]	@ 0x30
  sSlaveConfig.TriggerFilter = 0;
 800109e:	2300      	movs	r3, #0
 80010a0:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_TIM_SlaveConfigSynchro(&htim2, &sSlaveConfig) != HAL_OK)
 80010a2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80010a6:	4619      	mov	r1, r3
 80010a8:	4818      	ldr	r0, [pc, #96]	@ (800110c <MX_TIM2_Init+0x10c>)
 80010aa:	f003 fc0c 	bl	80048c6 <HAL_TIM_SlaveConfigSynchro>
 80010ae:	4603      	mov	r3, r0
 80010b0:	2b00      	cmp	r3, #0
 80010b2:	d001      	beq.n	80010b8 <MX_TIM2_Init+0xb8>
  {
    Error_Handler();
 80010b4:	f000 f9a0 	bl	80013f8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80010b8:	2300      	movs	r3, #0
 80010ba:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80010bc:	2300      	movs	r3, #0
 80010be:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80010c0:	f107 031c 	add.w	r3, r7, #28
 80010c4:	4619      	mov	r1, r3
 80010c6:	4811      	ldr	r0, [pc, #68]	@ (800110c <MX_TIM2_Init+0x10c>)
 80010c8:	f004 f814 	bl	80050f4 <HAL_TIMEx_MasterConfigSynchronization>
 80010cc:	4603      	mov	r3, r0
 80010ce:	2b00      	cmp	r3, #0
 80010d0:	d001      	beq.n	80010d6 <MX_TIM2_Init+0xd6>
  {
    Error_Handler();
 80010d2:	f000 f991 	bl	80013f8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TOGGLE;
 80010d6:	2330      	movs	r3, #48	@ 0x30
 80010d8:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80010da:	2300      	movs	r3, #0
 80010dc:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80010de:	2300      	movs	r3, #0
 80010e0:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80010e2:	2300      	movs	r3, #0
 80010e4:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_OC_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80010e6:	463b      	mov	r3, r7
 80010e8:	2204      	movs	r2, #4
 80010ea:	4619      	mov	r1, r3
 80010ec:	4807      	ldr	r0, [pc, #28]	@ (800110c <MX_TIM2_Init+0x10c>)
 80010ee:	f003 fac7 	bl	8004680 <HAL_TIM_OC_ConfigChannel>
 80010f2:	4603      	mov	r3, r0
 80010f4:	2b00      	cmp	r3, #0
 80010f6:	d001      	beq.n	80010fc <MX_TIM2_Init+0xfc>
  {
    Error_Handler();
 80010f8:	f000 f97e 	bl	80013f8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80010fc:	4803      	ldr	r0, [pc, #12]	@ (800110c <MX_TIM2_Init+0x10c>)
 80010fe:	f000 fda3 	bl	8001c48 <HAL_TIM_MspPostInit>

}
 8001102:	bf00      	nop
 8001104:	3738      	adds	r7, #56	@ 0x38
 8001106:	46bd      	mov	sp, r7
 8001108:	bd80      	pop	{r7, pc}
 800110a:	bf00      	nop
 800110c:	200000d4 	.word	0x200000d4

08001110 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001110:	b580      	push	{r7, lr}
 8001112:	b08e      	sub	sp, #56	@ 0x38
 8001114:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001116:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800111a:	2200      	movs	r2, #0
 800111c:	601a      	str	r2, [r3, #0]
 800111e:	605a      	str	r2, [r3, #4]
 8001120:	609a      	str	r2, [r3, #8]
 8001122:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001124:	f107 0320 	add.w	r3, r7, #32
 8001128:	2200      	movs	r2, #0
 800112a:	601a      	str	r2, [r3, #0]
 800112c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800112e:	1d3b      	adds	r3, r7, #4
 8001130:	2200      	movs	r2, #0
 8001132:	601a      	str	r2, [r3, #0]
 8001134:	605a      	str	r2, [r3, #4]
 8001136:	609a      	str	r2, [r3, #8]
 8001138:	60da      	str	r2, [r3, #12]
 800113a:	611a      	str	r2, [r3, #16]
 800113c:	615a      	str	r2, [r3, #20]
 800113e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001140:	4b2c      	ldr	r3, [pc, #176]	@ (80011f4 <MX_TIM3_Init+0xe4>)
 8001142:	4a2d      	ldr	r2, [pc, #180]	@ (80011f8 <MX_TIM3_Init+0xe8>)
 8001144:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 104;
 8001146:	4b2b      	ldr	r3, [pc, #172]	@ (80011f4 <MX_TIM3_Init+0xe4>)
 8001148:	2268      	movs	r2, #104	@ 0x68
 800114a:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800114c:	4b29      	ldr	r3, [pc, #164]	@ (80011f4 <MX_TIM3_Init+0xe4>)
 800114e:	2200      	movs	r2, #0
 8001150:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 99;
 8001152:	4b28      	ldr	r3, [pc, #160]	@ (80011f4 <MX_TIM3_Init+0xe4>)
 8001154:	2263      	movs	r2, #99	@ 0x63
 8001156:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001158:	4b26      	ldr	r3, [pc, #152]	@ (80011f4 <MX_TIM3_Init+0xe4>)
 800115a:	2200      	movs	r2, #0
 800115c:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800115e:	4b25      	ldr	r3, [pc, #148]	@ (80011f4 <MX_TIM3_Init+0xe4>)
 8001160:	2200      	movs	r2, #0
 8001162:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001164:	4823      	ldr	r0, [pc, #140]	@ (80011f4 <MX_TIM3_Init+0xe4>)
 8001166:	f002 febb 	bl	8003ee0 <HAL_TIM_Base_Init>
 800116a:	4603      	mov	r3, r0
 800116c:	2b00      	cmp	r3, #0
 800116e:	d001      	beq.n	8001174 <MX_TIM3_Init+0x64>
  {
    Error_Handler();
 8001170:	f000 f942 	bl	80013f8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001174:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001178:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800117a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800117e:	4619      	mov	r1, r3
 8001180:	481c      	ldr	r0, [pc, #112]	@ (80011f4 <MX_TIM3_Init+0xe4>)
 8001182:	f003 fad9 	bl	8004738 <HAL_TIM_ConfigClockSource>
 8001186:	4603      	mov	r3, r0
 8001188:	2b00      	cmp	r3, #0
 800118a:	d001      	beq.n	8001190 <MX_TIM3_Init+0x80>
  {
    Error_Handler();
 800118c:	f000 f934 	bl	80013f8 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim3) != HAL_OK)
 8001190:	4818      	ldr	r0, [pc, #96]	@ (80011f4 <MX_TIM3_Init+0xe4>)
 8001192:	f002 fef4 	bl	8003f7e <HAL_TIM_OC_Init>
 8001196:	4603      	mov	r3, r0
 8001198:	2b00      	cmp	r3, #0
 800119a:	d001      	beq.n	80011a0 <MX_TIM3_Init+0x90>
  {
    Error_Handler();
 800119c:	f000 f92c 	bl	80013f8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80011a0:	2320      	movs	r3, #32
 80011a2:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80011a4:	2300      	movs	r3, #0
 80011a6:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80011a8:	f107 0320 	add.w	r3, r7, #32
 80011ac:	4619      	mov	r1, r3
 80011ae:	4811      	ldr	r0, [pc, #68]	@ (80011f4 <MX_TIM3_Init+0xe4>)
 80011b0:	f003 ffa0 	bl	80050f4 <HAL_TIMEx_MasterConfigSynchronization>
 80011b4:	4603      	mov	r3, r0
 80011b6:	2b00      	cmp	r3, #0
 80011b8:	d001      	beq.n	80011be <MX_TIM3_Init+0xae>
  {
    Error_Handler();
 80011ba:	f000 f91d 	bl	80013f8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TOGGLE;
 80011be:	2330      	movs	r3, #48	@ 0x30
 80011c0:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80011c2:	2300      	movs	r3, #0
 80011c4:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80011c6:	2300      	movs	r3, #0
 80011c8:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80011ca:	2300      	movs	r3, #0
 80011cc:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_OC_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80011ce:	1d3b      	adds	r3, r7, #4
 80011d0:	2200      	movs	r2, #0
 80011d2:	4619      	mov	r1, r3
 80011d4:	4807      	ldr	r0, [pc, #28]	@ (80011f4 <MX_TIM3_Init+0xe4>)
 80011d6:	f003 fa53 	bl	8004680 <HAL_TIM_OC_ConfigChannel>
 80011da:	4603      	mov	r3, r0
 80011dc:	2b00      	cmp	r3, #0
 80011de:	d001      	beq.n	80011e4 <MX_TIM3_Init+0xd4>
  {
    Error_Handler();
 80011e0:	f000 f90a 	bl	80013f8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80011e4:	4803      	ldr	r0, [pc, #12]	@ (80011f4 <MX_TIM3_Init+0xe4>)
 80011e6:	f000 fd2f 	bl	8001c48 <HAL_TIM_MspPostInit>

}
 80011ea:	bf00      	nop
 80011ec:	3738      	adds	r7, #56	@ 0x38
 80011ee:	46bd      	mov	sp, r7
 80011f0:	bd80      	pop	{r7, pc}
 80011f2:	bf00      	nop
 80011f4:	2000011c 	.word	0x2000011c
 80011f8:	40000400 	.word	0x40000400

080011fc <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80011fc:	b580      	push	{r7, lr}
 80011fe:	b082      	sub	sp, #8
 8001200:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001202:	2300      	movs	r3, #0
 8001204:	607b      	str	r3, [r7, #4]
 8001206:	4b0c      	ldr	r3, [pc, #48]	@ (8001238 <MX_DMA_Init+0x3c>)
 8001208:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800120a:	4a0b      	ldr	r2, [pc, #44]	@ (8001238 <MX_DMA_Init+0x3c>)
 800120c:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001210:	6313      	str	r3, [r2, #48]	@ 0x30
 8001212:	4b09      	ldr	r3, [pc, #36]	@ (8001238 <MX_DMA_Init+0x3c>)
 8001214:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001216:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800121a:	607b      	str	r3, [r7, #4]
 800121c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 800121e:	2200      	movs	r2, #0
 8001220:	2100      	movs	r1, #0
 8001222:	2038      	movs	r0, #56	@ 0x38
 8001224:	f001 fb53 	bl	80028ce <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8001228:	2038      	movs	r0, #56	@ 0x38
 800122a:	f001 fb6c 	bl	8002906 <HAL_NVIC_EnableIRQ>

}
 800122e:	bf00      	nop
 8001230:	3708      	adds	r7, #8
 8001232:	46bd      	mov	sp, r7
 8001234:	bd80      	pop	{r7, pc}
 8001236:	bf00      	nop
 8001238:	40023800 	.word	0x40023800

0800123c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800123c:	b580      	push	{r7, lr}
 800123e:	b08a      	sub	sp, #40	@ 0x28
 8001240:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001242:	f107 0314 	add.w	r3, r7, #20
 8001246:	2200      	movs	r2, #0
 8001248:	601a      	str	r2, [r3, #0]
 800124a:	605a      	str	r2, [r3, #4]
 800124c:	609a      	str	r2, [r3, #8]
 800124e:	60da      	str	r2, [r3, #12]
 8001250:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001252:	2300      	movs	r3, #0
 8001254:	613b      	str	r3, [r7, #16]
 8001256:	4b35      	ldr	r3, [pc, #212]	@ (800132c <MX_GPIO_Init+0xf0>)
 8001258:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800125a:	4a34      	ldr	r2, [pc, #208]	@ (800132c <MX_GPIO_Init+0xf0>)
 800125c:	f043 0304 	orr.w	r3, r3, #4
 8001260:	6313      	str	r3, [r2, #48]	@ 0x30
 8001262:	4b32      	ldr	r3, [pc, #200]	@ (800132c <MX_GPIO_Init+0xf0>)
 8001264:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001266:	f003 0304 	and.w	r3, r3, #4
 800126a:	613b      	str	r3, [r7, #16]
 800126c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800126e:	2300      	movs	r3, #0
 8001270:	60fb      	str	r3, [r7, #12]
 8001272:	4b2e      	ldr	r3, [pc, #184]	@ (800132c <MX_GPIO_Init+0xf0>)
 8001274:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001276:	4a2d      	ldr	r2, [pc, #180]	@ (800132c <MX_GPIO_Init+0xf0>)
 8001278:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800127c:	6313      	str	r3, [r2, #48]	@ 0x30
 800127e:	4b2b      	ldr	r3, [pc, #172]	@ (800132c <MX_GPIO_Init+0xf0>)
 8001280:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001282:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001286:	60fb      	str	r3, [r7, #12]
 8001288:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800128a:	2300      	movs	r3, #0
 800128c:	60bb      	str	r3, [r7, #8]
 800128e:	4b27      	ldr	r3, [pc, #156]	@ (800132c <MX_GPIO_Init+0xf0>)
 8001290:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001292:	4a26      	ldr	r2, [pc, #152]	@ (800132c <MX_GPIO_Init+0xf0>)
 8001294:	f043 0301 	orr.w	r3, r3, #1
 8001298:	6313      	str	r3, [r2, #48]	@ 0x30
 800129a:	4b24      	ldr	r3, [pc, #144]	@ (800132c <MX_GPIO_Init+0xf0>)
 800129c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800129e:	f003 0301 	and.w	r3, r3, #1
 80012a2:	60bb      	str	r3, [r7, #8]
 80012a4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80012a6:	2300      	movs	r3, #0
 80012a8:	607b      	str	r3, [r7, #4]
 80012aa:	4b20      	ldr	r3, [pc, #128]	@ (800132c <MX_GPIO_Init+0xf0>)
 80012ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012ae:	4a1f      	ldr	r2, [pc, #124]	@ (800132c <MX_GPIO_Init+0xf0>)
 80012b0:	f043 0302 	orr.w	r3, r3, #2
 80012b4:	6313      	str	r3, [r2, #48]	@ 0x30
 80012b6:	4b1d      	ldr	r3, [pc, #116]	@ (800132c <MX_GPIO_Init+0xf0>)
 80012b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012ba:	f003 0302 	and.w	r3, r3, #2
 80012be:	607b      	str	r3, [r7, #4]
 80012c0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80012c2:	2200      	movs	r2, #0
 80012c4:	2120      	movs	r1, #32
 80012c6:	481a      	ldr	r0, [pc, #104]	@ (8001330 <MX_GPIO_Init+0xf4>)
 80012c8:	f002 f83c 	bl	8003344 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80012cc:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80012d0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80012d2:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 80012d6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012d8:	2300      	movs	r3, #0
 80012da:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80012dc:	f107 0314 	add.w	r3, r7, #20
 80012e0:	4619      	mov	r1, r3
 80012e2:	4814      	ldr	r0, [pc, #80]	@ (8001334 <MX_GPIO_Init+0xf8>)
 80012e4:	f001 fe9a 	bl	800301c <HAL_GPIO_Init>

  /*Configure GPIO pins : USART_TX_Pin USART_RX_Pin */
  GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80012e8:	230c      	movs	r3, #12
 80012ea:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012ec:	2302      	movs	r3, #2
 80012ee:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012f0:	2300      	movs	r3, #0
 80012f2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012f4:	2303      	movs	r3, #3
 80012f6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80012f8:	2307      	movs	r3, #7
 80012fa:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012fc:	f107 0314 	add.w	r3, r7, #20
 8001300:	4619      	mov	r1, r3
 8001302:	480b      	ldr	r0, [pc, #44]	@ (8001330 <MX_GPIO_Init+0xf4>)
 8001304:	f001 fe8a 	bl	800301c <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8001308:	2320      	movs	r3, #32
 800130a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800130c:	2301      	movs	r3, #1
 800130e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001310:	2300      	movs	r3, #0
 8001312:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001314:	2300      	movs	r3, #0
 8001316:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8001318:	f107 0314 	add.w	r3, r7, #20
 800131c:	4619      	mov	r1, r3
 800131e:	4804      	ldr	r0, [pc, #16]	@ (8001330 <MX_GPIO_Init+0xf4>)
 8001320:	f001 fe7c 	bl	800301c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001324:	bf00      	nop
 8001326:	3728      	adds	r7, #40	@ 0x28
 8001328:	46bd      	mov	sp, r7
 800132a:	bd80      	pop	{r7, pc}
 800132c:	40023800 	.word	0x40023800
 8001330:	40020000 	.word	0x40020000
 8001334:	40020800 	.word	0x40020800

08001338 <HAL_TIM_OC_DelayElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001338:	b480      	push	{r7}
 800133a:	b083      	sub	sp, #12
 800133c:	af00      	add	r7, sp, #0
 800133e:	6078      	str	r0, [r7, #4]
	if(htim->Channel==HAL_TIM_ACTIVE_CHANNEL_2)
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	7f1b      	ldrb	r3, [r3, #28]
 8001344:	2b02      	cmp	r3, #2
 8001346:	d113      	bne.n	8001370 <HAL_TIM_OC_DelayElapsedCallback+0x38>
	{
		__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2, pulso[EstadoDoPulso]);
 8001348:	4b0c      	ldr	r3, [pc, #48]	@ (800137c <HAL_TIM_OC_DelayElapsedCallback+0x44>)
 800134a:	781b      	ldrb	r3, [r3, #0]
 800134c:	461a      	mov	r2, r3
 800134e:	4b0c      	ldr	r3, [pc, #48]	@ (8001380 <HAL_TIM_OC_DelayElapsedCallback+0x48>)
 8001350:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 8001354:	4b0b      	ldr	r3, [pc, #44]	@ (8001384 <HAL_TIM_OC_DelayElapsedCallback+0x4c>)
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	639a      	str	r2, [r3, #56]	@ 0x38

		if(EstadoDoPulso==DESCE) 													// Se está na borda de descida...
 800135a:	4b08      	ldr	r3, [pc, #32]	@ (800137c <HAL_TIM_OC_DelayElapsedCallback+0x44>)
 800135c:	781b      	ldrb	r3, [r3, #0]
 800135e:	2b01      	cmp	r3, #1
 8001360:	d103      	bne.n	800136a <HAL_TIM_OC_DelayElapsedCallback+0x32>
			{
				EstadoDoPulso=SOBE;														// Deve subir
 8001362:	4b06      	ldr	r3, [pc, #24]	@ (800137c <HAL_TIM_OC_DelayElapsedCallback+0x44>)
 8001364:	2200      	movs	r2, #0
 8001366:	701a      	strb	r2, [r3, #0]
			}
			else{																// Caso contrário...				{
				EstadoDoPulso=DESCE;													// Deve descer
			}
	}
}
 8001368:	e002      	b.n	8001370 <HAL_TIM_OC_DelayElapsedCallback+0x38>
				EstadoDoPulso=DESCE;													// Deve descer
 800136a:	4b04      	ldr	r3, [pc, #16]	@ (800137c <HAL_TIM_OC_DelayElapsedCallback+0x44>)
 800136c:	2201      	movs	r2, #1
 800136e:	701a      	strb	r2, [r3, #0]
}
 8001370:	bf00      	nop
 8001372:	370c      	adds	r7, #12
 8001374:	46bd      	mov	sp, r7
 8001376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800137a:	4770      	bx	lr
 800137c:	20000280 	.word	0x20000280
 8001380:	20000000 	.word	0x20000000
 8001384:	200000d4 	.word	0x200000d4

08001388 <HAL_ADC_ConvCpltCallback>:

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc){
 8001388:	b580      	push	{r7, lr}
 800138a:	b084      	sub	sp, #16
 800138c:	af00      	add	r7, sp, #0
 800138e:	6078      	str	r0, [r7, #4]
	float media;
	for(int u = 0; u < N_AMOSTRAS; u++){
 8001390:	2300      	movs	r3, #0
 8001392:	60bb      	str	r3, [r7, #8]
 8001394:	e010      	b.n	80013b8 <HAL_ADC_ConvCpltCallback+0x30>
		media += medidas[u];
 8001396:	4a14      	ldr	r2, [pc, #80]	@ (80013e8 <HAL_ADC_ConvCpltCallback+0x60>)
 8001398:	68bb      	ldr	r3, [r7, #8]
 800139a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800139e:	ee07 3a90 	vmov	s15, r3
 80013a2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80013a6:	ed97 7a03 	vldr	s14, [r7, #12]
 80013aa:	ee77 7a27 	vadd.f32	s15, s14, s15
 80013ae:	edc7 7a03 	vstr	s15, [r7, #12]
	for(int u = 0; u < N_AMOSTRAS; u++){
 80013b2:	68bb      	ldr	r3, [r7, #8]
 80013b4:	3301      	adds	r3, #1
 80013b6:	60bb      	str	r3, [r7, #8]
 80013b8:	68bb      	ldr	r3, [r7, #8]
 80013ba:	2b7f      	cmp	r3, #127	@ 0x7f
 80013bc:	ddeb      	ble.n	8001396 <HAL_ADC_ConvCpltCallback+0xe>
	}
	media = media/N_AMOSTRAS;
 80013be:	ed97 7a03 	vldr	s14, [r7, #12]
 80013c2:	eddf 6a0a 	vldr	s13, [pc, #40]	@ 80013ec <HAL_ADC_ConvCpltCallback+0x64>
 80013c6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80013ca:	edc7 7a03 	vstr	s15, [r7, #12]
	PID_Compute(&TPID);
 80013ce:	4808      	ldr	r0, [pc, #32]	@ (80013f0 <HAL_ADC_ConvCpltCallback+0x68>)
 80013d0:	f000 f89e 	bl	8001510 <PID_Compute>
	HAL_ADC_Start_DMA(&hadc1, &medidas[0], N_AMOSTRAS);
 80013d4:	2280      	movs	r2, #128	@ 0x80
 80013d6:	4904      	ldr	r1, [pc, #16]	@ (80013e8 <HAL_ADC_ConvCpltCallback+0x60>)
 80013d8:	4806      	ldr	r0, [pc, #24]	@ (80013f4 <HAL_ADC_ConvCpltCallback+0x6c>)
 80013da:	f000 fdc9 	bl	8001f70 <HAL_ADC_Start_DMA>


}
 80013de:	bf00      	nop
 80013e0:	3710      	adds	r7, #16
 80013e2:	46bd      	mov	sp, r7
 80013e4:	bd80      	pop	{r7, pc}
 80013e6:	bf00      	nop
 80013e8:	20000180 	.word	0x20000180
 80013ec:	43000000 	.word	0x43000000
 80013f0:	20000288 	.word	0x20000288
 80013f4:	2000002c 	.word	0x2000002c

080013f8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80013f8:	b480      	push	{r7}
 80013fa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80013fc:	b672      	cpsid	i
}
 80013fe:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001400:	bf00      	nop
 8001402:	e7fd      	b.n	8001400 <Error_Handler+0x8>

08001404 <PID_Init>:
#include "pid.h"

/* ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Functions ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ */
/* ~~~~~~~~~~~~~~~~~ Initialize ~~~~~~~~~~~~~~~~ */
void PID_Init(PID_TypeDef *uPID)
{
 8001404:	b580      	push	{r7, lr}
 8001406:	b082      	sub	sp, #8
 8001408:	af00      	add	r7, sp, #0
 800140a:	6078      	str	r0, [r7, #4]
	/* ~~~~~~~~~~ Set parameter ~~~~~~~~~~ */
	uPID->OutputSum = *uPID->MyOutput;
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001410:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001414:	6879      	ldr	r1, [r7, #4]
 8001416:	e9c1 2314 	strd	r2, r3, [r1, #80]	@ 0x50
	uPID->LastInput = *uPID->MyInput;
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800141e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001422:	6879      	ldr	r1, [r7, #4]
 8001424:	e9c1 2316 	strd	r2, r3, [r1, #88]	@ 0x58
	
	if (uPID->OutputSum > uPID->OutMax)
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	@ 0x50
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	@ 0x68
 8001434:	f7ff fb34 	bl	8000aa0 <__aeabi_dcmpgt>
 8001438:	4603      	mov	r3, r0
 800143a:	2b00      	cmp	r3, #0
 800143c:	d006      	beq.n	800144c <PID_Init+0x48>
	{
		uPID->OutputSum = uPID->OutMax;
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	@ 0x68
 8001444:	6879      	ldr	r1, [r7, #4]
 8001446:	e9c1 2314 	strd	r2, r3, [r1, #80]	@ 0x50
	{
		uPID->OutputSum = uPID->OutMin;
	}
	else { }
	
}
 800144a:	e011      	b.n	8001470 <PID_Init+0x6c>
	else if (uPID->OutputSum < uPID->OutMin)
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	@ 0x50
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	@ 0x60
 8001458:	f7ff fb04 	bl	8000a64 <__aeabi_dcmplt>
 800145c:	4603      	mov	r3, r0
 800145e:	2b00      	cmp	r3, #0
 8001460:	d100      	bne.n	8001464 <PID_Init+0x60>
}
 8001462:	e005      	b.n	8001470 <PID_Init+0x6c>
		uPID->OutputSum = uPID->OutMin;
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	@ 0x60
 800146a:	6879      	ldr	r1, [r7, #4]
 800146c:	e9c1 2314 	strd	r2, r3, [r1, #80]	@ 0x50
}
 8001470:	bf00      	nop
 8001472:	3708      	adds	r7, #8
 8001474:	46bd      	mov	sp, r7
 8001476:	bd80      	pop	{r7, pc}

08001478 <PID>:

void PID(PID_TypeDef *uPID, double *Input, double *Output, double *Setpoint, double Kp, double Ki, double Kd, PIDPON_TypeDef POn, PIDCD_TypeDef ControllerDirection)
{
 8001478:	b580      	push	{r7, lr}
 800147a:	b08a      	sub	sp, #40	@ 0x28
 800147c:	af00      	add	r7, sp, #0
 800147e:	6278      	str	r0, [r7, #36]	@ 0x24
 8001480:	6239      	str	r1, [r7, #32]
 8001482:	61fa      	str	r2, [r7, #28]
 8001484:	61bb      	str	r3, [r7, #24]
 8001486:	ed87 0b04 	vstr	d0, [r7, #16]
 800148a:	ed87 1b02 	vstr	d1, [r7, #8]
 800148e:	ed87 2b00 	vstr	d2, [r7]
	/* ~~~~~~~~~~ Set parameter ~~~~~~~~~~ */
	uPID->MyOutput   = Output;
 8001492:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001494:	69fa      	ldr	r2, [r7, #28]
 8001496:	645a      	str	r2, [r3, #68]	@ 0x44
	uPID->MyInput    = Input;
 8001498:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800149a:	6a3a      	ldr	r2, [r7, #32]
 800149c:	641a      	str	r2, [r3, #64]	@ 0x40
	uPID->MySetpoint = Setpoint;
 800149e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80014a0:	69ba      	ldr	r2, [r7, #24]
 80014a2:	649a      	str	r2, [r3, #72]	@ 0x48
	uPID->InAuto     = (PIDMode_TypeDef)_FALSE;
 80014a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80014a6:	2200      	movs	r2, #0
 80014a8:	705a      	strb	r2, [r3, #1]
	
	PID_SetOutputLimits(uPID, 0, _PID_8BIT_PWM_MAX);
 80014aa:	ed9f 1b15 	vldr	d1, [pc, #84]	@ 8001500 <PID+0x88>
 80014ae:	ed9f 0b16 	vldr	d0, [pc, #88]	@ 8001508 <PID+0x90>
 80014b2:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80014b4:	f000 f934 	bl	8001720 <PID_SetOutputLimits>
	
	uPID->SampleTime = _PID_SAMPLE_TIME_MS_DEF; /* default Controller Sample Time is 0.1 seconds */
 80014b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80014ba:	2264      	movs	r2, #100	@ 0x64
 80014bc:	609a      	str	r2, [r3, #8]
	
	PID_SetControllerDirection(uPID, ControllerDirection);
 80014be:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 80014c2:	4619      	mov	r1, r3
 80014c4:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80014c6:	f000 fa41 	bl	800194c <PID_SetControllerDirection>
	PID_SetTunings2(uPID, Kp, Ki, Kd, POn);
 80014ca:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 80014ce:	4619      	mov	r1, r3
 80014d0:	ed97 2b00 	vldr	d2, [r7]
 80014d4:	ed97 1b02 	vldr	d1, [r7, #8]
 80014d8:	ed97 0b04 	vldr	d0, [r7, #16]
 80014dc:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80014de:	f000 f98d 	bl	80017fc <PID_SetTunings2>
	
	uPID->LastTime = GetTime() - uPID->SampleTime;
 80014e2:	f000 fcf5 	bl	8001ed0 <HAL_GetTick>
 80014e6:	4602      	mov	r2, r0
 80014e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80014ea:	689b      	ldr	r3, [r3, #8]
 80014ec:	1ad2      	subs	r2, r2, r3
 80014ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80014f0:	605a      	str	r2, [r3, #4]
	
}
 80014f2:	bf00      	nop
 80014f4:	3728      	adds	r7, #40	@ 0x28
 80014f6:	46bd      	mov	sp, r7
 80014f8:	bd80      	pop	{r7, pc}
 80014fa:	bf00      	nop
 80014fc:	f3af 8000 	nop.w
 8001500:	00000000 	.word	0x00000000
 8001504:	406fe000 	.word	0x406fe000
	...

08001510 <PID_Compute>:
	PID(uPID, Input, Output, Setpoint, Kp, Ki, Kd, _PID_P_ON_E, ControllerDirection);
}

/* ~~~~~~~~~~~~~~~~~ Computing ~~~~~~~~~~~~~~~~~ */
uint8_t PID_Compute(PID_TypeDef *uPID)
{
 8001510:	b5b0      	push	{r4, r5, r7, lr}
 8001512:	b08c      	sub	sp, #48	@ 0x30
 8001514:	af00      	add	r7, sp, #0
 8001516:	6078      	str	r0, [r7, #4]
	double error;
	double dInput;
	double output;
	
	/* ~~~~~~~~~~ Check PID mode ~~~~~~~~~~ */
	if (!uPID->InAuto)
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	785b      	ldrb	r3, [r3, #1]
 800151c:	2b00      	cmp	r3, #0
 800151e:	d101      	bne.n	8001524 <PID_Compute+0x14>
	{
		return _FALSE;
 8001520:	2300      	movs	r3, #0
 8001522:	e0db      	b.n	80016dc <PID_Compute+0x1cc>
	}
	
	/* ~~~~~~~~~~ Calculate time ~~~~~~~~~~ */
	now        = GetTime();
 8001524:	f000 fcd4 	bl	8001ed0 <HAL_GetTick>
 8001528:	6278      	str	r0, [r7, #36]	@ 0x24
	timeChange = (now - uPID->LastTime);
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	685b      	ldr	r3, [r3, #4]
 800152e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001530:	1ad3      	subs	r3, r2, r3
 8001532:	623b      	str	r3, [r7, #32]
	
	if (timeChange >= uPID->SampleTime)
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	689b      	ldr	r3, [r3, #8]
 8001538:	6a3a      	ldr	r2, [r7, #32]
 800153a:	429a      	cmp	r2, r3
 800153c:	f0c0 80cd 	bcc.w	80016da <PID_Compute+0x1ca>
	{
		/* ..... Compute all the working error variables ..... */
		input   = *uPID->MyInput;
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001544:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001548:	e9c7 2306 	strd	r2, r3, [r7, #24]
		error   = *uPID->MySetpoint - input;
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001550:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001554:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001558:	f7fe fe5a 	bl	8000210 <__aeabi_dsub>
 800155c:	4602      	mov	r2, r0
 800155e:	460b      	mov	r3, r1
 8001560:	e9c7 2304 	strd	r2, r3, [r7, #16]
		dInput  = (input - uPID->LastInput);
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	e9d3 2316 	ldrd	r2, r3, [r3, #88]	@ 0x58
 800156a:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800156e:	f7fe fe4f 	bl	8000210 <__aeabi_dsub>
 8001572:	4602      	mov	r2, r0
 8001574:	460b      	mov	r3, r1
 8001576:	e9c7 2302 	strd	r2, r3, [r7, #8]
		
		uPID->OutputSum     += (uPID->Ki * error);
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	e9d3 4514 	ldrd	r4, r5, [r3, #80]	@ 0x50
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	e9d3 010c 	ldrd	r0, r1, [r3, #48]	@ 0x30
 8001586:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800158a:	f7fe fff9 	bl	8000580 <__aeabi_dmul>
 800158e:	4602      	mov	r2, r0
 8001590:	460b      	mov	r3, r1
 8001592:	4620      	mov	r0, r4
 8001594:	4629      	mov	r1, r5
 8001596:	f7fe fe3d 	bl	8000214 <__adddf3>
 800159a:	4602      	mov	r2, r0
 800159c:	460b      	mov	r3, r1
 800159e:	6879      	ldr	r1, [r7, #4]
 80015a0:	e9c1 2314 	strd	r2, r3, [r1, #80]	@ 0x50
		
		/* ..... Add Proportional on Measurement, if P_ON_M is specified ..... */
		if (!uPID->POnE)
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	781b      	ldrb	r3, [r3, #0]
 80015a8:	2b00      	cmp	r3, #0
 80015aa:	d114      	bne.n	80015d6 <PID_Compute+0xc6>
		{
			uPID->OutputSum -= uPID->Kp * dInput;
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	e9d3 4514 	ldrd	r4, r5, [r3, #80]	@ 0x50
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	@ 0x28
 80015b8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80015bc:	f7fe ffe0 	bl	8000580 <__aeabi_dmul>
 80015c0:	4602      	mov	r2, r0
 80015c2:	460b      	mov	r3, r1
 80015c4:	4620      	mov	r0, r4
 80015c6:	4629      	mov	r1, r5
 80015c8:	f7fe fe22 	bl	8000210 <__aeabi_dsub>
 80015cc:	4602      	mov	r2, r0
 80015ce:	460b      	mov	r3, r1
 80015d0:	6879      	ldr	r1, [r7, #4]
 80015d2:	e9c1 2314 	strd	r2, r3, [r1, #80]	@ 0x50
		}
		
		if (uPID->OutputSum > uPID->OutMax)
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	@ 0x50
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	@ 0x68
 80015e2:	f7ff fa5d 	bl	8000aa0 <__aeabi_dcmpgt>
 80015e6:	4603      	mov	r3, r0
 80015e8:	2b00      	cmp	r3, #0
 80015ea:	d006      	beq.n	80015fa <PID_Compute+0xea>
		{
			uPID->OutputSum = uPID->OutMax;
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	@ 0x68
 80015f2:	6879      	ldr	r1, [r7, #4]
 80015f4:	e9c1 2314 	strd	r2, r3, [r1, #80]	@ 0x50
 80015f8:	e010      	b.n	800161c <PID_Compute+0x10c>
		}
		else if (uPID->OutputSum < uPID->OutMin)
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	@ 0x50
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	@ 0x60
 8001606:	f7ff fa2d 	bl	8000a64 <__aeabi_dcmplt>
 800160a:	4603      	mov	r3, r0
 800160c:	2b00      	cmp	r3, #0
 800160e:	d005      	beq.n	800161c <PID_Compute+0x10c>
		{
			uPID->OutputSum = uPID->OutMin;
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	@ 0x60
 8001616:	6879      	ldr	r1, [r7, #4]
 8001618:	e9c1 2314 	strd	r2, r3, [r1, #80]	@ 0x50
		}
		else { }
		
		/* ..... Add Proportional on Error, if P_ON_E is specified ..... */
		if (uPID->POnE)
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	781b      	ldrb	r3, [r3, #0]
 8001620:	2b00      	cmp	r3, #0
 8001622:	d00b      	beq.n	800163c <PID_Compute+0x12c>
		{
			output = uPID->Kp * error;
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	@ 0x28
 800162a:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800162e:	f7fe ffa7 	bl	8000580 <__aeabi_dmul>
 8001632:	4602      	mov	r2, r0
 8001634:	460b      	mov	r3, r1
 8001636:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
 800163a:	e005      	b.n	8001648 <PID_Compute+0x138>
		}
		else
		{
			output = 0;
 800163c:	f04f 0200 	mov.w	r2, #0
 8001640:	f04f 0300 	mov.w	r3, #0
 8001644:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
		}
		
		/* ..... Compute Rest of PID Output ..... */
		output += uPID->OutputSum - uPID->Kd * dInput;
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	e9d3 4514 	ldrd	r4, r5, [r3, #80]	@ 0x50
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	@ 0x38
 8001654:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001658:	f7fe ff92 	bl	8000580 <__aeabi_dmul>
 800165c:	4602      	mov	r2, r0
 800165e:	460b      	mov	r3, r1
 8001660:	4620      	mov	r0, r4
 8001662:	4629      	mov	r1, r5
 8001664:	f7fe fdd4 	bl	8000210 <__aeabi_dsub>
 8001668:	4602      	mov	r2, r0
 800166a:	460b      	mov	r3, r1
 800166c:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8001670:	f7fe fdd0 	bl	8000214 <__adddf3>
 8001674:	4602      	mov	r2, r0
 8001676:	460b      	mov	r3, r1
 8001678:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
		
		if (output > uPID->OutMax)
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	@ 0x68
 8001682:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8001686:	f7ff fa0b 	bl	8000aa0 <__aeabi_dcmpgt>
 800168a:	4603      	mov	r3, r0
 800168c:	2b00      	cmp	r3, #0
 800168e:	d005      	beq.n	800169c <PID_Compute+0x18c>
		{
			output = uPID->OutMax;
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	@ 0x68
 8001696:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
 800169a:	e00e      	b.n	80016ba <PID_Compute+0x1aa>
		}
		else if (output < uPID->OutMin)
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	@ 0x60
 80016a2:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 80016a6:	f7ff f9dd 	bl	8000a64 <__aeabi_dcmplt>
 80016aa:	4603      	mov	r3, r0
 80016ac:	2b00      	cmp	r3, #0
 80016ae:	d004      	beq.n	80016ba <PID_Compute+0x1aa>
		{
			output = uPID->OutMin;
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	@ 0x60
 80016b6:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
		}
		else { }
		
		*uPID->MyOutput = output;
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	6c59      	ldr	r1, [r3, #68]	@ 0x44
 80016be:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80016c2:	e9c1 2300 	strd	r2, r3, [r1]
		
		/* ..... Remember some variables for next time ..... */
		uPID->LastInput = input;
 80016c6:	6879      	ldr	r1, [r7, #4]
 80016c8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80016cc:	e9c1 2316 	strd	r2, r3, [r1, #88]	@ 0x58
		uPID->LastTime = now;
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80016d4:	605a      	str	r2, [r3, #4]
		
		return _TRUE;
 80016d6:	2301      	movs	r3, #1
 80016d8:	e000      	b.n	80016dc <PID_Compute+0x1cc>
		
	}
	else
	{
		return _FALSE;
 80016da:	2300      	movs	r3, #0
	}
	
}
 80016dc:	4618      	mov	r0, r3
 80016de:	3730      	adds	r7, #48	@ 0x30
 80016e0:	46bd      	mov	sp, r7
 80016e2:	bdb0      	pop	{r4, r5, r7, pc}

080016e4 <PID_SetMode>:

/* ~~~~~~~~~~~~~~~~~ PID Mode ~~~~~~~~~~~~~~~~~~ */
void            PID_SetMode(PID_TypeDef *uPID, PIDMode_TypeDef Mode)
{
 80016e4:	b580      	push	{r7, lr}
 80016e6:	b084      	sub	sp, #16
 80016e8:	af00      	add	r7, sp, #0
 80016ea:	6078      	str	r0, [r7, #4]
 80016ec:	460b      	mov	r3, r1
 80016ee:	70fb      	strb	r3, [r7, #3]
	
	uint8_t newAuto = (Mode == _PID_MODE_AUTOMATIC);
 80016f0:	78fb      	ldrb	r3, [r7, #3]
 80016f2:	2b01      	cmp	r3, #1
 80016f4:	bf0c      	ite	eq
 80016f6:	2301      	moveq	r3, #1
 80016f8:	2300      	movne	r3, #0
 80016fa:	b2db      	uxtb	r3, r3
 80016fc:	73fb      	strb	r3, [r7, #15]
	
	/* ~~~~~~~~~~ Initialize the PID ~~~~~~~~~~ */
	if (newAuto && !uPID->InAuto)
 80016fe:	7bfb      	ldrb	r3, [r7, #15]
 8001700:	2b00      	cmp	r3, #0
 8001702:	d006      	beq.n	8001712 <PID_SetMode+0x2e>
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	785b      	ldrb	r3, [r3, #1]
 8001708:	2b00      	cmp	r3, #0
 800170a:	d102      	bne.n	8001712 <PID_SetMode+0x2e>
	{
		PID_Init(uPID);
 800170c:	6878      	ldr	r0, [r7, #4]
 800170e:	f7ff fe79 	bl	8001404 <PID_Init>
	}
	
	uPID->InAuto = (PIDMode_TypeDef)newAuto;
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	7bfa      	ldrb	r2, [r7, #15]
 8001716:	705a      	strb	r2, [r3, #1]
	
}
 8001718:	bf00      	nop
 800171a:	3710      	adds	r7, #16
 800171c:	46bd      	mov	sp, r7
 800171e:	bd80      	pop	{r7, pc}

08001720 <PID_SetOutputLimits>:
	return uPID->InAuto ? _PID_MODE_AUTOMATIC : _PID_MODE_MANUAL;
}

/* ~~~~~~~~~~~~~~~~ PID Limits ~~~~~~~~~~~~~~~~~ */
void PID_SetOutputLimits(PID_TypeDef *uPID, double Min, double Max)
{
 8001720:	b580      	push	{r7, lr}
 8001722:	b086      	sub	sp, #24
 8001724:	af00      	add	r7, sp, #0
 8001726:	6178      	str	r0, [r7, #20]
 8001728:	ed87 0b02 	vstr	d0, [r7, #8]
 800172c:	ed87 1b00 	vstr	d1, [r7]
	/* ~~~~~~~~~~ Check value ~~~~~~~~~~ */
	if (Min >= Max)
 8001730:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001734:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001738:	f7ff f9a8 	bl	8000a8c <__aeabi_dcmpge>
 800173c:	4603      	mov	r3, r0
 800173e:	2b00      	cmp	r3, #0
 8001740:	d158      	bne.n	80017f4 <PID_SetOutputLimits+0xd4>
	{
		return;
	}
	
	uPID->OutMin = Min;
 8001742:	6979      	ldr	r1, [r7, #20]
 8001744:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001748:	e9c1 2318 	strd	r2, r3, [r1, #96]	@ 0x60
	uPID->OutMax = Max;
 800174c:	6979      	ldr	r1, [r7, #20]
 800174e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001752:	e9c1 231a 	strd	r2, r3, [r1, #104]	@ 0x68
	
	/* ~~~~~~~~~~ Check PID Mode ~~~~~~~~~~ */
	if (uPID->InAuto)
 8001756:	697b      	ldr	r3, [r7, #20]
 8001758:	785b      	ldrb	r3, [r3, #1]
 800175a:	2b00      	cmp	r3, #0
 800175c:	d04b      	beq.n	80017f6 <PID_SetOutputLimits+0xd6>
	{
		
		/* ..... Check out value ..... */
		if (*uPID->MyOutput > uPID->OutMax)
 800175e:	697b      	ldr	r3, [r7, #20]
 8001760:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001762:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001766:	697b      	ldr	r3, [r7, #20]
 8001768:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	@ 0x68
 800176c:	f7ff f998 	bl	8000aa0 <__aeabi_dcmpgt>
 8001770:	4603      	mov	r3, r0
 8001772:	2b00      	cmp	r3, #0
 8001774:	d007      	beq.n	8001786 <PID_SetOutputLimits+0x66>
		{
			*uPID->MyOutput = uPID->OutMax;
 8001776:	697b      	ldr	r3, [r7, #20]
 8001778:	6c59      	ldr	r1, [r3, #68]	@ 0x44
 800177a:	697b      	ldr	r3, [r7, #20]
 800177c:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	@ 0x68
 8001780:	e9c1 2300 	strd	r2, r3, [r1]
 8001784:	e012      	b.n	80017ac <PID_SetOutputLimits+0x8c>
		}
		else if (*uPID->MyOutput < uPID->OutMin)
 8001786:	697b      	ldr	r3, [r7, #20]
 8001788:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800178a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800178e:	697b      	ldr	r3, [r7, #20]
 8001790:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	@ 0x60
 8001794:	f7ff f966 	bl	8000a64 <__aeabi_dcmplt>
 8001798:	4603      	mov	r3, r0
 800179a:	2b00      	cmp	r3, #0
 800179c:	d006      	beq.n	80017ac <PID_SetOutputLimits+0x8c>
		{
			*uPID->MyOutput = uPID->OutMin;
 800179e:	697b      	ldr	r3, [r7, #20]
 80017a0:	6c59      	ldr	r1, [r3, #68]	@ 0x44
 80017a2:	697b      	ldr	r3, [r7, #20]
 80017a4:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	@ 0x60
 80017a8:	e9c1 2300 	strd	r2, r3, [r1]
		}
		else { }
		
		/* ..... Check out value ..... */
		if (uPID->OutputSum > uPID->OutMax)
 80017ac:	697b      	ldr	r3, [r7, #20]
 80017ae:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	@ 0x50
 80017b2:	697b      	ldr	r3, [r7, #20]
 80017b4:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	@ 0x68
 80017b8:	f7ff f972 	bl	8000aa0 <__aeabi_dcmpgt>
 80017bc:	4603      	mov	r3, r0
 80017be:	2b00      	cmp	r3, #0
 80017c0:	d006      	beq.n	80017d0 <PID_SetOutputLimits+0xb0>
		{
			uPID->OutputSum = uPID->OutMax;
 80017c2:	697b      	ldr	r3, [r7, #20]
 80017c4:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	@ 0x68
 80017c8:	6979      	ldr	r1, [r7, #20]
 80017ca:	e9c1 2314 	strd	r2, r3, [r1, #80]	@ 0x50
 80017ce:	e012      	b.n	80017f6 <PID_SetOutputLimits+0xd6>
		}
		else if (uPID->OutputSum < uPID->OutMin)
 80017d0:	697b      	ldr	r3, [r7, #20]
 80017d2:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	@ 0x50
 80017d6:	697b      	ldr	r3, [r7, #20]
 80017d8:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	@ 0x60
 80017dc:	f7ff f942 	bl	8000a64 <__aeabi_dcmplt>
 80017e0:	4603      	mov	r3, r0
 80017e2:	2b00      	cmp	r3, #0
 80017e4:	d007      	beq.n	80017f6 <PID_SetOutputLimits+0xd6>
		{
			uPID->OutputSum = uPID->OutMin;
 80017e6:	697b      	ldr	r3, [r7, #20]
 80017e8:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	@ 0x60
 80017ec:	6979      	ldr	r1, [r7, #20]
 80017ee:	e9c1 2314 	strd	r2, r3, [r1, #80]	@ 0x50
 80017f2:	e000      	b.n	80017f6 <PID_SetOutputLimits+0xd6>
		return;
 80017f4:	bf00      	nop
		}
		else { }
		
	}
	
}
 80017f6:	3718      	adds	r7, #24
 80017f8:	46bd      	mov	sp, r7
 80017fa:	bd80      	pop	{r7, pc}

080017fc <PID_SetTunings2>:
void PID_SetTunings(PID_TypeDef *uPID, double Kp, double Ki, double Kd)
{
	PID_SetTunings2(uPID, Kp, Ki, Kd, uPID->POn);
}
void PID_SetTunings2(PID_TypeDef *uPID, double Kp, double Ki, double Kd, PIDPON_TypeDef POn)
{
 80017fc:	b580      	push	{r7, lr}
 80017fe:	b08a      	sub	sp, #40	@ 0x28
 8001800:	af00      	add	r7, sp, #0
 8001802:	61f8      	str	r0, [r7, #28]
 8001804:	ed87 0b04 	vstr	d0, [r7, #16]
 8001808:	ed87 1b02 	vstr	d1, [r7, #8]
 800180c:	ed87 2b00 	vstr	d2, [r7]
 8001810:	460b      	mov	r3, r1
 8001812:	76fb      	strb	r3, [r7, #27]
	
	double SampleTimeInSec;
	
	/* ~~~~~~~~~~ Check value ~~~~~~~~~~ */
	if (Kp < 0 || Ki < 0 || Kd < 0)
 8001814:	f04f 0200 	mov.w	r2, #0
 8001818:	f04f 0300 	mov.w	r3, #0
 800181c:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001820:	f7ff f920 	bl	8000a64 <__aeabi_dcmplt>
 8001824:	4603      	mov	r3, r0
 8001826:	2b00      	cmp	r3, #0
 8001828:	f040 8089 	bne.w	800193e <PID_SetTunings2+0x142>
 800182c:	f04f 0200 	mov.w	r2, #0
 8001830:	f04f 0300 	mov.w	r3, #0
 8001834:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001838:	f7ff f914 	bl	8000a64 <__aeabi_dcmplt>
 800183c:	4603      	mov	r3, r0
 800183e:	2b00      	cmp	r3, #0
 8001840:	d17d      	bne.n	800193e <PID_SetTunings2+0x142>
 8001842:	f04f 0200 	mov.w	r2, #0
 8001846:	f04f 0300 	mov.w	r3, #0
 800184a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800184e:	f7ff f909 	bl	8000a64 <__aeabi_dcmplt>
 8001852:	4603      	mov	r3, r0
 8001854:	2b00      	cmp	r3, #0
 8001856:	d172      	bne.n	800193e <PID_SetTunings2+0x142>
	{
		return;
	}
	
	/* ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ */
	uPID->POn    = POn;
 8001858:	69fb      	ldr	r3, [r7, #28]
 800185a:	7efa      	ldrb	r2, [r7, #27]
 800185c:	709a      	strb	r2, [r3, #2]
	uPID->POnE   = (PIDPON_TypeDef)(POn == _PID_P_ON_E);
 800185e:	7efb      	ldrb	r3, [r7, #27]
 8001860:	2b01      	cmp	r3, #1
 8001862:	bf0c      	ite	eq
 8001864:	2301      	moveq	r3, #1
 8001866:	2300      	movne	r3, #0
 8001868:	b2db      	uxtb	r3, r3
 800186a:	461a      	mov	r2, r3
 800186c:	69fb      	ldr	r3, [r7, #28]
 800186e:	701a      	strb	r2, [r3, #0]

	uPID->DispKp = Kp;
 8001870:	69f9      	ldr	r1, [r7, #28]
 8001872:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001876:	e9c1 2304 	strd	r2, r3, [r1, #16]
	uPID->DispKi = Ki;
 800187a:	69f9      	ldr	r1, [r7, #28]
 800187c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001880:	e9c1 2306 	strd	r2, r3, [r1, #24]
	uPID->DispKd = Kd;
 8001884:	69f9      	ldr	r1, [r7, #28]
 8001886:	e9d7 2300 	ldrd	r2, r3, [r7]
 800188a:	e9c1 2308 	strd	r2, r3, [r1, #32]
	
	/* ~~~~~~~~~ Calculate time ~~~~~~~~ */
	SampleTimeInSec = ((double)uPID->SampleTime) / 1000;
 800188e:	69fb      	ldr	r3, [r7, #28]
 8001890:	689b      	ldr	r3, [r3, #8]
 8001892:	4618      	mov	r0, r3
 8001894:	f7fe fdfa 	bl	800048c <__aeabi_ui2d>
 8001898:	f04f 0200 	mov.w	r2, #0
 800189c:	4b2a      	ldr	r3, [pc, #168]	@ (8001948 <PID_SetTunings2+0x14c>)
 800189e:	f7fe ff99 	bl	80007d4 <__aeabi_ddiv>
 80018a2:	4602      	mov	r2, r0
 80018a4:	460b      	mov	r3, r1
 80018a6:	e9c7 2308 	strd	r2, r3, [r7, #32]
	
	uPID->Kp = Kp;
 80018aa:	69f9      	ldr	r1, [r7, #28]
 80018ac:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80018b0:	e9c1 230a 	strd	r2, r3, [r1, #40]	@ 0x28
	uPID->Ki = Ki * SampleTimeInSec;
 80018b4:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80018b8:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80018bc:	f7fe fe60 	bl	8000580 <__aeabi_dmul>
 80018c0:	4602      	mov	r2, r0
 80018c2:	460b      	mov	r3, r1
 80018c4:	69f9      	ldr	r1, [r7, #28]
 80018c6:	e9c1 230c 	strd	r2, r3, [r1, #48]	@ 0x30
	uPID->Kd = Kd / SampleTimeInSec;
 80018ca:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80018ce:	e9d7 0100 	ldrd	r0, r1, [r7]
 80018d2:	f7fe ff7f 	bl	80007d4 <__aeabi_ddiv>
 80018d6:	4602      	mov	r2, r0
 80018d8:	460b      	mov	r3, r1
 80018da:	69f9      	ldr	r1, [r7, #28]
 80018dc:	e9c1 230e 	strd	r2, r3, [r1, #56]	@ 0x38
	
	/* ~~~~~~~~ Check direction ~~~~~~~~ */
	if (uPID->ControllerDirection == _PID_CD_REVERSE)
 80018e0:	69fb      	ldr	r3, [r7, #28]
 80018e2:	78db      	ldrb	r3, [r3, #3]
 80018e4:	2b01      	cmp	r3, #1
 80018e6:	d12b      	bne.n	8001940 <PID_SetTunings2+0x144>
	{
		
		uPID->Kp = (0 - uPID->Kp);
 80018e8:	69fb      	ldr	r3, [r7, #28]
 80018ea:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	@ 0x28
 80018ee:	f04f 0000 	mov.w	r0, #0
 80018f2:	f04f 0100 	mov.w	r1, #0
 80018f6:	f7fe fc8b 	bl	8000210 <__aeabi_dsub>
 80018fa:	4602      	mov	r2, r0
 80018fc:	460b      	mov	r3, r1
 80018fe:	69f9      	ldr	r1, [r7, #28]
 8001900:	e9c1 230a 	strd	r2, r3, [r1, #40]	@ 0x28
		uPID->Ki = (0 - uPID->Ki);
 8001904:	69fb      	ldr	r3, [r7, #28]
 8001906:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	@ 0x30
 800190a:	f04f 0000 	mov.w	r0, #0
 800190e:	f04f 0100 	mov.w	r1, #0
 8001912:	f7fe fc7d 	bl	8000210 <__aeabi_dsub>
 8001916:	4602      	mov	r2, r0
 8001918:	460b      	mov	r3, r1
 800191a:	69f9      	ldr	r1, [r7, #28]
 800191c:	e9c1 230c 	strd	r2, r3, [r1, #48]	@ 0x30
		uPID->Kd = (0 - uPID->Kd);
 8001920:	69fb      	ldr	r3, [r7, #28]
 8001922:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 8001926:	f04f 0000 	mov.w	r0, #0
 800192a:	f04f 0100 	mov.w	r1, #0
 800192e:	f7fe fc6f 	bl	8000210 <__aeabi_dsub>
 8001932:	4602      	mov	r2, r0
 8001934:	460b      	mov	r3, r1
 8001936:	69f9      	ldr	r1, [r7, #28]
 8001938:	e9c1 230e 	strd	r2, r3, [r1, #56]	@ 0x38
 800193c:	e000      	b.n	8001940 <PID_SetTunings2+0x144>
		return;
 800193e:	bf00      	nop
		
	}
	
}
 8001940:	3728      	adds	r7, #40	@ 0x28
 8001942:	46bd      	mov	sp, r7
 8001944:	bd80      	pop	{r7, pc}
 8001946:	bf00      	nop
 8001948:	408f4000 	.word	0x408f4000

0800194c <PID_SetControllerDirection>:

/* ~~~~~~~~~~~~~~~ PID Direction ~~~~~~~~~~~~~~~ */
void          PID_SetControllerDirection(PID_TypeDef *uPID, PIDCD_TypeDef Direction)
{
 800194c:	b580      	push	{r7, lr}
 800194e:	b082      	sub	sp, #8
 8001950:	af00      	add	r7, sp, #0
 8001952:	6078      	str	r0, [r7, #4]
 8001954:	460b      	mov	r3, r1
 8001956:	70fb      	strb	r3, [r7, #3]
	/* ~~~~~~~~~~ Check parameters ~~~~~~~~~~ */
	if ((uPID->InAuto) && (Direction !=uPID->ControllerDirection))
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	785b      	ldrb	r3, [r3, #1]
 800195c:	2b00      	cmp	r3, #0
 800195e:	d02e      	beq.n	80019be <PID_SetControllerDirection+0x72>
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	78db      	ldrb	r3, [r3, #3]
 8001964:	78fa      	ldrb	r2, [r7, #3]
 8001966:	429a      	cmp	r2, r3
 8001968:	d029      	beq.n	80019be <PID_SetControllerDirection+0x72>
	{
		
		uPID->Kp = (0 - uPID->Kp);
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	@ 0x28
 8001970:	f04f 0000 	mov.w	r0, #0
 8001974:	f04f 0100 	mov.w	r1, #0
 8001978:	f7fe fc4a 	bl	8000210 <__aeabi_dsub>
 800197c:	4602      	mov	r2, r0
 800197e:	460b      	mov	r3, r1
 8001980:	6879      	ldr	r1, [r7, #4]
 8001982:	e9c1 230a 	strd	r2, r3, [r1, #40]	@ 0x28
		uPID->Ki = (0 - uPID->Ki);
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	@ 0x30
 800198c:	f04f 0000 	mov.w	r0, #0
 8001990:	f04f 0100 	mov.w	r1, #0
 8001994:	f7fe fc3c 	bl	8000210 <__aeabi_dsub>
 8001998:	4602      	mov	r2, r0
 800199a:	460b      	mov	r3, r1
 800199c:	6879      	ldr	r1, [r7, #4]
 800199e:	e9c1 230c 	strd	r2, r3, [r1, #48]	@ 0x30
		uPID->Kd = (0 - uPID->Kd);
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 80019a8:	f04f 0000 	mov.w	r0, #0
 80019ac:	f04f 0100 	mov.w	r1, #0
 80019b0:	f7fe fc2e 	bl	8000210 <__aeabi_dsub>
 80019b4:	4602      	mov	r2, r0
 80019b6:	460b      	mov	r3, r1
 80019b8:	6879      	ldr	r1, [r7, #4]
 80019ba:	e9c1 230e 	strd	r2, r3, [r1, #56]	@ 0x38
		
	}
	
	uPID->ControllerDirection = Direction;
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	78fa      	ldrb	r2, [r7, #3]
 80019c2:	70da      	strb	r2, [r3, #3]
	
}
 80019c4:	bf00      	nop
 80019c6:	3708      	adds	r7, #8
 80019c8:	46bd      	mov	sp, r7
 80019ca:	bd80      	pop	{r7, pc}

080019cc <PID_SetSampleTime>:
	return uPID->ControllerDirection;
}

/* ~~~~~~~~~~~~~~~ PID Sampling ~~~~~~~~~~~~~~~~ */
void PID_SetSampleTime(PID_TypeDef *uPID, int32_t NewSampleTime)
{
 80019cc:	b5b0      	push	{r4, r5, r7, lr}
 80019ce:	b084      	sub	sp, #16
 80019d0:	af00      	add	r7, sp, #0
 80019d2:	6078      	str	r0, [r7, #4]
 80019d4:	6039      	str	r1, [r7, #0]
	
	double ratio;
	
	/* ~~~~~~~~~~ Check value ~~~~~~~~~~ */
	if (NewSampleTime > 0)
 80019d6:	683b      	ldr	r3, [r7, #0]
 80019d8:	2b00      	cmp	r3, #0
 80019da:	dd2e      	ble.n	8001a3a <PID_SetSampleTime+0x6e>
	{
		
		ratio = (double)NewSampleTime / (double)uPID->SampleTime;
 80019dc:	6838      	ldr	r0, [r7, #0]
 80019de:	f7fe fd65 	bl	80004ac <__aeabi_i2d>
 80019e2:	4604      	mov	r4, r0
 80019e4:	460d      	mov	r5, r1
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	689b      	ldr	r3, [r3, #8]
 80019ea:	4618      	mov	r0, r3
 80019ec:	f7fe fd4e 	bl	800048c <__aeabi_ui2d>
 80019f0:	4602      	mov	r2, r0
 80019f2:	460b      	mov	r3, r1
 80019f4:	4620      	mov	r0, r4
 80019f6:	4629      	mov	r1, r5
 80019f8:	f7fe feec 	bl	80007d4 <__aeabi_ddiv>
 80019fc:	4602      	mov	r2, r0
 80019fe:	460b      	mov	r3, r1
 8001a00:	e9c7 2302 	strd	r2, r3, [r7, #8]
		
		uPID->Ki *= ratio;
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	e9d3 010c 	ldrd	r0, r1, [r3, #48]	@ 0x30
 8001a0a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001a0e:	f7fe fdb7 	bl	8000580 <__aeabi_dmul>
 8001a12:	4602      	mov	r2, r0
 8001a14:	460b      	mov	r3, r1
 8001a16:	6879      	ldr	r1, [r7, #4]
 8001a18:	e9c1 230c 	strd	r2, r3, [r1, #48]	@ 0x30
		uPID->Kd /= ratio;
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	@ 0x38
 8001a22:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001a26:	f7fe fed5 	bl	80007d4 <__aeabi_ddiv>
 8001a2a:	4602      	mov	r2, r0
 8001a2c:	460b      	mov	r3, r1
 8001a2e:	6879      	ldr	r1, [r7, #4]
 8001a30:	e9c1 230e 	strd	r2, r3, [r1, #56]	@ 0x38
		uPID->SampleTime = (uint32_t)NewSampleTime;
 8001a34:	683a      	ldr	r2, [r7, #0]
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	609a      	str	r2, [r3, #8]
		
	}
	
}
 8001a3a:	bf00      	nop
 8001a3c:	3710      	adds	r7, #16
 8001a3e:	46bd      	mov	sp, r7
 8001a40:	bdb0      	pop	{r4, r5, r7, pc}
	...

08001a44 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001a44:	b580      	push	{r7, lr}
 8001a46:	b082      	sub	sp, #8
 8001a48:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a4a:	2300      	movs	r3, #0
 8001a4c:	607b      	str	r3, [r7, #4]
 8001a4e:	4b10      	ldr	r3, [pc, #64]	@ (8001a90 <HAL_MspInit+0x4c>)
 8001a50:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001a52:	4a0f      	ldr	r2, [pc, #60]	@ (8001a90 <HAL_MspInit+0x4c>)
 8001a54:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001a58:	6453      	str	r3, [r2, #68]	@ 0x44
 8001a5a:	4b0d      	ldr	r3, [pc, #52]	@ (8001a90 <HAL_MspInit+0x4c>)
 8001a5c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001a5e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001a62:	607b      	str	r3, [r7, #4]
 8001a64:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001a66:	2300      	movs	r3, #0
 8001a68:	603b      	str	r3, [r7, #0]
 8001a6a:	4b09      	ldr	r3, [pc, #36]	@ (8001a90 <HAL_MspInit+0x4c>)
 8001a6c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a6e:	4a08      	ldr	r2, [pc, #32]	@ (8001a90 <HAL_MspInit+0x4c>)
 8001a70:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001a74:	6413      	str	r3, [r2, #64]	@ 0x40
 8001a76:	4b06      	ldr	r3, [pc, #24]	@ (8001a90 <HAL_MspInit+0x4c>)
 8001a78:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a7a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001a7e:	603b      	str	r3, [r7, #0]
 8001a80:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001a82:	2007      	movs	r0, #7
 8001a84:	f000 ff18 	bl	80028b8 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001a88:	bf00      	nop
 8001a8a:	3708      	adds	r7, #8
 8001a8c:	46bd      	mov	sp, r7
 8001a8e:	bd80      	pop	{r7, pc}
 8001a90:	40023800 	.word	0x40023800

08001a94 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001a94:	b580      	push	{r7, lr}
 8001a96:	b08a      	sub	sp, #40	@ 0x28
 8001a98:	af00      	add	r7, sp, #0
 8001a9a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a9c:	f107 0314 	add.w	r3, r7, #20
 8001aa0:	2200      	movs	r2, #0
 8001aa2:	601a      	str	r2, [r3, #0]
 8001aa4:	605a      	str	r2, [r3, #4]
 8001aa6:	609a      	str	r2, [r3, #8]
 8001aa8:	60da      	str	r2, [r3, #12]
 8001aaa:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	4a2e      	ldr	r2, [pc, #184]	@ (8001b6c <HAL_ADC_MspInit+0xd8>)
 8001ab2:	4293      	cmp	r3, r2
 8001ab4:	d156      	bne.n	8001b64 <HAL_ADC_MspInit+0xd0>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001ab6:	2300      	movs	r3, #0
 8001ab8:	613b      	str	r3, [r7, #16]
 8001aba:	4b2d      	ldr	r3, [pc, #180]	@ (8001b70 <HAL_ADC_MspInit+0xdc>)
 8001abc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001abe:	4a2c      	ldr	r2, [pc, #176]	@ (8001b70 <HAL_ADC_MspInit+0xdc>)
 8001ac0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001ac4:	6453      	str	r3, [r2, #68]	@ 0x44
 8001ac6:	4b2a      	ldr	r3, [pc, #168]	@ (8001b70 <HAL_ADC_MspInit+0xdc>)
 8001ac8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001aca:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001ace:	613b      	str	r3, [r7, #16]
 8001ad0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ad2:	2300      	movs	r3, #0
 8001ad4:	60fb      	str	r3, [r7, #12]
 8001ad6:	4b26      	ldr	r3, [pc, #152]	@ (8001b70 <HAL_ADC_MspInit+0xdc>)
 8001ad8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ada:	4a25      	ldr	r2, [pc, #148]	@ (8001b70 <HAL_ADC_MspInit+0xdc>)
 8001adc:	f043 0301 	orr.w	r3, r3, #1
 8001ae0:	6313      	str	r3, [r2, #48]	@ 0x30
 8001ae2:	4b23      	ldr	r3, [pc, #140]	@ (8001b70 <HAL_ADC_MspInit+0xdc>)
 8001ae4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ae6:	f003 0301 	and.w	r3, r3, #1
 8001aea:	60fb      	str	r3, [r7, #12]
 8001aec:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001aee:	2301      	movs	r3, #1
 8001af0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001af2:	2303      	movs	r3, #3
 8001af4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001af6:	2300      	movs	r3, #0
 8001af8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001afa:	f107 0314 	add.w	r3, r7, #20
 8001afe:	4619      	mov	r1, r3
 8001b00:	481c      	ldr	r0, [pc, #112]	@ (8001b74 <HAL_ADC_MspInit+0xe0>)
 8001b02:	f001 fa8b 	bl	800301c <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8001b06:	4b1c      	ldr	r3, [pc, #112]	@ (8001b78 <HAL_ADC_MspInit+0xe4>)
 8001b08:	4a1c      	ldr	r2, [pc, #112]	@ (8001b7c <HAL_ADC_MspInit+0xe8>)
 8001b0a:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8001b0c:	4b1a      	ldr	r3, [pc, #104]	@ (8001b78 <HAL_ADC_MspInit+0xe4>)
 8001b0e:	2200      	movs	r2, #0
 8001b10:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001b12:	4b19      	ldr	r3, [pc, #100]	@ (8001b78 <HAL_ADC_MspInit+0xe4>)
 8001b14:	2200      	movs	r2, #0
 8001b16:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001b18:	4b17      	ldr	r3, [pc, #92]	@ (8001b78 <HAL_ADC_MspInit+0xe4>)
 8001b1a:	2200      	movs	r2, #0
 8001b1c:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001b1e:	4b16      	ldr	r3, [pc, #88]	@ (8001b78 <HAL_ADC_MspInit+0xe4>)
 8001b20:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001b24:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001b26:	4b14      	ldr	r3, [pc, #80]	@ (8001b78 <HAL_ADC_MspInit+0xe4>)
 8001b28:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8001b2c:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001b2e:	4b12      	ldr	r3, [pc, #72]	@ (8001b78 <HAL_ADC_MspInit+0xe4>)
 8001b30:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001b34:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 8001b36:	4b10      	ldr	r3, [pc, #64]	@ (8001b78 <HAL_ADC_MspInit+0xe4>)
 8001b38:	2200      	movs	r2, #0
 8001b3a:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8001b3c:	4b0e      	ldr	r3, [pc, #56]	@ (8001b78 <HAL_ADC_MspInit+0xe4>)
 8001b3e:	2200      	movs	r2, #0
 8001b40:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001b42:	4b0d      	ldr	r3, [pc, #52]	@ (8001b78 <HAL_ADC_MspInit+0xe4>)
 8001b44:	2200      	movs	r2, #0
 8001b46:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001b48:	480b      	ldr	r0, [pc, #44]	@ (8001b78 <HAL_ADC_MspInit+0xe4>)
 8001b4a:	f000 fef7 	bl	800293c <HAL_DMA_Init>
 8001b4e:	4603      	mov	r3, r0
 8001b50:	2b00      	cmp	r3, #0
 8001b52:	d001      	beq.n	8001b58 <HAL_ADC_MspInit+0xc4>
    {
      Error_Handler();
 8001b54:	f7ff fc50 	bl	80013f8 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	4a07      	ldr	r2, [pc, #28]	@ (8001b78 <HAL_ADC_MspInit+0xe4>)
 8001b5c:	639a      	str	r2, [r3, #56]	@ 0x38
 8001b5e:	4a06      	ldr	r2, [pc, #24]	@ (8001b78 <HAL_ADC_MspInit+0xe4>)
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	6393      	str	r3, [r2, #56]	@ 0x38

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 8001b64:	bf00      	nop
 8001b66:	3728      	adds	r7, #40	@ 0x28
 8001b68:	46bd      	mov	sp, r7
 8001b6a:	bd80      	pop	{r7, pc}
 8001b6c:	40012000 	.word	0x40012000
 8001b70:	40023800 	.word	0x40023800
 8001b74:	40020000 	.word	0x40020000
 8001b78:	20000074 	.word	0x20000074
 8001b7c:	40026410 	.word	0x40026410

08001b80 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001b80:	b580      	push	{r7, lr}
 8001b82:	b08a      	sub	sp, #40	@ 0x28
 8001b84:	af00      	add	r7, sp, #0
 8001b86:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b88:	f107 0314 	add.w	r3, r7, #20
 8001b8c:	2200      	movs	r2, #0
 8001b8e:	601a      	str	r2, [r3, #0]
 8001b90:	605a      	str	r2, [r3, #4]
 8001b92:	609a      	str	r2, [r3, #8]
 8001b94:	60da      	str	r2, [r3, #12]
 8001b96:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM2)
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001ba0:	d135      	bne.n	8001c0e <HAL_TIM_Base_MspInit+0x8e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001ba2:	2300      	movs	r3, #0
 8001ba4:	613b      	str	r3, [r7, #16]
 8001ba6:	4b25      	ldr	r3, [pc, #148]	@ (8001c3c <HAL_TIM_Base_MspInit+0xbc>)
 8001ba8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001baa:	4a24      	ldr	r2, [pc, #144]	@ (8001c3c <HAL_TIM_Base_MspInit+0xbc>)
 8001bac:	f043 0301 	orr.w	r3, r3, #1
 8001bb0:	6413      	str	r3, [r2, #64]	@ 0x40
 8001bb2:	4b22      	ldr	r3, [pc, #136]	@ (8001c3c <HAL_TIM_Base_MspInit+0xbc>)
 8001bb4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001bb6:	f003 0301 	and.w	r3, r3, #1
 8001bba:	613b      	str	r3, [r7, #16]
 8001bbc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001bbe:	2300      	movs	r3, #0
 8001bc0:	60fb      	str	r3, [r7, #12]
 8001bc2:	4b1e      	ldr	r3, [pc, #120]	@ (8001c3c <HAL_TIM_Base_MspInit+0xbc>)
 8001bc4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001bc6:	4a1d      	ldr	r2, [pc, #116]	@ (8001c3c <HAL_TIM_Base_MspInit+0xbc>)
 8001bc8:	f043 0301 	orr.w	r3, r3, #1
 8001bcc:	6313      	str	r3, [r2, #48]	@ 0x30
 8001bce:	4b1b      	ldr	r3, [pc, #108]	@ (8001c3c <HAL_TIM_Base_MspInit+0xbc>)
 8001bd0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001bd2:	f003 0301 	and.w	r3, r3, #1
 8001bd6:	60fb      	str	r3, [r7, #12]
 8001bd8:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA15     ------> TIM2_ETR
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8001bda:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8001bde:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001be0:	2302      	movs	r3, #2
 8001be2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001be4:	2300      	movs	r3, #0
 8001be6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001be8:	2300      	movs	r3, #0
 8001bea:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001bec:	2301      	movs	r3, #1
 8001bee:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001bf0:	f107 0314 	add.w	r3, r7, #20
 8001bf4:	4619      	mov	r1, r3
 8001bf6:	4812      	ldr	r0, [pc, #72]	@ (8001c40 <HAL_TIM_Base_MspInit+0xc0>)
 8001bf8:	f001 fa10 	bl	800301c <HAL_GPIO_Init>

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001bfc:	2200      	movs	r2, #0
 8001bfe:	2100      	movs	r1, #0
 8001c00:	201c      	movs	r0, #28
 8001c02:	f000 fe64 	bl	80028ce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001c06:	201c      	movs	r0, #28
 8001c08:	f000 fe7d 	bl	8002906 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8001c0c:	e012      	b.n	8001c34 <HAL_TIM_Base_MspInit+0xb4>
  else if(htim_base->Instance==TIM3)
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	4a0c      	ldr	r2, [pc, #48]	@ (8001c44 <HAL_TIM_Base_MspInit+0xc4>)
 8001c14:	4293      	cmp	r3, r2
 8001c16:	d10d      	bne.n	8001c34 <HAL_TIM_Base_MspInit+0xb4>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001c18:	2300      	movs	r3, #0
 8001c1a:	60bb      	str	r3, [r7, #8]
 8001c1c:	4b07      	ldr	r3, [pc, #28]	@ (8001c3c <HAL_TIM_Base_MspInit+0xbc>)
 8001c1e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c20:	4a06      	ldr	r2, [pc, #24]	@ (8001c3c <HAL_TIM_Base_MspInit+0xbc>)
 8001c22:	f043 0302 	orr.w	r3, r3, #2
 8001c26:	6413      	str	r3, [r2, #64]	@ 0x40
 8001c28:	4b04      	ldr	r3, [pc, #16]	@ (8001c3c <HAL_TIM_Base_MspInit+0xbc>)
 8001c2a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c2c:	f003 0302 	and.w	r3, r3, #2
 8001c30:	60bb      	str	r3, [r7, #8]
 8001c32:	68bb      	ldr	r3, [r7, #8]
}
 8001c34:	bf00      	nop
 8001c36:	3728      	adds	r7, #40	@ 0x28
 8001c38:	46bd      	mov	sp, r7
 8001c3a:	bd80      	pop	{r7, pc}
 8001c3c:	40023800 	.word	0x40023800
 8001c40:	40020000 	.word	0x40020000
 8001c44:	40000400 	.word	0x40000400

08001c48 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001c48:	b580      	push	{r7, lr}
 8001c4a:	b08a      	sub	sp, #40	@ 0x28
 8001c4c:	af00      	add	r7, sp, #0
 8001c4e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c50:	f107 0314 	add.w	r3, r7, #20
 8001c54:	2200      	movs	r2, #0
 8001c56:	601a      	str	r2, [r3, #0]
 8001c58:	605a      	str	r2, [r3, #4]
 8001c5a:	609a      	str	r2, [r3, #8]
 8001c5c:	60da      	str	r2, [r3, #12]
 8001c5e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001c68:	d11e      	bne.n	8001ca8 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c6a:	2300      	movs	r3, #0
 8001c6c:	613b      	str	r3, [r7, #16]
 8001c6e:	4b22      	ldr	r3, [pc, #136]	@ (8001cf8 <HAL_TIM_MspPostInit+0xb0>)
 8001c70:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c72:	4a21      	ldr	r2, [pc, #132]	@ (8001cf8 <HAL_TIM_MspPostInit+0xb0>)
 8001c74:	f043 0301 	orr.w	r3, r3, #1
 8001c78:	6313      	str	r3, [r2, #48]	@ 0x30
 8001c7a:	4b1f      	ldr	r3, [pc, #124]	@ (8001cf8 <HAL_TIM_MspPostInit+0xb0>)
 8001c7c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c7e:	f003 0301 	and.w	r3, r3, #1
 8001c82:	613b      	str	r3, [r7, #16]
 8001c84:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001c86:	2302      	movs	r3, #2
 8001c88:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c8a:	2302      	movs	r3, #2
 8001c8c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c8e:	2300      	movs	r3, #0
 8001c90:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c92:	2300      	movs	r3, #0
 8001c94:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001c96:	2301      	movs	r3, #1
 8001c98:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c9a:	f107 0314 	add.w	r3, r7, #20
 8001c9e:	4619      	mov	r1, r3
 8001ca0:	4816      	ldr	r0, [pc, #88]	@ (8001cfc <HAL_TIM_MspPostInit+0xb4>)
 8001ca2:	f001 f9bb 	bl	800301c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8001ca6:	e022      	b.n	8001cee <HAL_TIM_MspPostInit+0xa6>
  else if(htim->Instance==TIM3)
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	4a14      	ldr	r2, [pc, #80]	@ (8001d00 <HAL_TIM_MspPostInit+0xb8>)
 8001cae:	4293      	cmp	r3, r2
 8001cb0:	d11d      	bne.n	8001cee <HAL_TIM_MspPostInit+0xa6>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001cb2:	2300      	movs	r3, #0
 8001cb4:	60fb      	str	r3, [r7, #12]
 8001cb6:	4b10      	ldr	r3, [pc, #64]	@ (8001cf8 <HAL_TIM_MspPostInit+0xb0>)
 8001cb8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001cba:	4a0f      	ldr	r2, [pc, #60]	@ (8001cf8 <HAL_TIM_MspPostInit+0xb0>)
 8001cbc:	f043 0301 	orr.w	r3, r3, #1
 8001cc0:	6313      	str	r3, [r2, #48]	@ 0x30
 8001cc2:	4b0d      	ldr	r3, [pc, #52]	@ (8001cf8 <HAL_TIM_MspPostInit+0xb0>)
 8001cc4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001cc6:	f003 0301 	and.w	r3, r3, #1
 8001cca:	60fb      	str	r3, [r7, #12]
 8001ccc:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001cce:	2340      	movs	r3, #64	@ 0x40
 8001cd0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cd2:	2302      	movs	r3, #2
 8001cd4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cd6:	2300      	movs	r3, #0
 8001cd8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001cda:	2300      	movs	r3, #0
 8001cdc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001cde:	2302      	movs	r3, #2
 8001ce0:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ce2:	f107 0314 	add.w	r3, r7, #20
 8001ce6:	4619      	mov	r1, r3
 8001ce8:	4804      	ldr	r0, [pc, #16]	@ (8001cfc <HAL_TIM_MspPostInit+0xb4>)
 8001cea:	f001 f997 	bl	800301c <HAL_GPIO_Init>
}
 8001cee:	bf00      	nop
 8001cf0:	3728      	adds	r7, #40	@ 0x28
 8001cf2:	46bd      	mov	sp, r7
 8001cf4:	bd80      	pop	{r7, pc}
 8001cf6:	bf00      	nop
 8001cf8:	40023800 	.word	0x40023800
 8001cfc:	40020000 	.word	0x40020000
 8001d00:	40000400 	.word	0x40000400

08001d04 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001d04:	b480      	push	{r7}
 8001d06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001d08:	bf00      	nop
 8001d0a:	e7fd      	b.n	8001d08 <NMI_Handler+0x4>

08001d0c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001d0c:	b480      	push	{r7}
 8001d0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001d10:	bf00      	nop
 8001d12:	e7fd      	b.n	8001d10 <HardFault_Handler+0x4>

08001d14 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001d14:	b480      	push	{r7}
 8001d16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001d18:	bf00      	nop
 8001d1a:	e7fd      	b.n	8001d18 <MemManage_Handler+0x4>

08001d1c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001d1c:	b480      	push	{r7}
 8001d1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001d20:	bf00      	nop
 8001d22:	e7fd      	b.n	8001d20 <BusFault_Handler+0x4>

08001d24 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001d24:	b480      	push	{r7}
 8001d26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001d28:	bf00      	nop
 8001d2a:	e7fd      	b.n	8001d28 <UsageFault_Handler+0x4>

08001d2c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001d2c:	b480      	push	{r7}
 8001d2e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001d30:	bf00      	nop
 8001d32:	46bd      	mov	sp, r7
 8001d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d38:	4770      	bx	lr

08001d3a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001d3a:	b480      	push	{r7}
 8001d3c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001d3e:	bf00      	nop
 8001d40:	46bd      	mov	sp, r7
 8001d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d46:	4770      	bx	lr

08001d48 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001d48:	b480      	push	{r7}
 8001d4a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001d4c:	bf00      	nop
 8001d4e:	46bd      	mov	sp, r7
 8001d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d54:	4770      	bx	lr

08001d56 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001d56:	b580      	push	{r7, lr}
 8001d58:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001d5a:	f000 f8a5 	bl	8001ea8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001d5e:	bf00      	nop
 8001d60:	bd80      	pop	{r7, pc}
	...

08001d64 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001d64:	b580      	push	{r7, lr}
 8001d66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001d68:	4802      	ldr	r0, [pc, #8]	@ (8001d74 <TIM2_IRQHandler+0x10>)
 8001d6a:	f002 fb99 	bl	80044a0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001d6e:	bf00      	nop
 8001d70:	bd80      	pop	{r7, pc}
 8001d72:	bf00      	nop
 8001d74:	200000d4 	.word	0x200000d4

08001d78 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8001d78:	b580      	push	{r7, lr}
 8001d7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001d7c:	4802      	ldr	r0, [pc, #8]	@ (8001d88 <DMA2_Stream0_IRQHandler+0x10>)
 8001d7e:	f000 fee3 	bl	8002b48 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8001d82:	bf00      	nop
 8001d84:	bd80      	pop	{r7, pc}
 8001d86:	bf00      	nop
 8001d88:	20000074 	.word	0x20000074

08001d8c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001d8c:	b480      	push	{r7}
 8001d8e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001d90:	4b06      	ldr	r3, [pc, #24]	@ (8001dac <SystemInit+0x20>)
 8001d92:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001d96:	4a05      	ldr	r2, [pc, #20]	@ (8001dac <SystemInit+0x20>)
 8001d98:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001d9c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001da0:	bf00      	nop
 8001da2:	46bd      	mov	sp, r7
 8001da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001da8:	4770      	bx	lr
 8001daa:	bf00      	nop
 8001dac:	e000ed00 	.word	0xe000ed00

08001db0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001db0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001de8 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8001db4:	f7ff ffea 	bl	8001d8c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001db8:	480c      	ldr	r0, [pc, #48]	@ (8001dec <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001dba:	490d      	ldr	r1, [pc, #52]	@ (8001df0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001dbc:	4a0d      	ldr	r2, [pc, #52]	@ (8001df4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001dbe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001dc0:	e002      	b.n	8001dc8 <LoopCopyDataInit>

08001dc2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001dc2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001dc4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001dc6:	3304      	adds	r3, #4

08001dc8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001dc8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001dca:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001dcc:	d3f9      	bcc.n	8001dc2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001dce:	4a0a      	ldr	r2, [pc, #40]	@ (8001df8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001dd0:	4c0a      	ldr	r4, [pc, #40]	@ (8001dfc <LoopFillZerobss+0x22>)
  movs r3, #0
 8001dd2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001dd4:	e001      	b.n	8001dda <LoopFillZerobss>

08001dd6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001dd6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001dd8:	3204      	adds	r2, #4

08001dda <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001dda:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001ddc:	d3fb      	bcc.n	8001dd6 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8001dde:	f003 fa21 	bl	8005224 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001de2:	f7fe ffe1 	bl	8000da8 <main>
  bx  lr    
 8001de6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001de8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001dec:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001df0:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8001df4:	080052ac 	.word	0x080052ac
  ldr r2, =_sbss
 8001df8:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8001dfc:	200002fc 	.word	0x200002fc

08001e00 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001e00:	e7fe      	b.n	8001e00 <ADC_IRQHandler>
	...

08001e04 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001e04:	b580      	push	{r7, lr}
 8001e06:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001e08:	4b0e      	ldr	r3, [pc, #56]	@ (8001e44 <HAL_Init+0x40>)
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	4a0d      	ldr	r2, [pc, #52]	@ (8001e44 <HAL_Init+0x40>)
 8001e0e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001e12:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001e14:	4b0b      	ldr	r3, [pc, #44]	@ (8001e44 <HAL_Init+0x40>)
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	4a0a      	ldr	r2, [pc, #40]	@ (8001e44 <HAL_Init+0x40>)
 8001e1a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001e1e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001e20:	4b08      	ldr	r3, [pc, #32]	@ (8001e44 <HAL_Init+0x40>)
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	4a07      	ldr	r2, [pc, #28]	@ (8001e44 <HAL_Init+0x40>)
 8001e26:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001e2a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001e2c:	2003      	movs	r0, #3
 8001e2e:	f000 fd43 	bl	80028b8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001e32:	2000      	movs	r0, #0
 8001e34:	f000 f808 	bl	8001e48 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001e38:	f7ff fe04 	bl	8001a44 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001e3c:	2300      	movs	r3, #0
}
 8001e3e:	4618      	mov	r0, r3
 8001e40:	bd80      	pop	{r7, pc}
 8001e42:	bf00      	nop
 8001e44:	40023c00 	.word	0x40023c00

08001e48 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001e48:	b580      	push	{r7, lr}
 8001e4a:	b082      	sub	sp, #8
 8001e4c:	af00      	add	r7, sp, #0
 8001e4e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001e50:	4b12      	ldr	r3, [pc, #72]	@ (8001e9c <HAL_InitTick+0x54>)
 8001e52:	681a      	ldr	r2, [r3, #0]
 8001e54:	4b12      	ldr	r3, [pc, #72]	@ (8001ea0 <HAL_InitTick+0x58>)
 8001e56:	781b      	ldrb	r3, [r3, #0]
 8001e58:	4619      	mov	r1, r3
 8001e5a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001e5e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001e62:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e66:	4618      	mov	r0, r3
 8001e68:	f000 fd5b 	bl	8002922 <HAL_SYSTICK_Config>
 8001e6c:	4603      	mov	r3, r0
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	d001      	beq.n	8001e76 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001e72:	2301      	movs	r3, #1
 8001e74:	e00e      	b.n	8001e94 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	2b0f      	cmp	r3, #15
 8001e7a:	d80a      	bhi.n	8001e92 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001e7c:	2200      	movs	r2, #0
 8001e7e:	6879      	ldr	r1, [r7, #4]
 8001e80:	f04f 30ff 	mov.w	r0, #4294967295
 8001e84:	f000 fd23 	bl	80028ce <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001e88:	4a06      	ldr	r2, [pc, #24]	@ (8001ea4 <HAL_InitTick+0x5c>)
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001e8e:	2300      	movs	r3, #0
 8001e90:	e000      	b.n	8001e94 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001e92:	2301      	movs	r3, #1
}
 8001e94:	4618      	mov	r0, r3
 8001e96:	3708      	adds	r7, #8
 8001e98:	46bd      	mov	sp, r7
 8001e9a:	bd80      	pop	{r7, pc}
 8001e9c:	20000004 	.word	0x20000004
 8001ea0:	2000000c 	.word	0x2000000c
 8001ea4:	20000008 	.word	0x20000008

08001ea8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001ea8:	b480      	push	{r7}
 8001eaa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001eac:	4b06      	ldr	r3, [pc, #24]	@ (8001ec8 <HAL_IncTick+0x20>)
 8001eae:	781b      	ldrb	r3, [r3, #0]
 8001eb0:	461a      	mov	r2, r3
 8001eb2:	4b06      	ldr	r3, [pc, #24]	@ (8001ecc <HAL_IncTick+0x24>)
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	4413      	add	r3, r2
 8001eb8:	4a04      	ldr	r2, [pc, #16]	@ (8001ecc <HAL_IncTick+0x24>)
 8001eba:	6013      	str	r3, [r2, #0]
}
 8001ebc:	bf00      	nop
 8001ebe:	46bd      	mov	sp, r7
 8001ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ec4:	4770      	bx	lr
 8001ec6:	bf00      	nop
 8001ec8:	2000000c 	.word	0x2000000c
 8001ecc:	200002f8 	.word	0x200002f8

08001ed0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001ed0:	b480      	push	{r7}
 8001ed2:	af00      	add	r7, sp, #0
  return uwTick;
 8001ed4:	4b03      	ldr	r3, [pc, #12]	@ (8001ee4 <HAL_GetTick+0x14>)
 8001ed6:	681b      	ldr	r3, [r3, #0]
}
 8001ed8:	4618      	mov	r0, r3
 8001eda:	46bd      	mov	sp, r7
 8001edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ee0:	4770      	bx	lr
 8001ee2:	bf00      	nop
 8001ee4:	200002f8 	.word	0x200002f8

08001ee8 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001ee8:	b580      	push	{r7, lr}
 8001eea:	b084      	sub	sp, #16
 8001eec:	af00      	add	r7, sp, #0
 8001eee:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001ef0:	2300      	movs	r3, #0
 8001ef2:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	d101      	bne.n	8001efe <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001efa:	2301      	movs	r3, #1
 8001efc:	e033      	b.n	8001f66 <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	d109      	bne.n	8001f1a <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001f06:	6878      	ldr	r0, [r7, #4]
 8001f08:	f7ff fdc4 	bl	8001a94 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	2200      	movs	r2, #0
 8001f10:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	2200      	movs	r2, #0
 8001f16:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f1e:	f003 0310 	and.w	r3, r3, #16
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	d118      	bne.n	8001f58 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f2a:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8001f2e:	f023 0302 	bic.w	r3, r3, #2
 8001f32:	f043 0202 	orr.w	r2, r3, #2
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 8001f3a:	6878      	ldr	r0, [r7, #4]
 8001f3c:	f000 fa6e 	bl	800241c <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	2200      	movs	r2, #0
 8001f44:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f4a:	f023 0303 	bic.w	r3, r3, #3
 8001f4e:	f043 0201 	orr.w	r2, r3, #1
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	641a      	str	r2, [r3, #64]	@ 0x40
 8001f56:	e001      	b.n	8001f5c <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001f58:	2301      	movs	r3, #1
 8001f5a:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	2200      	movs	r2, #0
 8001f60:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001f64:	7bfb      	ldrb	r3, [r7, #15]
}
 8001f66:	4618      	mov	r0, r3
 8001f68:	3710      	adds	r7, #16
 8001f6a:	46bd      	mov	sp, r7
 8001f6c:	bd80      	pop	{r7, pc}
	...

08001f70 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8001f70:	b580      	push	{r7, lr}
 8001f72:	b086      	sub	sp, #24
 8001f74:	af00      	add	r7, sp, #0
 8001f76:	60f8      	str	r0, [r7, #12]
 8001f78:	60b9      	str	r1, [r7, #8]
 8001f7a:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8001f7c:	2300      	movs	r3, #0
 8001f7e:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 8001f80:	68fb      	ldr	r3, [r7, #12]
 8001f82:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001f86:	2b01      	cmp	r3, #1
 8001f88:	d101      	bne.n	8001f8e <HAL_ADC_Start_DMA+0x1e>
 8001f8a:	2302      	movs	r3, #2
 8001f8c:	e0e9      	b.n	8002162 <HAL_ADC_Start_DMA+0x1f2>
 8001f8e:	68fb      	ldr	r3, [r7, #12]
 8001f90:	2201      	movs	r2, #1
 8001f92:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8001f96:	68fb      	ldr	r3, [r7, #12]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	689b      	ldr	r3, [r3, #8]
 8001f9c:	f003 0301 	and.w	r3, r3, #1
 8001fa0:	2b01      	cmp	r3, #1
 8001fa2:	d018      	beq.n	8001fd6 <HAL_ADC_Start_DMA+0x66>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001fa4:	68fb      	ldr	r3, [r7, #12]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	689a      	ldr	r2, [r3, #8]
 8001faa:	68fb      	ldr	r3, [r7, #12]
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	f042 0201 	orr.w	r2, r2, #1
 8001fb2:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001fb4:	4b6d      	ldr	r3, [pc, #436]	@ (800216c <HAL_ADC_Start_DMA+0x1fc>)
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	4a6d      	ldr	r2, [pc, #436]	@ (8002170 <HAL_ADC_Start_DMA+0x200>)
 8001fba:	fba2 2303 	umull	r2, r3, r2, r3
 8001fbe:	0c9a      	lsrs	r2, r3, #18
 8001fc0:	4613      	mov	r3, r2
 8001fc2:	005b      	lsls	r3, r3, #1
 8001fc4:	4413      	add	r3, r2
 8001fc6:	613b      	str	r3, [r7, #16]
    while (counter != 0U)
 8001fc8:	e002      	b.n	8001fd0 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8001fca:	693b      	ldr	r3, [r7, #16]
 8001fcc:	3b01      	subs	r3, #1
 8001fce:	613b      	str	r3, [r7, #16]
    while (counter != 0U)
 8001fd0:	693b      	ldr	r3, [r7, #16]
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	d1f9      	bne.n	8001fca <HAL_ADC_Start_DMA+0x5a>
    }
  }

  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if ((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 8001fd6:	68fb      	ldr	r3, [r7, #12]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	689b      	ldr	r3, [r3, #8]
 8001fdc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001fe0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001fe4:	d107      	bne.n	8001ff6 <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8001fe6:	68fb      	ldr	r3, [r7, #12]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	689a      	ldr	r2, [r3, #8]
 8001fec:	68fb      	ldr	r3, [r7, #12]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001ff4:	609a      	str	r2, [r3, #8]
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8001ff6:	68fb      	ldr	r3, [r7, #12]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	689b      	ldr	r3, [r3, #8]
 8001ffc:	f003 0301 	and.w	r3, r3, #1
 8002000:	2b01      	cmp	r3, #1
 8002002:	f040 80a1 	bne.w	8002148 <HAL_ADC_Start_DMA+0x1d8>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8002006:	68fb      	ldr	r3, [r7, #12]
 8002008:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800200a:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 800200e:	f023 0301 	bic.w	r3, r3, #1
 8002012:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8002016:	68fb      	ldr	r3, [r7, #12]
 8002018:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800201a:	68fb      	ldr	r3, [r7, #12]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	685b      	ldr	r3, [r3, #4]
 8002020:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002024:	2b00      	cmp	r3, #0
 8002026:	d007      	beq.n	8002038 <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8002028:	68fb      	ldr	r3, [r7, #12]
 800202a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800202c:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8002030:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8002034:	68fb      	ldr	r3, [r7, #12]
 8002036:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002038:	68fb      	ldr	r3, [r7, #12]
 800203a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800203c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002040:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002044:	d106      	bne.n	8002054 <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8002046:	68fb      	ldr	r3, [r7, #12]
 8002048:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800204a:	f023 0206 	bic.w	r2, r3, #6
 800204e:	68fb      	ldr	r3, [r7, #12]
 8002050:	645a      	str	r2, [r3, #68]	@ 0x44
 8002052:	e002      	b.n	800205a <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8002054:	68fb      	ldr	r3, [r7, #12]
 8002056:	2200      	movs	r2, #0
 8002058:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 800205a:	68fb      	ldr	r3, [r7, #12]
 800205c:	2200      	movs	r2, #0
 800205e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002062:	4b44      	ldr	r3, [pc, #272]	@ (8002174 <HAL_ADC_Start_DMA+0x204>)
 8002064:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8002066:	68fb      	ldr	r3, [r7, #12]
 8002068:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800206a:	4a43      	ldr	r2, [pc, #268]	@ (8002178 <HAL_ADC_Start_DMA+0x208>)
 800206c:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800206e:	68fb      	ldr	r3, [r7, #12]
 8002070:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002072:	4a42      	ldr	r2, [pc, #264]	@ (800217c <HAL_ADC_Start_DMA+0x20c>)
 8002074:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8002076:	68fb      	ldr	r3, [r7, #12]
 8002078:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800207a:	4a41      	ldr	r2, [pc, #260]	@ (8002180 <HAL_ADC_Start_DMA+0x210>)
 800207c:	64da      	str	r2, [r3, #76]	@ 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 800207e:	68fb      	ldr	r3, [r7, #12]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 8002086:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8002088:	68fb      	ldr	r3, [r7, #12]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	685a      	ldr	r2, [r3, #4]
 800208e:	68fb      	ldr	r3, [r7, #12]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	f042 6280 	orr.w	r2, r2, #67108864	@ 0x4000000
 8002096:	605a      	str	r2, [r3, #4]

    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8002098:	68fb      	ldr	r3, [r7, #12]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	689a      	ldr	r2, [r3, #8]
 800209e:	68fb      	ldr	r3, [r7, #12]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80020a6:	609a      	str	r2, [r3, #8]

    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80020a8:	68fb      	ldr	r3, [r7, #12]
 80020aa:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 80020ac:	68fb      	ldr	r3, [r7, #12]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	334c      	adds	r3, #76	@ 0x4c
 80020b2:	4619      	mov	r1, r3
 80020b4:	68ba      	ldr	r2, [r7, #8]
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	f000 fcee 	bl	8002a98 <HAL_DMA_Start_IT>

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 80020bc:	697b      	ldr	r3, [r7, #20]
 80020be:	685b      	ldr	r3, [r3, #4]
 80020c0:	f003 031f 	and.w	r3, r3, #31
 80020c4:	2b00      	cmp	r3, #0
 80020c6:	d12a      	bne.n	800211e <HAL_ADC_Start_DMA+0x1ae>
    {
#if defined(ADC2) && defined(ADC3)
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 80020c8:	68fb      	ldr	r3, [r7, #12]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	4a2d      	ldr	r2, [pc, #180]	@ (8002184 <HAL_ADC_Start_DMA+0x214>)
 80020ce:	4293      	cmp	r3, r2
 80020d0:	d015      	beq.n	80020fe <HAL_ADC_Start_DMA+0x18e>
 80020d2:	68fb      	ldr	r3, [r7, #12]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	4a2c      	ldr	r2, [pc, #176]	@ (8002188 <HAL_ADC_Start_DMA+0x218>)
 80020d8:	4293      	cmp	r3, r2
 80020da:	d105      	bne.n	80020e8 <HAL_ADC_Start_DMA+0x178>
 80020dc:	4b25      	ldr	r3, [pc, #148]	@ (8002174 <HAL_ADC_Start_DMA+0x204>)
 80020de:	685b      	ldr	r3, [r3, #4]
 80020e0:	f003 031f 	and.w	r3, r3, #31
 80020e4:	2b00      	cmp	r3, #0
 80020e6:	d00a      	beq.n	80020fe <HAL_ADC_Start_DMA+0x18e>
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 80020e8:	68fb      	ldr	r3, [r7, #12]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	4a27      	ldr	r2, [pc, #156]	@ (800218c <HAL_ADC_Start_DMA+0x21c>)
 80020ee:	4293      	cmp	r3, r2
 80020f0:	d136      	bne.n	8002160 <HAL_ADC_Start_DMA+0x1f0>
 80020f2:	4b20      	ldr	r3, [pc, #128]	@ (8002174 <HAL_ADC_Start_DMA+0x204>)
 80020f4:	685b      	ldr	r3, [r3, #4]
 80020f6:	f003 0310 	and.w	r3, r3, #16
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	d130      	bne.n	8002160 <HAL_ADC_Start_DMA+0x1f0>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 80020fe:	68fb      	ldr	r3, [r7, #12]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	689b      	ldr	r3, [r3, #8]
 8002104:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8002108:	2b00      	cmp	r3, #0
 800210a:	d129      	bne.n	8002160 <HAL_ADC_Start_DMA+0x1f0>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800210c:	68fb      	ldr	r3, [r7, #12]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	689a      	ldr	r2, [r3, #8]
 8002112:	68fb      	ldr	r3, [r7, #12]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 800211a:	609a      	str	r2, [r3, #8]
 800211c:	e020      	b.n	8002160 <HAL_ADC_Start_DMA+0x1f0>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 800211e:	68fb      	ldr	r3, [r7, #12]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	4a18      	ldr	r2, [pc, #96]	@ (8002184 <HAL_ADC_Start_DMA+0x214>)
 8002124:	4293      	cmp	r3, r2
 8002126:	d11b      	bne.n	8002160 <HAL_ADC_Start_DMA+0x1f0>
 8002128:	68fb      	ldr	r3, [r7, #12]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	689b      	ldr	r3, [r3, #8]
 800212e:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8002132:	2b00      	cmp	r3, #0
 8002134:	d114      	bne.n	8002160 <HAL_ADC_Start_DMA+0x1f0>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002136:	68fb      	ldr	r3, [r7, #12]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	689a      	ldr	r2, [r3, #8]
 800213c:	68fb      	ldr	r3, [r7, #12]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8002144:	609a      	str	r2, [r3, #8]
 8002146:	e00b      	b.n	8002160 <HAL_ADC_Start_DMA+0x1f0>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002148:	68fb      	ldr	r3, [r7, #12]
 800214a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800214c:	f043 0210 	orr.w	r2, r3, #16
 8002150:	68fb      	ldr	r3, [r7, #12]
 8002152:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002154:	68fb      	ldr	r3, [r7, #12]
 8002156:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002158:	f043 0201 	orr.w	r2, r3, #1
 800215c:	68fb      	ldr	r3, [r7, #12]
 800215e:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 8002160:	2300      	movs	r3, #0
}
 8002162:	4618      	mov	r0, r3
 8002164:	3718      	adds	r7, #24
 8002166:	46bd      	mov	sp, r7
 8002168:	bd80      	pop	{r7, pc}
 800216a:	bf00      	nop
 800216c:	20000004 	.word	0x20000004
 8002170:	431bde83 	.word	0x431bde83
 8002174:	40012300 	.word	0x40012300
 8002178:	08002615 	.word	0x08002615
 800217c:	080026cf 	.word	0x080026cf
 8002180:	080026eb 	.word	0x080026eb
 8002184:	40012000 	.word	0x40012000
 8002188:	40012100 	.word	0x40012100
 800218c:	40012200 	.word	0x40012200

08002190 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8002190:	b480      	push	{r7}
 8002192:	b083      	sub	sp, #12
 8002194:	af00      	add	r7, sp, #0
 8002196:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8002198:	bf00      	nop
 800219a:	370c      	adds	r7, #12
 800219c:	46bd      	mov	sp, r7
 800219e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021a2:	4770      	bx	lr

080021a4 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80021a4:	b480      	push	{r7}
 80021a6:	b083      	sub	sp, #12
 80021a8:	af00      	add	r7, sp, #0
 80021aa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 80021ac:	bf00      	nop
 80021ae:	370c      	adds	r7, #12
 80021b0:	46bd      	mov	sp, r7
 80021b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021b6:	4770      	bx	lr

080021b8 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80021b8:	b480      	push	{r7}
 80021ba:	b085      	sub	sp, #20
 80021bc:	af00      	add	r7, sp, #0
 80021be:	6078      	str	r0, [r7, #4]
 80021c0:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80021c2:	2300      	movs	r3, #0
 80021c4:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80021cc:	2b01      	cmp	r3, #1
 80021ce:	d101      	bne.n	80021d4 <HAL_ADC_ConfigChannel+0x1c>
 80021d0:	2302      	movs	r3, #2
 80021d2:	e113      	b.n	80023fc <HAL_ADC_ConfigChannel+0x244>
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	2201      	movs	r2, #1
 80021d8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80021dc:	683b      	ldr	r3, [r7, #0]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	2b09      	cmp	r3, #9
 80021e2:	d925      	bls.n	8002230 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	68d9      	ldr	r1, [r3, #12]
 80021ea:	683b      	ldr	r3, [r7, #0]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	b29b      	uxth	r3, r3
 80021f0:	461a      	mov	r2, r3
 80021f2:	4613      	mov	r3, r2
 80021f4:	005b      	lsls	r3, r3, #1
 80021f6:	4413      	add	r3, r2
 80021f8:	3b1e      	subs	r3, #30
 80021fa:	2207      	movs	r2, #7
 80021fc:	fa02 f303 	lsl.w	r3, r2, r3
 8002200:	43da      	mvns	r2, r3
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	400a      	ands	r2, r1
 8002208:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	68d9      	ldr	r1, [r3, #12]
 8002210:	683b      	ldr	r3, [r7, #0]
 8002212:	689a      	ldr	r2, [r3, #8]
 8002214:	683b      	ldr	r3, [r7, #0]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	b29b      	uxth	r3, r3
 800221a:	4618      	mov	r0, r3
 800221c:	4603      	mov	r3, r0
 800221e:	005b      	lsls	r3, r3, #1
 8002220:	4403      	add	r3, r0
 8002222:	3b1e      	subs	r3, #30
 8002224:	409a      	lsls	r2, r3
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	430a      	orrs	r2, r1
 800222c:	60da      	str	r2, [r3, #12]
 800222e:	e022      	b.n	8002276 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	6919      	ldr	r1, [r3, #16]
 8002236:	683b      	ldr	r3, [r7, #0]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	b29b      	uxth	r3, r3
 800223c:	461a      	mov	r2, r3
 800223e:	4613      	mov	r3, r2
 8002240:	005b      	lsls	r3, r3, #1
 8002242:	4413      	add	r3, r2
 8002244:	2207      	movs	r2, #7
 8002246:	fa02 f303 	lsl.w	r3, r2, r3
 800224a:	43da      	mvns	r2, r3
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	400a      	ands	r2, r1
 8002252:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	6919      	ldr	r1, [r3, #16]
 800225a:	683b      	ldr	r3, [r7, #0]
 800225c:	689a      	ldr	r2, [r3, #8]
 800225e:	683b      	ldr	r3, [r7, #0]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	b29b      	uxth	r3, r3
 8002264:	4618      	mov	r0, r3
 8002266:	4603      	mov	r3, r0
 8002268:	005b      	lsls	r3, r3, #1
 800226a:	4403      	add	r3, r0
 800226c:	409a      	lsls	r2, r3
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	430a      	orrs	r2, r1
 8002274:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002276:	683b      	ldr	r3, [r7, #0]
 8002278:	685b      	ldr	r3, [r3, #4]
 800227a:	2b06      	cmp	r3, #6
 800227c:	d824      	bhi.n	80022c8 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8002284:	683b      	ldr	r3, [r7, #0]
 8002286:	685a      	ldr	r2, [r3, #4]
 8002288:	4613      	mov	r3, r2
 800228a:	009b      	lsls	r3, r3, #2
 800228c:	4413      	add	r3, r2
 800228e:	3b05      	subs	r3, #5
 8002290:	221f      	movs	r2, #31
 8002292:	fa02 f303 	lsl.w	r3, r2, r3
 8002296:	43da      	mvns	r2, r3
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	400a      	ands	r2, r1
 800229e:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80022a6:	683b      	ldr	r3, [r7, #0]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	b29b      	uxth	r3, r3
 80022ac:	4618      	mov	r0, r3
 80022ae:	683b      	ldr	r3, [r7, #0]
 80022b0:	685a      	ldr	r2, [r3, #4]
 80022b2:	4613      	mov	r3, r2
 80022b4:	009b      	lsls	r3, r3, #2
 80022b6:	4413      	add	r3, r2
 80022b8:	3b05      	subs	r3, #5
 80022ba:	fa00 f203 	lsl.w	r2, r0, r3
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	430a      	orrs	r2, r1
 80022c4:	635a      	str	r2, [r3, #52]	@ 0x34
 80022c6:	e04c      	b.n	8002362 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80022c8:	683b      	ldr	r3, [r7, #0]
 80022ca:	685b      	ldr	r3, [r3, #4]
 80022cc:	2b0c      	cmp	r3, #12
 80022ce:	d824      	bhi.n	800231a <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80022d6:	683b      	ldr	r3, [r7, #0]
 80022d8:	685a      	ldr	r2, [r3, #4]
 80022da:	4613      	mov	r3, r2
 80022dc:	009b      	lsls	r3, r3, #2
 80022de:	4413      	add	r3, r2
 80022e0:	3b23      	subs	r3, #35	@ 0x23
 80022e2:	221f      	movs	r2, #31
 80022e4:	fa02 f303 	lsl.w	r3, r2, r3
 80022e8:	43da      	mvns	r2, r3
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	400a      	ands	r2, r1
 80022f0:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80022f8:	683b      	ldr	r3, [r7, #0]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	b29b      	uxth	r3, r3
 80022fe:	4618      	mov	r0, r3
 8002300:	683b      	ldr	r3, [r7, #0]
 8002302:	685a      	ldr	r2, [r3, #4]
 8002304:	4613      	mov	r3, r2
 8002306:	009b      	lsls	r3, r3, #2
 8002308:	4413      	add	r3, r2
 800230a:	3b23      	subs	r3, #35	@ 0x23
 800230c:	fa00 f203 	lsl.w	r2, r0, r3
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	430a      	orrs	r2, r1
 8002316:	631a      	str	r2, [r3, #48]	@ 0x30
 8002318:	e023      	b.n	8002362 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002320:	683b      	ldr	r3, [r7, #0]
 8002322:	685a      	ldr	r2, [r3, #4]
 8002324:	4613      	mov	r3, r2
 8002326:	009b      	lsls	r3, r3, #2
 8002328:	4413      	add	r3, r2
 800232a:	3b41      	subs	r3, #65	@ 0x41
 800232c:	221f      	movs	r2, #31
 800232e:	fa02 f303 	lsl.w	r3, r2, r3
 8002332:	43da      	mvns	r2, r3
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	400a      	ands	r2, r1
 800233a:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002342:	683b      	ldr	r3, [r7, #0]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	b29b      	uxth	r3, r3
 8002348:	4618      	mov	r0, r3
 800234a:	683b      	ldr	r3, [r7, #0]
 800234c:	685a      	ldr	r2, [r3, #4]
 800234e:	4613      	mov	r3, r2
 8002350:	009b      	lsls	r3, r3, #2
 8002352:	4413      	add	r3, r2
 8002354:	3b41      	subs	r3, #65	@ 0x41
 8002356:	fa00 f203 	lsl.w	r2, r0, r3
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	430a      	orrs	r2, r1
 8002360:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002362:	4b29      	ldr	r3, [pc, #164]	@ (8002408 <HAL_ADC_ConfigChannel+0x250>)
 8002364:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	4a28      	ldr	r2, [pc, #160]	@ (800240c <HAL_ADC_ConfigChannel+0x254>)
 800236c:	4293      	cmp	r3, r2
 800236e:	d10f      	bne.n	8002390 <HAL_ADC_ConfigChannel+0x1d8>
 8002370:	683b      	ldr	r3, [r7, #0]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	2b12      	cmp	r3, #18
 8002376:	d10b      	bne.n	8002390 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8002378:	68fb      	ldr	r3, [r7, #12]
 800237a:	685b      	ldr	r3, [r3, #4]
 800237c:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 8002380:	68fb      	ldr	r3, [r7, #12]
 8002382:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8002384:	68fb      	ldr	r3, [r7, #12]
 8002386:	685b      	ldr	r3, [r3, #4]
 8002388:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 800238c:	68fb      	ldr	r3, [r7, #12]
 800238e:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	4a1d      	ldr	r2, [pc, #116]	@ (800240c <HAL_ADC_ConfigChannel+0x254>)
 8002396:	4293      	cmp	r3, r2
 8002398:	d12b      	bne.n	80023f2 <HAL_ADC_ConfigChannel+0x23a>
 800239a:	683b      	ldr	r3, [r7, #0]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	4a1c      	ldr	r2, [pc, #112]	@ (8002410 <HAL_ADC_ConfigChannel+0x258>)
 80023a0:	4293      	cmp	r3, r2
 80023a2:	d003      	beq.n	80023ac <HAL_ADC_ConfigChannel+0x1f4>
 80023a4:	683b      	ldr	r3, [r7, #0]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	2b11      	cmp	r3, #17
 80023aa:	d122      	bne.n	80023f2 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 80023ac:	68fb      	ldr	r3, [r7, #12]
 80023ae:	685b      	ldr	r3, [r3, #4]
 80023b0:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 80023b4:	68fb      	ldr	r3, [r7, #12]
 80023b6:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80023b8:	68fb      	ldr	r3, [r7, #12]
 80023ba:	685b      	ldr	r3, [r3, #4]
 80023bc:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 80023c0:	68fb      	ldr	r3, [r7, #12]
 80023c2:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80023c4:	683b      	ldr	r3, [r7, #0]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	4a11      	ldr	r2, [pc, #68]	@ (8002410 <HAL_ADC_ConfigChannel+0x258>)
 80023ca:	4293      	cmp	r3, r2
 80023cc:	d111      	bne.n	80023f2 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80023ce:	4b11      	ldr	r3, [pc, #68]	@ (8002414 <HAL_ADC_ConfigChannel+0x25c>)
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	4a11      	ldr	r2, [pc, #68]	@ (8002418 <HAL_ADC_ConfigChannel+0x260>)
 80023d4:	fba2 2303 	umull	r2, r3, r2, r3
 80023d8:	0c9a      	lsrs	r2, r3, #18
 80023da:	4613      	mov	r3, r2
 80023dc:	009b      	lsls	r3, r3, #2
 80023de:	4413      	add	r3, r2
 80023e0:	005b      	lsls	r3, r3, #1
 80023e2:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 80023e4:	e002      	b.n	80023ec <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 80023e6:	68bb      	ldr	r3, [r7, #8]
 80023e8:	3b01      	subs	r3, #1
 80023ea:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 80023ec:	68bb      	ldr	r3, [r7, #8]
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d1f9      	bne.n	80023e6 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	2200      	movs	r2, #0
 80023f6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 80023fa:	2300      	movs	r3, #0
}
 80023fc:	4618      	mov	r0, r3
 80023fe:	3714      	adds	r7, #20
 8002400:	46bd      	mov	sp, r7
 8002402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002406:	4770      	bx	lr
 8002408:	40012300 	.word	0x40012300
 800240c:	40012000 	.word	0x40012000
 8002410:	10000012 	.word	0x10000012
 8002414:	20000004 	.word	0x20000004
 8002418:	431bde83 	.word	0x431bde83

0800241c <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 800241c:	b480      	push	{r7}
 800241e:	b085      	sub	sp, #20
 8002420:	af00      	add	r7, sp, #0
 8002422:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002424:	4b79      	ldr	r3, [pc, #484]	@ (800260c <ADC_Init+0x1f0>)
 8002426:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8002428:	68fb      	ldr	r3, [r7, #12]
 800242a:	685b      	ldr	r3, [r3, #4]
 800242c:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8002430:	68fb      	ldr	r3, [r7, #12]
 8002432:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8002434:	68fb      	ldr	r3, [r7, #12]
 8002436:	685a      	ldr	r2, [r3, #4]
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	685b      	ldr	r3, [r3, #4]
 800243c:	431a      	orrs	r2, r3
 800243e:	68fb      	ldr	r3, [r7, #12]
 8002440:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	685a      	ldr	r2, [r3, #4]
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002450:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	6859      	ldr	r1, [r3, #4]
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	691b      	ldr	r3, [r3, #16]
 800245c:	021a      	lsls	r2, r3, #8
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	430a      	orrs	r2, r1
 8002464:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	685a      	ldr	r2, [r3, #4]
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8002474:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	6859      	ldr	r1, [r3, #4]
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	689a      	ldr	r2, [r3, #8]
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	430a      	orrs	r2, r1
 8002486:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	689a      	ldr	r2, [r3, #8]
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002496:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	6899      	ldr	r1, [r3, #8]
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	68da      	ldr	r2, [r3, #12]
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	430a      	orrs	r2, r1
 80024a8:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80024ae:	4a58      	ldr	r2, [pc, #352]	@ (8002610 <ADC_Init+0x1f4>)
 80024b0:	4293      	cmp	r3, r2
 80024b2:	d022      	beq.n	80024fa <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	689a      	ldr	r2, [r3, #8]
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80024c2:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	6899      	ldr	r1, [r3, #8]
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	430a      	orrs	r2, r1
 80024d4:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	689a      	ldr	r2, [r3, #8]
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 80024e4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	6899      	ldr	r1, [r3, #8]
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	430a      	orrs	r2, r1
 80024f6:	609a      	str	r2, [r3, #8]
 80024f8:	e00f      	b.n	800251a <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	689a      	ldr	r2, [r3, #8]
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8002508:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	689a      	ldr	r2, [r3, #8]
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8002518:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	689a      	ldr	r2, [r3, #8]
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	f022 0202 	bic.w	r2, r2, #2
 8002528:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	6899      	ldr	r1, [r3, #8]
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	7e1b      	ldrb	r3, [r3, #24]
 8002534:	005a      	lsls	r2, r3, #1
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	430a      	orrs	r2, r1
 800253c:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002544:	2b00      	cmp	r3, #0
 8002546:	d01b      	beq.n	8002580 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	685a      	ldr	r2, [r3, #4]
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002556:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	685a      	ldr	r2, [r3, #4]
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 8002566:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	6859      	ldr	r1, [r3, #4]
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002572:	3b01      	subs	r3, #1
 8002574:	035a      	lsls	r2, r3, #13
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	430a      	orrs	r2, r1
 800257c:	605a      	str	r2, [r3, #4]
 800257e:	e007      	b.n	8002590 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	685a      	ldr	r2, [r3, #4]
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800258e:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 800259e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	69db      	ldr	r3, [r3, #28]
 80025aa:	3b01      	subs	r3, #1
 80025ac:	051a      	lsls	r2, r3, #20
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	430a      	orrs	r2, r1
 80025b4:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	689a      	ldr	r2, [r3, #8]
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 80025c4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	6899      	ldr	r1, [r3, #8]
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80025d2:	025a      	lsls	r2, r3, #9
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	430a      	orrs	r2, r1
 80025da:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	689a      	ldr	r2, [r3, #8]
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80025ea:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	6899      	ldr	r1, [r3, #8]
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	695b      	ldr	r3, [r3, #20]
 80025f6:	029a      	lsls	r2, r3, #10
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	430a      	orrs	r2, r1
 80025fe:	609a      	str	r2, [r3, #8]
}
 8002600:	bf00      	nop
 8002602:	3714      	adds	r7, #20
 8002604:	46bd      	mov	sp, r7
 8002606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800260a:	4770      	bx	lr
 800260c:	40012300 	.word	0x40012300
 8002610:	0f000001 	.word	0x0f000001

08002614 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8002614:	b580      	push	{r7, lr}
 8002616:	b084      	sub	sp, #16
 8002618:	af00      	add	r7, sp, #0
 800261a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002620:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8002622:	68fb      	ldr	r3, [r7, #12]
 8002624:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002626:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800262a:	2b00      	cmp	r3, #0
 800262c:	d13c      	bne.n	80026a8 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800262e:	68fb      	ldr	r3, [r7, #12]
 8002630:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002632:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8002636:	68fb      	ldr	r3, [r7, #12]
 8002638:	641a      	str	r2, [r3, #64]	@ 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800263a:	68fb      	ldr	r3, [r7, #12]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	689b      	ldr	r3, [r3, #8]
 8002640:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8002644:	2b00      	cmp	r3, #0
 8002646:	d12b      	bne.n	80026a0 <ADC_DMAConvCplt+0x8c>
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002648:	68fb      	ldr	r3, [r7, #12]
 800264a:	7e1b      	ldrb	r3, [r3, #24]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800264c:	2b00      	cmp	r3, #0
 800264e:	d127      	bne.n	80026a0 <ADC_DMAConvCplt+0x8c>
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8002650:	68fb      	ldr	r3, [r7, #12]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002656:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800265a:	2b00      	cmp	r3, #0
 800265c:	d006      	beq.n	800266c <ADC_DMAConvCplt+0x58>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 800265e:	68fb      	ldr	r3, [r7, #12]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	689b      	ldr	r3, [r3, #8]
 8002664:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8002668:	2b00      	cmp	r3, #0
 800266a:	d119      	bne.n	80026a0 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 800266c:	68fb      	ldr	r3, [r7, #12]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	685a      	ldr	r2, [r3, #4]
 8002672:	68fb      	ldr	r3, [r7, #12]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	f022 0220 	bic.w	r2, r2, #32
 800267a:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800267c:	68fb      	ldr	r3, [r7, #12]
 800267e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002680:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002684:	68fb      	ldr	r3, [r7, #12]
 8002686:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002688:	68fb      	ldr	r3, [r7, #12]
 800268a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800268c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002690:	2b00      	cmp	r3, #0
 8002692:	d105      	bne.n	80026a0 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002694:	68fb      	ldr	r3, [r7, #12]
 8002696:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002698:	f043 0201 	orr.w	r2, r3, #1
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80026a0:	68f8      	ldr	r0, [r7, #12]
 80026a2:	f7fe fe71 	bl	8001388 <HAL_ADC_ConvCpltCallback>
    {
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 80026a6:	e00e      	b.n	80026c6 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 80026a8:	68fb      	ldr	r3, [r7, #12]
 80026aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026ac:	f003 0310 	and.w	r3, r3, #16
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	d003      	beq.n	80026bc <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 80026b4:	68f8      	ldr	r0, [r7, #12]
 80026b6:	f7ff fd75 	bl	80021a4 <HAL_ADC_ErrorCallback>
}
 80026ba:	e004      	b.n	80026c6 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80026c0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80026c2:	6878      	ldr	r0, [r7, #4]
 80026c4:	4798      	blx	r3
}
 80026c6:	bf00      	nop
 80026c8:	3710      	adds	r7, #16
 80026ca:	46bd      	mov	sp, r7
 80026cc:	bd80      	pop	{r7, pc}

080026ce <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 80026ce:	b580      	push	{r7, lr}
 80026d0:	b084      	sub	sp, #16
 80026d2:	af00      	add	r7, sp, #0
 80026d4:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80026da:	60fb      	str	r3, [r7, #12]
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80026dc:	68f8      	ldr	r0, [r7, #12]
 80026de:	f7ff fd57 	bl	8002190 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80026e2:	bf00      	nop
 80026e4:	3710      	adds	r7, #16
 80026e6:	46bd      	mov	sp, r7
 80026e8:	bd80      	pop	{r7, pc}

080026ea <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 80026ea:	b580      	push	{r7, lr}
 80026ec:	b084      	sub	sp, #16
 80026ee:	af00      	add	r7, sp, #0
 80026f0:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80026f6:	60fb      	str	r3, [r7, #12]
  hadc->State = HAL_ADC_STATE_ERROR_DMA;
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	2240      	movs	r2, #64	@ 0x40
 80026fc:	641a      	str	r2, [r3, #64]	@ 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 80026fe:	68fb      	ldr	r3, [r7, #12]
 8002700:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002702:	f043 0204 	orr.w	r2, r3, #4
 8002706:	68fb      	ldr	r3, [r7, #12]
 8002708:	645a      	str	r2, [r3, #68]	@ 0x44
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 800270a:	68f8      	ldr	r0, [r7, #12]
 800270c:	f7ff fd4a 	bl	80021a4 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002710:	bf00      	nop
 8002712:	3710      	adds	r7, #16
 8002714:	46bd      	mov	sp, r7
 8002716:	bd80      	pop	{r7, pc}

08002718 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002718:	b480      	push	{r7}
 800271a:	b085      	sub	sp, #20
 800271c:	af00      	add	r7, sp, #0
 800271e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	f003 0307 	and.w	r3, r3, #7
 8002726:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002728:	4b0c      	ldr	r3, [pc, #48]	@ (800275c <__NVIC_SetPriorityGrouping+0x44>)
 800272a:	68db      	ldr	r3, [r3, #12]
 800272c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800272e:	68ba      	ldr	r2, [r7, #8]
 8002730:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002734:	4013      	ands	r3, r2
 8002736:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800273c:	68bb      	ldr	r3, [r7, #8]
 800273e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002740:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002744:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002748:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800274a:	4a04      	ldr	r2, [pc, #16]	@ (800275c <__NVIC_SetPriorityGrouping+0x44>)
 800274c:	68bb      	ldr	r3, [r7, #8]
 800274e:	60d3      	str	r3, [r2, #12]
}
 8002750:	bf00      	nop
 8002752:	3714      	adds	r7, #20
 8002754:	46bd      	mov	sp, r7
 8002756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800275a:	4770      	bx	lr
 800275c:	e000ed00 	.word	0xe000ed00

08002760 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002760:	b480      	push	{r7}
 8002762:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002764:	4b04      	ldr	r3, [pc, #16]	@ (8002778 <__NVIC_GetPriorityGrouping+0x18>)
 8002766:	68db      	ldr	r3, [r3, #12]
 8002768:	0a1b      	lsrs	r3, r3, #8
 800276a:	f003 0307 	and.w	r3, r3, #7
}
 800276e:	4618      	mov	r0, r3
 8002770:	46bd      	mov	sp, r7
 8002772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002776:	4770      	bx	lr
 8002778:	e000ed00 	.word	0xe000ed00

0800277c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800277c:	b480      	push	{r7}
 800277e:	b083      	sub	sp, #12
 8002780:	af00      	add	r7, sp, #0
 8002782:	4603      	mov	r3, r0
 8002784:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002786:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800278a:	2b00      	cmp	r3, #0
 800278c:	db0b      	blt.n	80027a6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800278e:	79fb      	ldrb	r3, [r7, #7]
 8002790:	f003 021f 	and.w	r2, r3, #31
 8002794:	4907      	ldr	r1, [pc, #28]	@ (80027b4 <__NVIC_EnableIRQ+0x38>)
 8002796:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800279a:	095b      	lsrs	r3, r3, #5
 800279c:	2001      	movs	r0, #1
 800279e:	fa00 f202 	lsl.w	r2, r0, r2
 80027a2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80027a6:	bf00      	nop
 80027a8:	370c      	adds	r7, #12
 80027aa:	46bd      	mov	sp, r7
 80027ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027b0:	4770      	bx	lr
 80027b2:	bf00      	nop
 80027b4:	e000e100 	.word	0xe000e100

080027b8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80027b8:	b480      	push	{r7}
 80027ba:	b083      	sub	sp, #12
 80027bc:	af00      	add	r7, sp, #0
 80027be:	4603      	mov	r3, r0
 80027c0:	6039      	str	r1, [r7, #0]
 80027c2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80027c4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	db0a      	blt.n	80027e2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80027cc:	683b      	ldr	r3, [r7, #0]
 80027ce:	b2da      	uxtb	r2, r3
 80027d0:	490c      	ldr	r1, [pc, #48]	@ (8002804 <__NVIC_SetPriority+0x4c>)
 80027d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027d6:	0112      	lsls	r2, r2, #4
 80027d8:	b2d2      	uxtb	r2, r2
 80027da:	440b      	add	r3, r1
 80027dc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80027e0:	e00a      	b.n	80027f8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80027e2:	683b      	ldr	r3, [r7, #0]
 80027e4:	b2da      	uxtb	r2, r3
 80027e6:	4908      	ldr	r1, [pc, #32]	@ (8002808 <__NVIC_SetPriority+0x50>)
 80027e8:	79fb      	ldrb	r3, [r7, #7]
 80027ea:	f003 030f 	and.w	r3, r3, #15
 80027ee:	3b04      	subs	r3, #4
 80027f0:	0112      	lsls	r2, r2, #4
 80027f2:	b2d2      	uxtb	r2, r2
 80027f4:	440b      	add	r3, r1
 80027f6:	761a      	strb	r2, [r3, #24]
}
 80027f8:	bf00      	nop
 80027fa:	370c      	adds	r7, #12
 80027fc:	46bd      	mov	sp, r7
 80027fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002802:	4770      	bx	lr
 8002804:	e000e100 	.word	0xe000e100
 8002808:	e000ed00 	.word	0xe000ed00

0800280c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800280c:	b480      	push	{r7}
 800280e:	b089      	sub	sp, #36	@ 0x24
 8002810:	af00      	add	r7, sp, #0
 8002812:	60f8      	str	r0, [r7, #12]
 8002814:	60b9      	str	r1, [r7, #8]
 8002816:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002818:	68fb      	ldr	r3, [r7, #12]
 800281a:	f003 0307 	and.w	r3, r3, #7
 800281e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002820:	69fb      	ldr	r3, [r7, #28]
 8002822:	f1c3 0307 	rsb	r3, r3, #7
 8002826:	2b04      	cmp	r3, #4
 8002828:	bf28      	it	cs
 800282a:	2304      	movcs	r3, #4
 800282c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800282e:	69fb      	ldr	r3, [r7, #28]
 8002830:	3304      	adds	r3, #4
 8002832:	2b06      	cmp	r3, #6
 8002834:	d902      	bls.n	800283c <NVIC_EncodePriority+0x30>
 8002836:	69fb      	ldr	r3, [r7, #28]
 8002838:	3b03      	subs	r3, #3
 800283a:	e000      	b.n	800283e <NVIC_EncodePriority+0x32>
 800283c:	2300      	movs	r3, #0
 800283e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002840:	f04f 32ff 	mov.w	r2, #4294967295
 8002844:	69bb      	ldr	r3, [r7, #24]
 8002846:	fa02 f303 	lsl.w	r3, r2, r3
 800284a:	43da      	mvns	r2, r3
 800284c:	68bb      	ldr	r3, [r7, #8]
 800284e:	401a      	ands	r2, r3
 8002850:	697b      	ldr	r3, [r7, #20]
 8002852:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002854:	f04f 31ff 	mov.w	r1, #4294967295
 8002858:	697b      	ldr	r3, [r7, #20]
 800285a:	fa01 f303 	lsl.w	r3, r1, r3
 800285e:	43d9      	mvns	r1, r3
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002864:	4313      	orrs	r3, r2
         );
}
 8002866:	4618      	mov	r0, r3
 8002868:	3724      	adds	r7, #36	@ 0x24
 800286a:	46bd      	mov	sp, r7
 800286c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002870:	4770      	bx	lr
	...

08002874 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002874:	b580      	push	{r7, lr}
 8002876:	b082      	sub	sp, #8
 8002878:	af00      	add	r7, sp, #0
 800287a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	3b01      	subs	r3, #1
 8002880:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002884:	d301      	bcc.n	800288a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002886:	2301      	movs	r3, #1
 8002888:	e00f      	b.n	80028aa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800288a:	4a0a      	ldr	r2, [pc, #40]	@ (80028b4 <SysTick_Config+0x40>)
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	3b01      	subs	r3, #1
 8002890:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002892:	210f      	movs	r1, #15
 8002894:	f04f 30ff 	mov.w	r0, #4294967295
 8002898:	f7ff ff8e 	bl	80027b8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800289c:	4b05      	ldr	r3, [pc, #20]	@ (80028b4 <SysTick_Config+0x40>)
 800289e:	2200      	movs	r2, #0
 80028a0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80028a2:	4b04      	ldr	r3, [pc, #16]	@ (80028b4 <SysTick_Config+0x40>)
 80028a4:	2207      	movs	r2, #7
 80028a6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80028a8:	2300      	movs	r3, #0
}
 80028aa:	4618      	mov	r0, r3
 80028ac:	3708      	adds	r7, #8
 80028ae:	46bd      	mov	sp, r7
 80028b0:	bd80      	pop	{r7, pc}
 80028b2:	bf00      	nop
 80028b4:	e000e010 	.word	0xe000e010

080028b8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80028b8:	b580      	push	{r7, lr}
 80028ba:	b082      	sub	sp, #8
 80028bc:	af00      	add	r7, sp, #0
 80028be:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80028c0:	6878      	ldr	r0, [r7, #4]
 80028c2:	f7ff ff29 	bl	8002718 <__NVIC_SetPriorityGrouping>
}
 80028c6:	bf00      	nop
 80028c8:	3708      	adds	r7, #8
 80028ca:	46bd      	mov	sp, r7
 80028cc:	bd80      	pop	{r7, pc}

080028ce <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80028ce:	b580      	push	{r7, lr}
 80028d0:	b086      	sub	sp, #24
 80028d2:	af00      	add	r7, sp, #0
 80028d4:	4603      	mov	r3, r0
 80028d6:	60b9      	str	r1, [r7, #8]
 80028d8:	607a      	str	r2, [r7, #4]
 80028da:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80028dc:	2300      	movs	r3, #0
 80028de:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80028e0:	f7ff ff3e 	bl	8002760 <__NVIC_GetPriorityGrouping>
 80028e4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80028e6:	687a      	ldr	r2, [r7, #4]
 80028e8:	68b9      	ldr	r1, [r7, #8]
 80028ea:	6978      	ldr	r0, [r7, #20]
 80028ec:	f7ff ff8e 	bl	800280c <NVIC_EncodePriority>
 80028f0:	4602      	mov	r2, r0
 80028f2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80028f6:	4611      	mov	r1, r2
 80028f8:	4618      	mov	r0, r3
 80028fa:	f7ff ff5d 	bl	80027b8 <__NVIC_SetPriority>
}
 80028fe:	bf00      	nop
 8002900:	3718      	adds	r7, #24
 8002902:	46bd      	mov	sp, r7
 8002904:	bd80      	pop	{r7, pc}

08002906 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002906:	b580      	push	{r7, lr}
 8002908:	b082      	sub	sp, #8
 800290a:	af00      	add	r7, sp, #0
 800290c:	4603      	mov	r3, r0
 800290e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002910:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002914:	4618      	mov	r0, r3
 8002916:	f7ff ff31 	bl	800277c <__NVIC_EnableIRQ>
}
 800291a:	bf00      	nop
 800291c:	3708      	adds	r7, #8
 800291e:	46bd      	mov	sp, r7
 8002920:	bd80      	pop	{r7, pc}

08002922 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002922:	b580      	push	{r7, lr}
 8002924:	b082      	sub	sp, #8
 8002926:	af00      	add	r7, sp, #0
 8002928:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800292a:	6878      	ldr	r0, [r7, #4]
 800292c:	f7ff ffa2 	bl	8002874 <SysTick_Config>
 8002930:	4603      	mov	r3, r0
}
 8002932:	4618      	mov	r0, r3
 8002934:	3708      	adds	r7, #8
 8002936:	46bd      	mov	sp, r7
 8002938:	bd80      	pop	{r7, pc}
	...

0800293c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800293c:	b580      	push	{r7, lr}
 800293e:	b086      	sub	sp, #24
 8002940:	af00      	add	r7, sp, #0
 8002942:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002944:	2300      	movs	r3, #0
 8002946:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002948:	f7ff fac2 	bl	8001ed0 <HAL_GetTick>
 800294c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	2b00      	cmp	r3, #0
 8002952:	d101      	bne.n	8002958 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002954:	2301      	movs	r3, #1
 8002956:	e099      	b.n	8002a8c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	2202      	movs	r2, #2
 800295c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	2200      	movs	r2, #0
 8002964:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	681a      	ldr	r2, [r3, #0]
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	f022 0201 	bic.w	r2, r2, #1
 8002976:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002978:	e00f      	b.n	800299a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800297a:	f7ff faa9 	bl	8001ed0 <HAL_GetTick>
 800297e:	4602      	mov	r2, r0
 8002980:	693b      	ldr	r3, [r7, #16]
 8002982:	1ad3      	subs	r3, r2, r3
 8002984:	2b05      	cmp	r3, #5
 8002986:	d908      	bls.n	800299a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	2220      	movs	r2, #32
 800298c:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	2203      	movs	r2, #3
 8002992:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8002996:	2303      	movs	r3, #3
 8002998:	e078      	b.n	8002a8c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	f003 0301 	and.w	r3, r3, #1
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	d1e8      	bne.n	800297a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80029b0:	697a      	ldr	r2, [r7, #20]
 80029b2:	4b38      	ldr	r3, [pc, #224]	@ (8002a94 <HAL_DMA_Init+0x158>)
 80029b4:	4013      	ands	r3, r2
 80029b6:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	685a      	ldr	r2, [r3, #4]
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	689b      	ldr	r3, [r3, #8]
 80029c0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80029c6:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	691b      	ldr	r3, [r3, #16]
 80029cc:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80029d2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	699b      	ldr	r3, [r3, #24]
 80029d8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80029de:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	6a1b      	ldr	r3, [r3, #32]
 80029e4:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80029e6:	697a      	ldr	r2, [r7, #20]
 80029e8:	4313      	orrs	r3, r2
 80029ea:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80029f0:	2b04      	cmp	r3, #4
 80029f2:	d107      	bne.n	8002a04 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80029fc:	4313      	orrs	r3, r2
 80029fe:	697a      	ldr	r2, [r7, #20]
 8002a00:	4313      	orrs	r3, r2
 8002a02:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	697a      	ldr	r2, [r7, #20]
 8002a0a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	695b      	ldr	r3, [r3, #20]
 8002a12:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002a14:	697b      	ldr	r3, [r7, #20]
 8002a16:	f023 0307 	bic.w	r3, r3, #7
 8002a1a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a20:	697a      	ldr	r2, [r7, #20]
 8002a22:	4313      	orrs	r3, r2
 8002a24:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a2a:	2b04      	cmp	r3, #4
 8002a2c:	d117      	bne.n	8002a5e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002a32:	697a      	ldr	r2, [r7, #20]
 8002a34:	4313      	orrs	r3, r2
 8002a36:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	d00e      	beq.n	8002a5e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002a40:	6878      	ldr	r0, [r7, #4]
 8002a42:	f000 fa6f 	bl	8002f24 <DMA_CheckFifoParam>
 8002a46:	4603      	mov	r3, r0
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	d008      	beq.n	8002a5e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	2240      	movs	r2, #64	@ 0x40
 8002a50:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	2201      	movs	r2, #1
 8002a56:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8002a5a:	2301      	movs	r3, #1
 8002a5c:	e016      	b.n	8002a8c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	697a      	ldr	r2, [r7, #20]
 8002a64:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002a66:	6878      	ldr	r0, [r7, #4]
 8002a68:	f000 fa26 	bl	8002eb8 <DMA_CalcBaseAndBitshift>
 8002a6c:	4603      	mov	r3, r0
 8002a6e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002a74:	223f      	movs	r2, #63	@ 0x3f
 8002a76:	409a      	lsls	r2, r3
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	2200      	movs	r2, #0
 8002a80:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	2201      	movs	r2, #1
 8002a86:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8002a8a:	2300      	movs	r3, #0
}
 8002a8c:	4618      	mov	r0, r3
 8002a8e:	3718      	adds	r7, #24
 8002a90:	46bd      	mov	sp, r7
 8002a92:	bd80      	pop	{r7, pc}
 8002a94:	f010803f 	.word	0xf010803f

08002a98 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002a98:	b580      	push	{r7, lr}
 8002a9a:	b086      	sub	sp, #24
 8002a9c:	af00      	add	r7, sp, #0
 8002a9e:	60f8      	str	r0, [r7, #12]
 8002aa0:	60b9      	str	r1, [r7, #8]
 8002aa2:	607a      	str	r2, [r7, #4]
 8002aa4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002aa6:	2300      	movs	r3, #0
 8002aa8:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002aaa:	68fb      	ldr	r3, [r7, #12]
 8002aac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002aae:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8002ab6:	2b01      	cmp	r3, #1
 8002ab8:	d101      	bne.n	8002abe <HAL_DMA_Start_IT+0x26>
 8002aba:	2302      	movs	r3, #2
 8002abc:	e040      	b.n	8002b40 <HAL_DMA_Start_IT+0xa8>
 8002abe:	68fb      	ldr	r3, [r7, #12]
 8002ac0:	2201      	movs	r2, #1
 8002ac2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002acc:	b2db      	uxtb	r3, r3
 8002ace:	2b01      	cmp	r3, #1
 8002ad0:	d12f      	bne.n	8002b32 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002ad2:	68fb      	ldr	r3, [r7, #12]
 8002ad4:	2202      	movs	r2, #2
 8002ad6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002ada:	68fb      	ldr	r3, [r7, #12]
 8002adc:	2200      	movs	r2, #0
 8002ade:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002ae0:	683b      	ldr	r3, [r7, #0]
 8002ae2:	687a      	ldr	r2, [r7, #4]
 8002ae4:	68b9      	ldr	r1, [r7, #8]
 8002ae6:	68f8      	ldr	r0, [r7, #12]
 8002ae8:	f000 f9b8 	bl	8002e5c <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002af0:	223f      	movs	r2, #63	@ 0x3f
 8002af2:	409a      	lsls	r2, r3
 8002af4:	693b      	ldr	r3, [r7, #16]
 8002af6:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	681a      	ldr	r2, [r3, #0]
 8002afe:	68fb      	ldr	r3, [r7, #12]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	f042 0216 	orr.w	r2, r2, #22
 8002b06:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b0c:	2b00      	cmp	r3, #0
 8002b0e:	d007      	beq.n	8002b20 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	681a      	ldr	r2, [r3, #0]
 8002b16:	68fb      	ldr	r3, [r7, #12]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	f042 0208 	orr.w	r2, r2, #8
 8002b1e:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	681a      	ldr	r2, [r3, #0]
 8002b26:	68fb      	ldr	r3, [r7, #12]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	f042 0201 	orr.w	r2, r2, #1
 8002b2e:	601a      	str	r2, [r3, #0]
 8002b30:	e005      	b.n	8002b3e <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8002b32:	68fb      	ldr	r3, [r7, #12]
 8002b34:	2200      	movs	r2, #0
 8002b36:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8002b3a:	2302      	movs	r3, #2
 8002b3c:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8002b3e:	7dfb      	ldrb	r3, [r7, #23]
}
 8002b40:	4618      	mov	r0, r3
 8002b42:	3718      	adds	r7, #24
 8002b44:	46bd      	mov	sp, r7
 8002b46:	bd80      	pop	{r7, pc}

08002b48 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002b48:	b580      	push	{r7, lr}
 8002b4a:	b086      	sub	sp, #24
 8002b4c:	af00      	add	r7, sp, #0
 8002b4e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002b50:	2300      	movs	r3, #0
 8002b52:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002b54:	4b8e      	ldr	r3, [pc, #568]	@ (8002d90 <HAL_DMA_IRQHandler+0x248>)
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	4a8e      	ldr	r2, [pc, #568]	@ (8002d94 <HAL_DMA_IRQHandler+0x24c>)
 8002b5a:	fba2 2303 	umull	r2, r3, r2, r3
 8002b5e:	0a9b      	lsrs	r3, r3, #10
 8002b60:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002b66:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002b68:	693b      	ldr	r3, [r7, #16]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002b72:	2208      	movs	r2, #8
 8002b74:	409a      	lsls	r2, r3
 8002b76:	68fb      	ldr	r3, [r7, #12]
 8002b78:	4013      	ands	r3, r2
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d01a      	beq.n	8002bb4 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	f003 0304 	and.w	r3, r3, #4
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	d013      	beq.n	8002bb4 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	681a      	ldr	r2, [r3, #0]
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	f022 0204 	bic.w	r2, r2, #4
 8002b9a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002ba0:	2208      	movs	r2, #8
 8002ba2:	409a      	lsls	r2, r3
 8002ba4:	693b      	ldr	r3, [r7, #16]
 8002ba6:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002bac:	f043 0201 	orr.w	r2, r3, #1
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002bb8:	2201      	movs	r2, #1
 8002bba:	409a      	lsls	r2, r3
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	4013      	ands	r3, r2
 8002bc0:	2b00      	cmp	r3, #0
 8002bc2:	d012      	beq.n	8002bea <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	695b      	ldr	r3, [r3, #20]
 8002bca:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d00b      	beq.n	8002bea <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002bd6:	2201      	movs	r2, #1
 8002bd8:	409a      	lsls	r2, r3
 8002bda:	693b      	ldr	r3, [r7, #16]
 8002bdc:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002be2:	f043 0202 	orr.w	r2, r3, #2
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002bee:	2204      	movs	r2, #4
 8002bf0:	409a      	lsls	r2, r3
 8002bf2:	68fb      	ldr	r3, [r7, #12]
 8002bf4:	4013      	ands	r3, r2
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d012      	beq.n	8002c20 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	f003 0302 	and.w	r3, r3, #2
 8002c04:	2b00      	cmp	r3, #0
 8002c06:	d00b      	beq.n	8002c20 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002c0c:	2204      	movs	r2, #4
 8002c0e:	409a      	lsls	r2, r3
 8002c10:	693b      	ldr	r3, [r7, #16]
 8002c12:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002c18:	f043 0204 	orr.w	r2, r3, #4
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002c24:	2210      	movs	r2, #16
 8002c26:	409a      	lsls	r2, r3
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	4013      	ands	r3, r2
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	d043      	beq.n	8002cb8 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	f003 0308 	and.w	r3, r3, #8
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	d03c      	beq.n	8002cb8 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002c42:	2210      	movs	r2, #16
 8002c44:	409a      	lsls	r2, r3
 8002c46:	693b      	ldr	r3, [r7, #16]
 8002c48:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002c54:	2b00      	cmp	r3, #0
 8002c56:	d018      	beq.n	8002c8a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d108      	bne.n	8002c78 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	d024      	beq.n	8002cb8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c72:	6878      	ldr	r0, [r7, #4]
 8002c74:	4798      	blx	r3
 8002c76:	e01f      	b.n	8002cb8 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	d01b      	beq.n	8002cb8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002c84:	6878      	ldr	r0, [r7, #4]
 8002c86:	4798      	blx	r3
 8002c88:	e016      	b.n	8002cb8 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	d107      	bne.n	8002ca8 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	681a      	ldr	r2, [r3, #0]
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	f022 0208 	bic.w	r2, r2, #8
 8002ca6:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002cac:	2b00      	cmp	r3, #0
 8002cae:	d003      	beq.n	8002cb8 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002cb4:	6878      	ldr	r0, [r7, #4]
 8002cb6:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002cbc:	2220      	movs	r2, #32
 8002cbe:	409a      	lsls	r2, r3
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	4013      	ands	r3, r2
 8002cc4:	2b00      	cmp	r3, #0
 8002cc6:	f000 808f 	beq.w	8002de8 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	f003 0310 	and.w	r3, r3, #16
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	f000 8087 	beq.w	8002de8 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002cde:	2220      	movs	r2, #32
 8002ce0:	409a      	lsls	r2, r3
 8002ce2:	693b      	ldr	r3, [r7, #16]
 8002ce4:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002cec:	b2db      	uxtb	r3, r3
 8002cee:	2b05      	cmp	r3, #5
 8002cf0:	d136      	bne.n	8002d60 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	681a      	ldr	r2, [r3, #0]
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	f022 0216 	bic.w	r2, r2, #22
 8002d00:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	695a      	ldr	r2, [r3, #20]
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002d10:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d103      	bne.n	8002d22 <HAL_DMA_IRQHandler+0x1da>
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	d007      	beq.n	8002d32 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	681a      	ldr	r2, [r3, #0]
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	f022 0208 	bic.w	r2, r2, #8
 8002d30:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002d36:	223f      	movs	r2, #63	@ 0x3f
 8002d38:	409a      	lsls	r2, r3
 8002d3a:	693b      	ldr	r3, [r7, #16]
 8002d3c:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	2201      	movs	r2, #1
 8002d42:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	2200      	movs	r2, #0
 8002d4a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d07e      	beq.n	8002e54 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002d5a:	6878      	ldr	r0, [r7, #4]
 8002d5c:	4798      	blx	r3
        }
        return;
 8002d5e:	e079      	b.n	8002e54 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	d01d      	beq.n	8002daa <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	d10d      	bne.n	8002d98 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002d80:	2b00      	cmp	r3, #0
 8002d82:	d031      	beq.n	8002de8 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002d88:	6878      	ldr	r0, [r7, #4]
 8002d8a:	4798      	blx	r3
 8002d8c:	e02c      	b.n	8002de8 <HAL_DMA_IRQHandler+0x2a0>
 8002d8e:	bf00      	nop
 8002d90:	20000004 	.word	0x20000004
 8002d94:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	d023      	beq.n	8002de8 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002da4:	6878      	ldr	r0, [r7, #4]
 8002da6:	4798      	blx	r3
 8002da8:	e01e      	b.n	8002de8 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	d10f      	bne.n	8002dd8 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	681a      	ldr	r2, [r3, #0]
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	f022 0210 	bic.w	r2, r2, #16
 8002dc6:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	2201      	movs	r2, #1
 8002dcc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	2200      	movs	r2, #0
 8002dd4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	d003      	beq.n	8002de8 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002de4:	6878      	ldr	r0, [r7, #4]
 8002de6:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	d032      	beq.n	8002e56 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002df4:	f003 0301 	and.w	r3, r3, #1
 8002df8:	2b00      	cmp	r3, #0
 8002dfa:	d022      	beq.n	8002e42 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	2205      	movs	r2, #5
 8002e00:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	681a      	ldr	r2, [r3, #0]
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	f022 0201 	bic.w	r2, r2, #1
 8002e12:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002e14:	68bb      	ldr	r3, [r7, #8]
 8002e16:	3301      	adds	r3, #1
 8002e18:	60bb      	str	r3, [r7, #8]
 8002e1a:	697a      	ldr	r2, [r7, #20]
 8002e1c:	429a      	cmp	r2, r3
 8002e1e:	d307      	bcc.n	8002e30 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	f003 0301 	and.w	r3, r3, #1
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	d1f2      	bne.n	8002e14 <HAL_DMA_IRQHandler+0x2cc>
 8002e2e:	e000      	b.n	8002e32 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8002e30:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	2201      	movs	r2, #1
 8002e36:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	2200      	movs	r2, #0
 8002e3e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	d005      	beq.n	8002e56 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002e4e:	6878      	ldr	r0, [r7, #4]
 8002e50:	4798      	blx	r3
 8002e52:	e000      	b.n	8002e56 <HAL_DMA_IRQHandler+0x30e>
        return;
 8002e54:	bf00      	nop
    }
  }
}
 8002e56:	3718      	adds	r7, #24
 8002e58:	46bd      	mov	sp, r7
 8002e5a:	bd80      	pop	{r7, pc}

08002e5c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002e5c:	b480      	push	{r7}
 8002e5e:	b085      	sub	sp, #20
 8002e60:	af00      	add	r7, sp, #0
 8002e62:	60f8      	str	r0, [r7, #12]
 8002e64:	60b9      	str	r1, [r7, #8]
 8002e66:	607a      	str	r2, [r7, #4]
 8002e68:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8002e6a:	68fb      	ldr	r3, [r7, #12]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	681a      	ldr	r2, [r3, #0]
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8002e78:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	683a      	ldr	r2, [r7, #0]
 8002e80:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002e82:	68fb      	ldr	r3, [r7, #12]
 8002e84:	689b      	ldr	r3, [r3, #8]
 8002e86:	2b40      	cmp	r3, #64	@ 0x40
 8002e88:	d108      	bne.n	8002e9c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	687a      	ldr	r2, [r7, #4]
 8002e90:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8002e92:	68fb      	ldr	r3, [r7, #12]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	68ba      	ldr	r2, [r7, #8]
 8002e98:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8002e9a:	e007      	b.n	8002eac <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	68ba      	ldr	r2, [r7, #8]
 8002ea2:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	687a      	ldr	r2, [r7, #4]
 8002eaa:	60da      	str	r2, [r3, #12]
}
 8002eac:	bf00      	nop
 8002eae:	3714      	adds	r7, #20
 8002eb0:	46bd      	mov	sp, r7
 8002eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eb6:	4770      	bx	lr

08002eb8 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002eb8:	b480      	push	{r7}
 8002eba:	b085      	sub	sp, #20
 8002ebc:	af00      	add	r7, sp, #0
 8002ebe:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	b2db      	uxtb	r3, r3
 8002ec6:	3b10      	subs	r3, #16
 8002ec8:	4a14      	ldr	r2, [pc, #80]	@ (8002f1c <DMA_CalcBaseAndBitshift+0x64>)
 8002eca:	fba2 2303 	umull	r2, r3, r2, r3
 8002ece:	091b      	lsrs	r3, r3, #4
 8002ed0:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002ed2:	4a13      	ldr	r2, [pc, #76]	@ (8002f20 <DMA_CalcBaseAndBitshift+0x68>)
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	4413      	add	r3, r2
 8002ed8:	781b      	ldrb	r3, [r3, #0]
 8002eda:	461a      	mov	r2, r3
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	2b03      	cmp	r3, #3
 8002ee4:	d909      	bls.n	8002efa <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8002eee:	f023 0303 	bic.w	r3, r3, #3
 8002ef2:	1d1a      	adds	r2, r3, #4
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	659a      	str	r2, [r3, #88]	@ 0x58
 8002ef8:	e007      	b.n	8002f0a <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8002f02:	f023 0303 	bic.w	r3, r3, #3
 8002f06:	687a      	ldr	r2, [r7, #4]
 8002f08:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8002f0e:	4618      	mov	r0, r3
 8002f10:	3714      	adds	r7, #20
 8002f12:	46bd      	mov	sp, r7
 8002f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f18:	4770      	bx	lr
 8002f1a:	bf00      	nop
 8002f1c:	aaaaaaab 	.word	0xaaaaaaab
 8002f20:	08005294 	.word	0x08005294

08002f24 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002f24:	b480      	push	{r7}
 8002f26:	b085      	sub	sp, #20
 8002f28:	af00      	add	r7, sp, #0
 8002f2a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002f2c:	2300      	movs	r3, #0
 8002f2e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002f34:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	699b      	ldr	r3, [r3, #24]
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d11f      	bne.n	8002f7e <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8002f3e:	68bb      	ldr	r3, [r7, #8]
 8002f40:	2b03      	cmp	r3, #3
 8002f42:	d856      	bhi.n	8002ff2 <DMA_CheckFifoParam+0xce>
 8002f44:	a201      	add	r2, pc, #4	@ (adr r2, 8002f4c <DMA_CheckFifoParam+0x28>)
 8002f46:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f4a:	bf00      	nop
 8002f4c:	08002f5d 	.word	0x08002f5d
 8002f50:	08002f6f 	.word	0x08002f6f
 8002f54:	08002f5d 	.word	0x08002f5d
 8002f58:	08002ff3 	.word	0x08002ff3
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002f60:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	d046      	beq.n	8002ff6 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002f68:	2301      	movs	r3, #1
 8002f6a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002f6c:	e043      	b.n	8002ff6 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002f72:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8002f76:	d140      	bne.n	8002ffa <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002f78:	2301      	movs	r3, #1
 8002f7a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002f7c:	e03d      	b.n	8002ffa <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	699b      	ldr	r3, [r3, #24]
 8002f82:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002f86:	d121      	bne.n	8002fcc <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002f88:	68bb      	ldr	r3, [r7, #8]
 8002f8a:	2b03      	cmp	r3, #3
 8002f8c:	d837      	bhi.n	8002ffe <DMA_CheckFifoParam+0xda>
 8002f8e:	a201      	add	r2, pc, #4	@ (adr r2, 8002f94 <DMA_CheckFifoParam+0x70>)
 8002f90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f94:	08002fa5 	.word	0x08002fa5
 8002f98:	08002fab 	.word	0x08002fab
 8002f9c:	08002fa5 	.word	0x08002fa5
 8002fa0:	08002fbd 	.word	0x08002fbd
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002fa4:	2301      	movs	r3, #1
 8002fa6:	73fb      	strb	r3, [r7, #15]
      break;
 8002fa8:	e030      	b.n	800300c <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002fae:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	d025      	beq.n	8003002 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8002fb6:	2301      	movs	r3, #1
 8002fb8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002fba:	e022      	b.n	8003002 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002fc0:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8002fc4:	d11f      	bne.n	8003006 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8002fc6:	2301      	movs	r3, #1
 8002fc8:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002fca:	e01c      	b.n	8003006 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002fcc:	68bb      	ldr	r3, [r7, #8]
 8002fce:	2b02      	cmp	r3, #2
 8002fd0:	d903      	bls.n	8002fda <DMA_CheckFifoParam+0xb6>
 8002fd2:	68bb      	ldr	r3, [r7, #8]
 8002fd4:	2b03      	cmp	r3, #3
 8002fd6:	d003      	beq.n	8002fe0 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002fd8:	e018      	b.n	800300c <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8002fda:	2301      	movs	r3, #1
 8002fdc:	73fb      	strb	r3, [r7, #15]
      break;
 8002fde:	e015      	b.n	800300c <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002fe4:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	d00e      	beq.n	800300a <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002fec:	2301      	movs	r3, #1
 8002fee:	73fb      	strb	r3, [r7, #15]
      break;
 8002ff0:	e00b      	b.n	800300a <DMA_CheckFifoParam+0xe6>
      break;
 8002ff2:	bf00      	nop
 8002ff4:	e00a      	b.n	800300c <DMA_CheckFifoParam+0xe8>
      break;
 8002ff6:	bf00      	nop
 8002ff8:	e008      	b.n	800300c <DMA_CheckFifoParam+0xe8>
      break;
 8002ffa:	bf00      	nop
 8002ffc:	e006      	b.n	800300c <DMA_CheckFifoParam+0xe8>
      break;
 8002ffe:	bf00      	nop
 8003000:	e004      	b.n	800300c <DMA_CheckFifoParam+0xe8>
      break;
 8003002:	bf00      	nop
 8003004:	e002      	b.n	800300c <DMA_CheckFifoParam+0xe8>
      break;   
 8003006:	bf00      	nop
 8003008:	e000      	b.n	800300c <DMA_CheckFifoParam+0xe8>
      break;
 800300a:	bf00      	nop
    }
  } 
  
  return status; 
 800300c:	7bfb      	ldrb	r3, [r7, #15]
}
 800300e:	4618      	mov	r0, r3
 8003010:	3714      	adds	r7, #20
 8003012:	46bd      	mov	sp, r7
 8003014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003018:	4770      	bx	lr
 800301a:	bf00      	nop

0800301c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800301c:	b480      	push	{r7}
 800301e:	b089      	sub	sp, #36	@ 0x24
 8003020:	af00      	add	r7, sp, #0
 8003022:	6078      	str	r0, [r7, #4]
 8003024:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003026:	2300      	movs	r3, #0
 8003028:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800302a:	2300      	movs	r3, #0
 800302c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800302e:	2300      	movs	r3, #0
 8003030:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003032:	2300      	movs	r3, #0
 8003034:	61fb      	str	r3, [r7, #28]
 8003036:	e165      	b.n	8003304 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003038:	2201      	movs	r2, #1
 800303a:	69fb      	ldr	r3, [r7, #28]
 800303c:	fa02 f303 	lsl.w	r3, r2, r3
 8003040:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003042:	683b      	ldr	r3, [r7, #0]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	697a      	ldr	r2, [r7, #20]
 8003048:	4013      	ands	r3, r2
 800304a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800304c:	693a      	ldr	r2, [r7, #16]
 800304e:	697b      	ldr	r3, [r7, #20]
 8003050:	429a      	cmp	r2, r3
 8003052:	f040 8154 	bne.w	80032fe <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003056:	683b      	ldr	r3, [r7, #0]
 8003058:	685b      	ldr	r3, [r3, #4]
 800305a:	f003 0303 	and.w	r3, r3, #3
 800305e:	2b01      	cmp	r3, #1
 8003060:	d005      	beq.n	800306e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003062:	683b      	ldr	r3, [r7, #0]
 8003064:	685b      	ldr	r3, [r3, #4]
 8003066:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800306a:	2b02      	cmp	r3, #2
 800306c:	d130      	bne.n	80030d0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	689b      	ldr	r3, [r3, #8]
 8003072:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003074:	69fb      	ldr	r3, [r7, #28]
 8003076:	005b      	lsls	r3, r3, #1
 8003078:	2203      	movs	r2, #3
 800307a:	fa02 f303 	lsl.w	r3, r2, r3
 800307e:	43db      	mvns	r3, r3
 8003080:	69ba      	ldr	r2, [r7, #24]
 8003082:	4013      	ands	r3, r2
 8003084:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003086:	683b      	ldr	r3, [r7, #0]
 8003088:	68da      	ldr	r2, [r3, #12]
 800308a:	69fb      	ldr	r3, [r7, #28]
 800308c:	005b      	lsls	r3, r3, #1
 800308e:	fa02 f303 	lsl.w	r3, r2, r3
 8003092:	69ba      	ldr	r2, [r7, #24]
 8003094:	4313      	orrs	r3, r2
 8003096:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	69ba      	ldr	r2, [r7, #24]
 800309c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	685b      	ldr	r3, [r3, #4]
 80030a2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80030a4:	2201      	movs	r2, #1
 80030a6:	69fb      	ldr	r3, [r7, #28]
 80030a8:	fa02 f303 	lsl.w	r3, r2, r3
 80030ac:	43db      	mvns	r3, r3
 80030ae:	69ba      	ldr	r2, [r7, #24]
 80030b0:	4013      	ands	r3, r2
 80030b2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80030b4:	683b      	ldr	r3, [r7, #0]
 80030b6:	685b      	ldr	r3, [r3, #4]
 80030b8:	091b      	lsrs	r3, r3, #4
 80030ba:	f003 0201 	and.w	r2, r3, #1
 80030be:	69fb      	ldr	r3, [r7, #28]
 80030c0:	fa02 f303 	lsl.w	r3, r2, r3
 80030c4:	69ba      	ldr	r2, [r7, #24]
 80030c6:	4313      	orrs	r3, r2
 80030c8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	69ba      	ldr	r2, [r7, #24]
 80030ce:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80030d0:	683b      	ldr	r3, [r7, #0]
 80030d2:	685b      	ldr	r3, [r3, #4]
 80030d4:	f003 0303 	and.w	r3, r3, #3
 80030d8:	2b03      	cmp	r3, #3
 80030da:	d017      	beq.n	800310c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	68db      	ldr	r3, [r3, #12]
 80030e0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80030e2:	69fb      	ldr	r3, [r7, #28]
 80030e4:	005b      	lsls	r3, r3, #1
 80030e6:	2203      	movs	r2, #3
 80030e8:	fa02 f303 	lsl.w	r3, r2, r3
 80030ec:	43db      	mvns	r3, r3
 80030ee:	69ba      	ldr	r2, [r7, #24]
 80030f0:	4013      	ands	r3, r2
 80030f2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80030f4:	683b      	ldr	r3, [r7, #0]
 80030f6:	689a      	ldr	r2, [r3, #8]
 80030f8:	69fb      	ldr	r3, [r7, #28]
 80030fa:	005b      	lsls	r3, r3, #1
 80030fc:	fa02 f303 	lsl.w	r3, r2, r3
 8003100:	69ba      	ldr	r2, [r7, #24]
 8003102:	4313      	orrs	r3, r2
 8003104:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	69ba      	ldr	r2, [r7, #24]
 800310a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800310c:	683b      	ldr	r3, [r7, #0]
 800310e:	685b      	ldr	r3, [r3, #4]
 8003110:	f003 0303 	and.w	r3, r3, #3
 8003114:	2b02      	cmp	r3, #2
 8003116:	d123      	bne.n	8003160 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003118:	69fb      	ldr	r3, [r7, #28]
 800311a:	08da      	lsrs	r2, r3, #3
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	3208      	adds	r2, #8
 8003120:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003124:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003126:	69fb      	ldr	r3, [r7, #28]
 8003128:	f003 0307 	and.w	r3, r3, #7
 800312c:	009b      	lsls	r3, r3, #2
 800312e:	220f      	movs	r2, #15
 8003130:	fa02 f303 	lsl.w	r3, r2, r3
 8003134:	43db      	mvns	r3, r3
 8003136:	69ba      	ldr	r2, [r7, #24]
 8003138:	4013      	ands	r3, r2
 800313a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800313c:	683b      	ldr	r3, [r7, #0]
 800313e:	691a      	ldr	r2, [r3, #16]
 8003140:	69fb      	ldr	r3, [r7, #28]
 8003142:	f003 0307 	and.w	r3, r3, #7
 8003146:	009b      	lsls	r3, r3, #2
 8003148:	fa02 f303 	lsl.w	r3, r2, r3
 800314c:	69ba      	ldr	r2, [r7, #24]
 800314e:	4313      	orrs	r3, r2
 8003150:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003152:	69fb      	ldr	r3, [r7, #28]
 8003154:	08da      	lsrs	r2, r3, #3
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	3208      	adds	r2, #8
 800315a:	69b9      	ldr	r1, [r7, #24]
 800315c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003166:	69fb      	ldr	r3, [r7, #28]
 8003168:	005b      	lsls	r3, r3, #1
 800316a:	2203      	movs	r2, #3
 800316c:	fa02 f303 	lsl.w	r3, r2, r3
 8003170:	43db      	mvns	r3, r3
 8003172:	69ba      	ldr	r2, [r7, #24]
 8003174:	4013      	ands	r3, r2
 8003176:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003178:	683b      	ldr	r3, [r7, #0]
 800317a:	685b      	ldr	r3, [r3, #4]
 800317c:	f003 0203 	and.w	r2, r3, #3
 8003180:	69fb      	ldr	r3, [r7, #28]
 8003182:	005b      	lsls	r3, r3, #1
 8003184:	fa02 f303 	lsl.w	r3, r2, r3
 8003188:	69ba      	ldr	r2, [r7, #24]
 800318a:	4313      	orrs	r3, r2
 800318c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	69ba      	ldr	r2, [r7, #24]
 8003192:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003194:	683b      	ldr	r3, [r7, #0]
 8003196:	685b      	ldr	r3, [r3, #4]
 8003198:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800319c:	2b00      	cmp	r3, #0
 800319e:	f000 80ae 	beq.w	80032fe <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80031a2:	2300      	movs	r3, #0
 80031a4:	60fb      	str	r3, [r7, #12]
 80031a6:	4b5d      	ldr	r3, [pc, #372]	@ (800331c <HAL_GPIO_Init+0x300>)
 80031a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80031aa:	4a5c      	ldr	r2, [pc, #368]	@ (800331c <HAL_GPIO_Init+0x300>)
 80031ac:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80031b0:	6453      	str	r3, [r2, #68]	@ 0x44
 80031b2:	4b5a      	ldr	r3, [pc, #360]	@ (800331c <HAL_GPIO_Init+0x300>)
 80031b4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80031b6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80031ba:	60fb      	str	r3, [r7, #12]
 80031bc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80031be:	4a58      	ldr	r2, [pc, #352]	@ (8003320 <HAL_GPIO_Init+0x304>)
 80031c0:	69fb      	ldr	r3, [r7, #28]
 80031c2:	089b      	lsrs	r3, r3, #2
 80031c4:	3302      	adds	r3, #2
 80031c6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80031ca:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80031cc:	69fb      	ldr	r3, [r7, #28]
 80031ce:	f003 0303 	and.w	r3, r3, #3
 80031d2:	009b      	lsls	r3, r3, #2
 80031d4:	220f      	movs	r2, #15
 80031d6:	fa02 f303 	lsl.w	r3, r2, r3
 80031da:	43db      	mvns	r3, r3
 80031dc:	69ba      	ldr	r2, [r7, #24]
 80031de:	4013      	ands	r3, r2
 80031e0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	4a4f      	ldr	r2, [pc, #316]	@ (8003324 <HAL_GPIO_Init+0x308>)
 80031e6:	4293      	cmp	r3, r2
 80031e8:	d025      	beq.n	8003236 <HAL_GPIO_Init+0x21a>
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	4a4e      	ldr	r2, [pc, #312]	@ (8003328 <HAL_GPIO_Init+0x30c>)
 80031ee:	4293      	cmp	r3, r2
 80031f0:	d01f      	beq.n	8003232 <HAL_GPIO_Init+0x216>
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	4a4d      	ldr	r2, [pc, #308]	@ (800332c <HAL_GPIO_Init+0x310>)
 80031f6:	4293      	cmp	r3, r2
 80031f8:	d019      	beq.n	800322e <HAL_GPIO_Init+0x212>
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	4a4c      	ldr	r2, [pc, #304]	@ (8003330 <HAL_GPIO_Init+0x314>)
 80031fe:	4293      	cmp	r3, r2
 8003200:	d013      	beq.n	800322a <HAL_GPIO_Init+0x20e>
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	4a4b      	ldr	r2, [pc, #300]	@ (8003334 <HAL_GPIO_Init+0x318>)
 8003206:	4293      	cmp	r3, r2
 8003208:	d00d      	beq.n	8003226 <HAL_GPIO_Init+0x20a>
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	4a4a      	ldr	r2, [pc, #296]	@ (8003338 <HAL_GPIO_Init+0x31c>)
 800320e:	4293      	cmp	r3, r2
 8003210:	d007      	beq.n	8003222 <HAL_GPIO_Init+0x206>
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	4a49      	ldr	r2, [pc, #292]	@ (800333c <HAL_GPIO_Init+0x320>)
 8003216:	4293      	cmp	r3, r2
 8003218:	d101      	bne.n	800321e <HAL_GPIO_Init+0x202>
 800321a:	2306      	movs	r3, #6
 800321c:	e00c      	b.n	8003238 <HAL_GPIO_Init+0x21c>
 800321e:	2307      	movs	r3, #7
 8003220:	e00a      	b.n	8003238 <HAL_GPIO_Init+0x21c>
 8003222:	2305      	movs	r3, #5
 8003224:	e008      	b.n	8003238 <HAL_GPIO_Init+0x21c>
 8003226:	2304      	movs	r3, #4
 8003228:	e006      	b.n	8003238 <HAL_GPIO_Init+0x21c>
 800322a:	2303      	movs	r3, #3
 800322c:	e004      	b.n	8003238 <HAL_GPIO_Init+0x21c>
 800322e:	2302      	movs	r3, #2
 8003230:	e002      	b.n	8003238 <HAL_GPIO_Init+0x21c>
 8003232:	2301      	movs	r3, #1
 8003234:	e000      	b.n	8003238 <HAL_GPIO_Init+0x21c>
 8003236:	2300      	movs	r3, #0
 8003238:	69fa      	ldr	r2, [r7, #28]
 800323a:	f002 0203 	and.w	r2, r2, #3
 800323e:	0092      	lsls	r2, r2, #2
 8003240:	4093      	lsls	r3, r2
 8003242:	69ba      	ldr	r2, [r7, #24]
 8003244:	4313      	orrs	r3, r2
 8003246:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003248:	4935      	ldr	r1, [pc, #212]	@ (8003320 <HAL_GPIO_Init+0x304>)
 800324a:	69fb      	ldr	r3, [r7, #28]
 800324c:	089b      	lsrs	r3, r3, #2
 800324e:	3302      	adds	r3, #2
 8003250:	69ba      	ldr	r2, [r7, #24]
 8003252:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003256:	4b3a      	ldr	r3, [pc, #232]	@ (8003340 <HAL_GPIO_Init+0x324>)
 8003258:	689b      	ldr	r3, [r3, #8]
 800325a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800325c:	693b      	ldr	r3, [r7, #16]
 800325e:	43db      	mvns	r3, r3
 8003260:	69ba      	ldr	r2, [r7, #24]
 8003262:	4013      	ands	r3, r2
 8003264:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003266:	683b      	ldr	r3, [r7, #0]
 8003268:	685b      	ldr	r3, [r3, #4]
 800326a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800326e:	2b00      	cmp	r3, #0
 8003270:	d003      	beq.n	800327a <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8003272:	69ba      	ldr	r2, [r7, #24]
 8003274:	693b      	ldr	r3, [r7, #16]
 8003276:	4313      	orrs	r3, r2
 8003278:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800327a:	4a31      	ldr	r2, [pc, #196]	@ (8003340 <HAL_GPIO_Init+0x324>)
 800327c:	69bb      	ldr	r3, [r7, #24]
 800327e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003280:	4b2f      	ldr	r3, [pc, #188]	@ (8003340 <HAL_GPIO_Init+0x324>)
 8003282:	68db      	ldr	r3, [r3, #12]
 8003284:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003286:	693b      	ldr	r3, [r7, #16]
 8003288:	43db      	mvns	r3, r3
 800328a:	69ba      	ldr	r2, [r7, #24]
 800328c:	4013      	ands	r3, r2
 800328e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003290:	683b      	ldr	r3, [r7, #0]
 8003292:	685b      	ldr	r3, [r3, #4]
 8003294:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003298:	2b00      	cmp	r3, #0
 800329a:	d003      	beq.n	80032a4 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 800329c:	69ba      	ldr	r2, [r7, #24]
 800329e:	693b      	ldr	r3, [r7, #16]
 80032a0:	4313      	orrs	r3, r2
 80032a2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80032a4:	4a26      	ldr	r2, [pc, #152]	@ (8003340 <HAL_GPIO_Init+0x324>)
 80032a6:	69bb      	ldr	r3, [r7, #24]
 80032a8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80032aa:	4b25      	ldr	r3, [pc, #148]	@ (8003340 <HAL_GPIO_Init+0x324>)
 80032ac:	685b      	ldr	r3, [r3, #4]
 80032ae:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80032b0:	693b      	ldr	r3, [r7, #16]
 80032b2:	43db      	mvns	r3, r3
 80032b4:	69ba      	ldr	r2, [r7, #24]
 80032b6:	4013      	ands	r3, r2
 80032b8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80032ba:	683b      	ldr	r3, [r7, #0]
 80032bc:	685b      	ldr	r3, [r3, #4]
 80032be:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	d003      	beq.n	80032ce <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 80032c6:	69ba      	ldr	r2, [r7, #24]
 80032c8:	693b      	ldr	r3, [r7, #16]
 80032ca:	4313      	orrs	r3, r2
 80032cc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80032ce:	4a1c      	ldr	r2, [pc, #112]	@ (8003340 <HAL_GPIO_Init+0x324>)
 80032d0:	69bb      	ldr	r3, [r7, #24]
 80032d2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80032d4:	4b1a      	ldr	r3, [pc, #104]	@ (8003340 <HAL_GPIO_Init+0x324>)
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80032da:	693b      	ldr	r3, [r7, #16]
 80032dc:	43db      	mvns	r3, r3
 80032de:	69ba      	ldr	r2, [r7, #24]
 80032e0:	4013      	ands	r3, r2
 80032e2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80032e4:	683b      	ldr	r3, [r7, #0]
 80032e6:	685b      	ldr	r3, [r3, #4]
 80032e8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80032ec:	2b00      	cmp	r3, #0
 80032ee:	d003      	beq.n	80032f8 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80032f0:	69ba      	ldr	r2, [r7, #24]
 80032f2:	693b      	ldr	r3, [r7, #16]
 80032f4:	4313      	orrs	r3, r2
 80032f6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80032f8:	4a11      	ldr	r2, [pc, #68]	@ (8003340 <HAL_GPIO_Init+0x324>)
 80032fa:	69bb      	ldr	r3, [r7, #24]
 80032fc:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80032fe:	69fb      	ldr	r3, [r7, #28]
 8003300:	3301      	adds	r3, #1
 8003302:	61fb      	str	r3, [r7, #28]
 8003304:	69fb      	ldr	r3, [r7, #28]
 8003306:	2b0f      	cmp	r3, #15
 8003308:	f67f ae96 	bls.w	8003038 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800330c:	bf00      	nop
 800330e:	bf00      	nop
 8003310:	3724      	adds	r7, #36	@ 0x24
 8003312:	46bd      	mov	sp, r7
 8003314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003318:	4770      	bx	lr
 800331a:	bf00      	nop
 800331c:	40023800 	.word	0x40023800
 8003320:	40013800 	.word	0x40013800
 8003324:	40020000 	.word	0x40020000
 8003328:	40020400 	.word	0x40020400
 800332c:	40020800 	.word	0x40020800
 8003330:	40020c00 	.word	0x40020c00
 8003334:	40021000 	.word	0x40021000
 8003338:	40021400 	.word	0x40021400
 800333c:	40021800 	.word	0x40021800
 8003340:	40013c00 	.word	0x40013c00

08003344 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003344:	b480      	push	{r7}
 8003346:	b083      	sub	sp, #12
 8003348:	af00      	add	r7, sp, #0
 800334a:	6078      	str	r0, [r7, #4]
 800334c:	460b      	mov	r3, r1
 800334e:	807b      	strh	r3, [r7, #2]
 8003350:	4613      	mov	r3, r2
 8003352:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003354:	787b      	ldrb	r3, [r7, #1]
 8003356:	2b00      	cmp	r3, #0
 8003358:	d003      	beq.n	8003362 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800335a:	887a      	ldrh	r2, [r7, #2]
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003360:	e003      	b.n	800336a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003362:	887b      	ldrh	r3, [r7, #2]
 8003364:	041a      	lsls	r2, r3, #16
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	619a      	str	r2, [r3, #24]
}
 800336a:	bf00      	nop
 800336c:	370c      	adds	r7, #12
 800336e:	46bd      	mov	sp, r7
 8003370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003374:	4770      	bx	lr
	...

08003378 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003378:	b580      	push	{r7, lr}
 800337a:	b084      	sub	sp, #16
 800337c:	af00      	add	r7, sp, #0
 800337e:	6078      	str	r0, [r7, #4]
 8003380:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	2b00      	cmp	r3, #0
 8003386:	d101      	bne.n	800338c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003388:	2301      	movs	r3, #1
 800338a:	e0cc      	b.n	8003526 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800338c:	4b68      	ldr	r3, [pc, #416]	@ (8003530 <HAL_RCC_ClockConfig+0x1b8>)
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	f003 030f 	and.w	r3, r3, #15
 8003394:	683a      	ldr	r2, [r7, #0]
 8003396:	429a      	cmp	r2, r3
 8003398:	d90c      	bls.n	80033b4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800339a:	4b65      	ldr	r3, [pc, #404]	@ (8003530 <HAL_RCC_ClockConfig+0x1b8>)
 800339c:	683a      	ldr	r2, [r7, #0]
 800339e:	b2d2      	uxtb	r2, r2
 80033a0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80033a2:	4b63      	ldr	r3, [pc, #396]	@ (8003530 <HAL_RCC_ClockConfig+0x1b8>)
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	f003 030f 	and.w	r3, r3, #15
 80033aa:	683a      	ldr	r2, [r7, #0]
 80033ac:	429a      	cmp	r2, r3
 80033ae:	d001      	beq.n	80033b4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80033b0:	2301      	movs	r3, #1
 80033b2:	e0b8      	b.n	8003526 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	f003 0302 	and.w	r3, r3, #2
 80033bc:	2b00      	cmp	r3, #0
 80033be:	d020      	beq.n	8003402 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	f003 0304 	and.w	r3, r3, #4
 80033c8:	2b00      	cmp	r3, #0
 80033ca:	d005      	beq.n	80033d8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80033cc:	4b59      	ldr	r3, [pc, #356]	@ (8003534 <HAL_RCC_ClockConfig+0x1bc>)
 80033ce:	689b      	ldr	r3, [r3, #8]
 80033d0:	4a58      	ldr	r2, [pc, #352]	@ (8003534 <HAL_RCC_ClockConfig+0x1bc>)
 80033d2:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80033d6:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	f003 0308 	and.w	r3, r3, #8
 80033e0:	2b00      	cmp	r3, #0
 80033e2:	d005      	beq.n	80033f0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80033e4:	4b53      	ldr	r3, [pc, #332]	@ (8003534 <HAL_RCC_ClockConfig+0x1bc>)
 80033e6:	689b      	ldr	r3, [r3, #8]
 80033e8:	4a52      	ldr	r2, [pc, #328]	@ (8003534 <HAL_RCC_ClockConfig+0x1bc>)
 80033ea:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80033ee:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80033f0:	4b50      	ldr	r3, [pc, #320]	@ (8003534 <HAL_RCC_ClockConfig+0x1bc>)
 80033f2:	689b      	ldr	r3, [r3, #8]
 80033f4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	689b      	ldr	r3, [r3, #8]
 80033fc:	494d      	ldr	r1, [pc, #308]	@ (8003534 <HAL_RCC_ClockConfig+0x1bc>)
 80033fe:	4313      	orrs	r3, r2
 8003400:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	f003 0301 	and.w	r3, r3, #1
 800340a:	2b00      	cmp	r3, #0
 800340c:	d044      	beq.n	8003498 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	685b      	ldr	r3, [r3, #4]
 8003412:	2b01      	cmp	r3, #1
 8003414:	d107      	bne.n	8003426 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003416:	4b47      	ldr	r3, [pc, #284]	@ (8003534 <HAL_RCC_ClockConfig+0x1bc>)
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800341e:	2b00      	cmp	r3, #0
 8003420:	d119      	bne.n	8003456 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003422:	2301      	movs	r3, #1
 8003424:	e07f      	b.n	8003526 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	685b      	ldr	r3, [r3, #4]
 800342a:	2b02      	cmp	r3, #2
 800342c:	d003      	beq.n	8003436 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003432:	2b03      	cmp	r3, #3
 8003434:	d107      	bne.n	8003446 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003436:	4b3f      	ldr	r3, [pc, #252]	@ (8003534 <HAL_RCC_ClockConfig+0x1bc>)
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800343e:	2b00      	cmp	r3, #0
 8003440:	d109      	bne.n	8003456 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003442:	2301      	movs	r3, #1
 8003444:	e06f      	b.n	8003526 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003446:	4b3b      	ldr	r3, [pc, #236]	@ (8003534 <HAL_RCC_ClockConfig+0x1bc>)
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	f003 0302 	and.w	r3, r3, #2
 800344e:	2b00      	cmp	r3, #0
 8003450:	d101      	bne.n	8003456 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003452:	2301      	movs	r3, #1
 8003454:	e067      	b.n	8003526 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003456:	4b37      	ldr	r3, [pc, #220]	@ (8003534 <HAL_RCC_ClockConfig+0x1bc>)
 8003458:	689b      	ldr	r3, [r3, #8]
 800345a:	f023 0203 	bic.w	r2, r3, #3
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	685b      	ldr	r3, [r3, #4]
 8003462:	4934      	ldr	r1, [pc, #208]	@ (8003534 <HAL_RCC_ClockConfig+0x1bc>)
 8003464:	4313      	orrs	r3, r2
 8003466:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003468:	f7fe fd32 	bl	8001ed0 <HAL_GetTick>
 800346c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800346e:	e00a      	b.n	8003486 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003470:	f7fe fd2e 	bl	8001ed0 <HAL_GetTick>
 8003474:	4602      	mov	r2, r0
 8003476:	68fb      	ldr	r3, [r7, #12]
 8003478:	1ad3      	subs	r3, r2, r3
 800347a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800347e:	4293      	cmp	r3, r2
 8003480:	d901      	bls.n	8003486 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003482:	2303      	movs	r3, #3
 8003484:	e04f      	b.n	8003526 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003486:	4b2b      	ldr	r3, [pc, #172]	@ (8003534 <HAL_RCC_ClockConfig+0x1bc>)
 8003488:	689b      	ldr	r3, [r3, #8]
 800348a:	f003 020c 	and.w	r2, r3, #12
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	685b      	ldr	r3, [r3, #4]
 8003492:	009b      	lsls	r3, r3, #2
 8003494:	429a      	cmp	r2, r3
 8003496:	d1eb      	bne.n	8003470 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003498:	4b25      	ldr	r3, [pc, #148]	@ (8003530 <HAL_RCC_ClockConfig+0x1b8>)
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	f003 030f 	and.w	r3, r3, #15
 80034a0:	683a      	ldr	r2, [r7, #0]
 80034a2:	429a      	cmp	r2, r3
 80034a4:	d20c      	bcs.n	80034c0 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80034a6:	4b22      	ldr	r3, [pc, #136]	@ (8003530 <HAL_RCC_ClockConfig+0x1b8>)
 80034a8:	683a      	ldr	r2, [r7, #0]
 80034aa:	b2d2      	uxtb	r2, r2
 80034ac:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80034ae:	4b20      	ldr	r3, [pc, #128]	@ (8003530 <HAL_RCC_ClockConfig+0x1b8>)
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	f003 030f 	and.w	r3, r3, #15
 80034b6:	683a      	ldr	r2, [r7, #0]
 80034b8:	429a      	cmp	r2, r3
 80034ba:	d001      	beq.n	80034c0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80034bc:	2301      	movs	r3, #1
 80034be:	e032      	b.n	8003526 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	f003 0304 	and.w	r3, r3, #4
 80034c8:	2b00      	cmp	r3, #0
 80034ca:	d008      	beq.n	80034de <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80034cc:	4b19      	ldr	r3, [pc, #100]	@ (8003534 <HAL_RCC_ClockConfig+0x1bc>)
 80034ce:	689b      	ldr	r3, [r3, #8]
 80034d0:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	68db      	ldr	r3, [r3, #12]
 80034d8:	4916      	ldr	r1, [pc, #88]	@ (8003534 <HAL_RCC_ClockConfig+0x1bc>)
 80034da:	4313      	orrs	r3, r2
 80034dc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	f003 0308 	and.w	r3, r3, #8
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	d009      	beq.n	80034fe <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80034ea:	4b12      	ldr	r3, [pc, #72]	@ (8003534 <HAL_RCC_ClockConfig+0x1bc>)
 80034ec:	689b      	ldr	r3, [r3, #8]
 80034ee:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	691b      	ldr	r3, [r3, #16]
 80034f6:	00db      	lsls	r3, r3, #3
 80034f8:	490e      	ldr	r1, [pc, #56]	@ (8003534 <HAL_RCC_ClockConfig+0x1bc>)
 80034fa:	4313      	orrs	r3, r2
 80034fc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80034fe:	f000 f821 	bl	8003544 <HAL_RCC_GetSysClockFreq>
 8003502:	4602      	mov	r2, r0
 8003504:	4b0b      	ldr	r3, [pc, #44]	@ (8003534 <HAL_RCC_ClockConfig+0x1bc>)
 8003506:	689b      	ldr	r3, [r3, #8]
 8003508:	091b      	lsrs	r3, r3, #4
 800350a:	f003 030f 	and.w	r3, r3, #15
 800350e:	490a      	ldr	r1, [pc, #40]	@ (8003538 <HAL_RCC_ClockConfig+0x1c0>)
 8003510:	5ccb      	ldrb	r3, [r1, r3]
 8003512:	fa22 f303 	lsr.w	r3, r2, r3
 8003516:	4a09      	ldr	r2, [pc, #36]	@ (800353c <HAL_RCC_ClockConfig+0x1c4>)
 8003518:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 800351a:	4b09      	ldr	r3, [pc, #36]	@ (8003540 <HAL_RCC_ClockConfig+0x1c8>)
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	4618      	mov	r0, r3
 8003520:	f7fe fc92 	bl	8001e48 <HAL_InitTick>

  return HAL_OK;
 8003524:	2300      	movs	r3, #0
}
 8003526:	4618      	mov	r0, r3
 8003528:	3710      	adds	r7, #16
 800352a:	46bd      	mov	sp, r7
 800352c:	bd80      	pop	{r7, pc}
 800352e:	bf00      	nop
 8003530:	40023c00 	.word	0x40023c00
 8003534:	40023800 	.word	0x40023800
 8003538:	08005284 	.word	0x08005284
 800353c:	20000004 	.word	0x20000004
 8003540:	20000008 	.word	0x20000008

08003544 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003544:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003548:	b0ae      	sub	sp, #184	@ 0xb8
 800354a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 800354c:	2300      	movs	r3, #0
 800354e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t pllvco = 0U;
 8003552:	2300      	movs	r3, #0
 8003554:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t pllp = 0U;
 8003558:	2300      	movs	r3, #0
 800355a:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  uint32_t pllr = 0U;
 800355e:	2300      	movs	r3, #0
 8003560:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t sysclockfreq = 0U;
 8003564:	2300      	movs	r3, #0
 8003566:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800356a:	4bcb      	ldr	r3, [pc, #812]	@ (8003898 <HAL_RCC_GetSysClockFreq+0x354>)
 800356c:	689b      	ldr	r3, [r3, #8]
 800356e:	f003 030c 	and.w	r3, r3, #12
 8003572:	2b0c      	cmp	r3, #12
 8003574:	f200 8206 	bhi.w	8003984 <HAL_RCC_GetSysClockFreq+0x440>
 8003578:	a201      	add	r2, pc, #4	@ (adr r2, 8003580 <HAL_RCC_GetSysClockFreq+0x3c>)
 800357a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800357e:	bf00      	nop
 8003580:	080035b5 	.word	0x080035b5
 8003584:	08003985 	.word	0x08003985
 8003588:	08003985 	.word	0x08003985
 800358c:	08003985 	.word	0x08003985
 8003590:	080035bd 	.word	0x080035bd
 8003594:	08003985 	.word	0x08003985
 8003598:	08003985 	.word	0x08003985
 800359c:	08003985 	.word	0x08003985
 80035a0:	080035c5 	.word	0x080035c5
 80035a4:	08003985 	.word	0x08003985
 80035a8:	08003985 	.word	0x08003985
 80035ac:	08003985 	.word	0x08003985
 80035b0:	080037b5 	.word	0x080037b5
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80035b4:	4bb9      	ldr	r3, [pc, #740]	@ (800389c <HAL_RCC_GetSysClockFreq+0x358>)
 80035b6:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 80035ba:	e1e7      	b.n	800398c <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80035bc:	4bb8      	ldr	r3, [pc, #736]	@ (80038a0 <HAL_RCC_GetSysClockFreq+0x35c>)
 80035be:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 80035c2:	e1e3      	b.n	800398c <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80035c4:	4bb4      	ldr	r3, [pc, #720]	@ (8003898 <HAL_RCC_GetSysClockFreq+0x354>)
 80035c6:	685b      	ldr	r3, [r3, #4]
 80035c8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80035cc:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80035d0:	4bb1      	ldr	r3, [pc, #708]	@ (8003898 <HAL_RCC_GetSysClockFreq+0x354>)
 80035d2:	685b      	ldr	r3, [r3, #4]
 80035d4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80035d8:	2b00      	cmp	r3, #0
 80035da:	d071      	beq.n	80036c0 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80035dc:	4bae      	ldr	r3, [pc, #696]	@ (8003898 <HAL_RCC_GetSysClockFreq+0x354>)
 80035de:	685b      	ldr	r3, [r3, #4]
 80035e0:	099b      	lsrs	r3, r3, #6
 80035e2:	2200      	movs	r2, #0
 80035e4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80035e8:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 80035ec:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80035f0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80035f4:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80035f8:	2300      	movs	r3, #0
 80035fa:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80035fe:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8003602:	4622      	mov	r2, r4
 8003604:	462b      	mov	r3, r5
 8003606:	f04f 0000 	mov.w	r0, #0
 800360a:	f04f 0100 	mov.w	r1, #0
 800360e:	0159      	lsls	r1, r3, #5
 8003610:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003614:	0150      	lsls	r0, r2, #5
 8003616:	4602      	mov	r2, r0
 8003618:	460b      	mov	r3, r1
 800361a:	4621      	mov	r1, r4
 800361c:	1a51      	subs	r1, r2, r1
 800361e:	6439      	str	r1, [r7, #64]	@ 0x40
 8003620:	4629      	mov	r1, r5
 8003622:	eb63 0301 	sbc.w	r3, r3, r1
 8003626:	647b      	str	r3, [r7, #68]	@ 0x44
 8003628:	f04f 0200 	mov.w	r2, #0
 800362c:	f04f 0300 	mov.w	r3, #0
 8003630:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	@ 0x40
 8003634:	4649      	mov	r1, r9
 8003636:	018b      	lsls	r3, r1, #6
 8003638:	4641      	mov	r1, r8
 800363a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800363e:	4641      	mov	r1, r8
 8003640:	018a      	lsls	r2, r1, #6
 8003642:	4641      	mov	r1, r8
 8003644:	1a51      	subs	r1, r2, r1
 8003646:	63b9      	str	r1, [r7, #56]	@ 0x38
 8003648:	4649      	mov	r1, r9
 800364a:	eb63 0301 	sbc.w	r3, r3, r1
 800364e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003650:	f04f 0200 	mov.w	r2, #0
 8003654:	f04f 0300 	mov.w	r3, #0
 8003658:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	@ 0x38
 800365c:	4649      	mov	r1, r9
 800365e:	00cb      	lsls	r3, r1, #3
 8003660:	4641      	mov	r1, r8
 8003662:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003666:	4641      	mov	r1, r8
 8003668:	00ca      	lsls	r2, r1, #3
 800366a:	4610      	mov	r0, r2
 800366c:	4619      	mov	r1, r3
 800366e:	4603      	mov	r3, r0
 8003670:	4622      	mov	r2, r4
 8003672:	189b      	adds	r3, r3, r2
 8003674:	633b      	str	r3, [r7, #48]	@ 0x30
 8003676:	462b      	mov	r3, r5
 8003678:	460a      	mov	r2, r1
 800367a:	eb42 0303 	adc.w	r3, r2, r3
 800367e:	637b      	str	r3, [r7, #52]	@ 0x34
 8003680:	f04f 0200 	mov.w	r2, #0
 8003684:	f04f 0300 	mov.w	r3, #0
 8003688:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 800368c:	4629      	mov	r1, r5
 800368e:	024b      	lsls	r3, r1, #9
 8003690:	4621      	mov	r1, r4
 8003692:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003696:	4621      	mov	r1, r4
 8003698:	024a      	lsls	r2, r1, #9
 800369a:	4610      	mov	r0, r2
 800369c:	4619      	mov	r1, r3
 800369e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80036a2:	2200      	movs	r2, #0
 80036a4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80036a8:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80036ac:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 80036b0:	f7fd fa00 	bl	8000ab4 <__aeabi_uldivmod>
 80036b4:	4602      	mov	r2, r0
 80036b6:	460b      	mov	r3, r1
 80036b8:	4613      	mov	r3, r2
 80036ba:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80036be:	e067      	b.n	8003790 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80036c0:	4b75      	ldr	r3, [pc, #468]	@ (8003898 <HAL_RCC_GetSysClockFreq+0x354>)
 80036c2:	685b      	ldr	r3, [r3, #4]
 80036c4:	099b      	lsrs	r3, r3, #6
 80036c6:	2200      	movs	r2, #0
 80036c8:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80036cc:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 80036d0:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80036d4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80036d8:	67bb      	str	r3, [r7, #120]	@ 0x78
 80036da:	2300      	movs	r3, #0
 80036dc:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80036de:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 80036e2:	4622      	mov	r2, r4
 80036e4:	462b      	mov	r3, r5
 80036e6:	f04f 0000 	mov.w	r0, #0
 80036ea:	f04f 0100 	mov.w	r1, #0
 80036ee:	0159      	lsls	r1, r3, #5
 80036f0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80036f4:	0150      	lsls	r0, r2, #5
 80036f6:	4602      	mov	r2, r0
 80036f8:	460b      	mov	r3, r1
 80036fa:	4621      	mov	r1, r4
 80036fc:	1a51      	subs	r1, r2, r1
 80036fe:	62b9      	str	r1, [r7, #40]	@ 0x28
 8003700:	4629      	mov	r1, r5
 8003702:	eb63 0301 	sbc.w	r3, r3, r1
 8003706:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003708:	f04f 0200 	mov.w	r2, #0
 800370c:	f04f 0300 	mov.w	r3, #0
 8003710:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	@ 0x28
 8003714:	4649      	mov	r1, r9
 8003716:	018b      	lsls	r3, r1, #6
 8003718:	4641      	mov	r1, r8
 800371a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800371e:	4641      	mov	r1, r8
 8003720:	018a      	lsls	r2, r1, #6
 8003722:	4641      	mov	r1, r8
 8003724:	ebb2 0a01 	subs.w	sl, r2, r1
 8003728:	4649      	mov	r1, r9
 800372a:	eb63 0b01 	sbc.w	fp, r3, r1
 800372e:	f04f 0200 	mov.w	r2, #0
 8003732:	f04f 0300 	mov.w	r3, #0
 8003736:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800373a:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800373e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003742:	4692      	mov	sl, r2
 8003744:	469b      	mov	fp, r3
 8003746:	4623      	mov	r3, r4
 8003748:	eb1a 0303 	adds.w	r3, sl, r3
 800374c:	623b      	str	r3, [r7, #32]
 800374e:	462b      	mov	r3, r5
 8003750:	eb4b 0303 	adc.w	r3, fp, r3
 8003754:	627b      	str	r3, [r7, #36]	@ 0x24
 8003756:	f04f 0200 	mov.w	r2, #0
 800375a:	f04f 0300 	mov.w	r3, #0
 800375e:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8003762:	4629      	mov	r1, r5
 8003764:	028b      	lsls	r3, r1, #10
 8003766:	4621      	mov	r1, r4
 8003768:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800376c:	4621      	mov	r1, r4
 800376e:	028a      	lsls	r2, r1, #10
 8003770:	4610      	mov	r0, r2
 8003772:	4619      	mov	r1, r3
 8003774:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8003778:	2200      	movs	r2, #0
 800377a:	673b      	str	r3, [r7, #112]	@ 0x70
 800377c:	677a      	str	r2, [r7, #116]	@ 0x74
 800377e:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 8003782:	f7fd f997 	bl	8000ab4 <__aeabi_uldivmod>
 8003786:	4602      	mov	r2, r0
 8003788:	460b      	mov	r3, r1
 800378a:	4613      	mov	r3, r2
 800378c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8003790:	4b41      	ldr	r3, [pc, #260]	@ (8003898 <HAL_RCC_GetSysClockFreq+0x354>)
 8003792:	685b      	ldr	r3, [r3, #4]
 8003794:	0c1b      	lsrs	r3, r3, #16
 8003796:	f003 0303 	and.w	r3, r3, #3
 800379a:	3301      	adds	r3, #1
 800379c:	005b      	lsls	r3, r3, #1
 800379e:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

      sysclockfreq = pllvco / pllp;
 80037a2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80037a6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80037aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80037ae:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 80037b2:	e0eb      	b.n	800398c <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80037b4:	4b38      	ldr	r3, [pc, #224]	@ (8003898 <HAL_RCC_GetSysClockFreq+0x354>)
 80037b6:	685b      	ldr	r3, [r3, #4]
 80037b8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80037bc:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80037c0:	4b35      	ldr	r3, [pc, #212]	@ (8003898 <HAL_RCC_GetSysClockFreq+0x354>)
 80037c2:	685b      	ldr	r3, [r3, #4]
 80037c4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80037c8:	2b00      	cmp	r3, #0
 80037ca:	d06b      	beq.n	80038a4 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80037cc:	4b32      	ldr	r3, [pc, #200]	@ (8003898 <HAL_RCC_GetSysClockFreq+0x354>)
 80037ce:	685b      	ldr	r3, [r3, #4]
 80037d0:	099b      	lsrs	r3, r3, #6
 80037d2:	2200      	movs	r2, #0
 80037d4:	66bb      	str	r3, [r7, #104]	@ 0x68
 80037d6:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80037d8:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80037da:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80037de:	663b      	str	r3, [r7, #96]	@ 0x60
 80037e0:	2300      	movs	r3, #0
 80037e2:	667b      	str	r3, [r7, #100]	@ 0x64
 80037e4:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 80037e8:	4622      	mov	r2, r4
 80037ea:	462b      	mov	r3, r5
 80037ec:	f04f 0000 	mov.w	r0, #0
 80037f0:	f04f 0100 	mov.w	r1, #0
 80037f4:	0159      	lsls	r1, r3, #5
 80037f6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80037fa:	0150      	lsls	r0, r2, #5
 80037fc:	4602      	mov	r2, r0
 80037fe:	460b      	mov	r3, r1
 8003800:	4621      	mov	r1, r4
 8003802:	1a51      	subs	r1, r2, r1
 8003804:	61b9      	str	r1, [r7, #24]
 8003806:	4629      	mov	r1, r5
 8003808:	eb63 0301 	sbc.w	r3, r3, r1
 800380c:	61fb      	str	r3, [r7, #28]
 800380e:	f04f 0200 	mov.w	r2, #0
 8003812:	f04f 0300 	mov.w	r3, #0
 8003816:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 800381a:	4659      	mov	r1, fp
 800381c:	018b      	lsls	r3, r1, #6
 800381e:	4651      	mov	r1, sl
 8003820:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003824:	4651      	mov	r1, sl
 8003826:	018a      	lsls	r2, r1, #6
 8003828:	4651      	mov	r1, sl
 800382a:	ebb2 0801 	subs.w	r8, r2, r1
 800382e:	4659      	mov	r1, fp
 8003830:	eb63 0901 	sbc.w	r9, r3, r1
 8003834:	f04f 0200 	mov.w	r2, #0
 8003838:	f04f 0300 	mov.w	r3, #0
 800383c:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003840:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003844:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003848:	4690      	mov	r8, r2
 800384a:	4699      	mov	r9, r3
 800384c:	4623      	mov	r3, r4
 800384e:	eb18 0303 	adds.w	r3, r8, r3
 8003852:	613b      	str	r3, [r7, #16]
 8003854:	462b      	mov	r3, r5
 8003856:	eb49 0303 	adc.w	r3, r9, r3
 800385a:	617b      	str	r3, [r7, #20]
 800385c:	f04f 0200 	mov.w	r2, #0
 8003860:	f04f 0300 	mov.w	r3, #0
 8003864:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8003868:	4629      	mov	r1, r5
 800386a:	024b      	lsls	r3, r1, #9
 800386c:	4621      	mov	r1, r4
 800386e:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003872:	4621      	mov	r1, r4
 8003874:	024a      	lsls	r2, r1, #9
 8003876:	4610      	mov	r0, r2
 8003878:	4619      	mov	r1, r3
 800387a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800387e:	2200      	movs	r2, #0
 8003880:	65bb      	str	r3, [r7, #88]	@ 0x58
 8003882:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8003884:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8003888:	f7fd f914 	bl	8000ab4 <__aeabi_uldivmod>
 800388c:	4602      	mov	r2, r0
 800388e:	460b      	mov	r3, r1
 8003890:	4613      	mov	r3, r2
 8003892:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003896:	e065      	b.n	8003964 <HAL_RCC_GetSysClockFreq+0x420>
 8003898:	40023800 	.word	0x40023800
 800389c:	00f42400 	.word	0x00f42400
 80038a0:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80038a4:	4b3d      	ldr	r3, [pc, #244]	@ (800399c <HAL_RCC_GetSysClockFreq+0x458>)
 80038a6:	685b      	ldr	r3, [r3, #4]
 80038a8:	099b      	lsrs	r3, r3, #6
 80038aa:	2200      	movs	r2, #0
 80038ac:	4618      	mov	r0, r3
 80038ae:	4611      	mov	r1, r2
 80038b0:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80038b4:	653b      	str	r3, [r7, #80]	@ 0x50
 80038b6:	2300      	movs	r3, #0
 80038b8:	657b      	str	r3, [r7, #84]	@ 0x54
 80038ba:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 80038be:	4642      	mov	r2, r8
 80038c0:	464b      	mov	r3, r9
 80038c2:	f04f 0000 	mov.w	r0, #0
 80038c6:	f04f 0100 	mov.w	r1, #0
 80038ca:	0159      	lsls	r1, r3, #5
 80038cc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80038d0:	0150      	lsls	r0, r2, #5
 80038d2:	4602      	mov	r2, r0
 80038d4:	460b      	mov	r3, r1
 80038d6:	4641      	mov	r1, r8
 80038d8:	1a51      	subs	r1, r2, r1
 80038da:	60b9      	str	r1, [r7, #8]
 80038dc:	4649      	mov	r1, r9
 80038de:	eb63 0301 	sbc.w	r3, r3, r1
 80038e2:	60fb      	str	r3, [r7, #12]
 80038e4:	f04f 0200 	mov.w	r2, #0
 80038e8:	f04f 0300 	mov.w	r3, #0
 80038ec:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 80038f0:	4659      	mov	r1, fp
 80038f2:	018b      	lsls	r3, r1, #6
 80038f4:	4651      	mov	r1, sl
 80038f6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80038fa:	4651      	mov	r1, sl
 80038fc:	018a      	lsls	r2, r1, #6
 80038fe:	4651      	mov	r1, sl
 8003900:	1a54      	subs	r4, r2, r1
 8003902:	4659      	mov	r1, fp
 8003904:	eb63 0501 	sbc.w	r5, r3, r1
 8003908:	f04f 0200 	mov.w	r2, #0
 800390c:	f04f 0300 	mov.w	r3, #0
 8003910:	00eb      	lsls	r3, r5, #3
 8003912:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003916:	00e2      	lsls	r2, r4, #3
 8003918:	4614      	mov	r4, r2
 800391a:	461d      	mov	r5, r3
 800391c:	4643      	mov	r3, r8
 800391e:	18e3      	adds	r3, r4, r3
 8003920:	603b      	str	r3, [r7, #0]
 8003922:	464b      	mov	r3, r9
 8003924:	eb45 0303 	adc.w	r3, r5, r3
 8003928:	607b      	str	r3, [r7, #4]
 800392a:	f04f 0200 	mov.w	r2, #0
 800392e:	f04f 0300 	mov.w	r3, #0
 8003932:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003936:	4629      	mov	r1, r5
 8003938:	028b      	lsls	r3, r1, #10
 800393a:	4621      	mov	r1, r4
 800393c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003940:	4621      	mov	r1, r4
 8003942:	028a      	lsls	r2, r1, #10
 8003944:	4610      	mov	r0, r2
 8003946:	4619      	mov	r1, r3
 8003948:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800394c:	2200      	movs	r2, #0
 800394e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003950:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8003952:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8003956:	f7fd f8ad 	bl	8000ab4 <__aeabi_uldivmod>
 800395a:	4602      	mov	r2, r0
 800395c:	460b      	mov	r3, r1
 800395e:	4613      	mov	r3, r2
 8003960:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8003964:	4b0d      	ldr	r3, [pc, #52]	@ (800399c <HAL_RCC_GetSysClockFreq+0x458>)
 8003966:	685b      	ldr	r3, [r3, #4]
 8003968:	0f1b      	lsrs	r3, r3, #28
 800396a:	f003 0307 	and.w	r3, r3, #7
 800396e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

      sysclockfreq = pllvco / pllr;
 8003972:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8003976:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800397a:	fbb2 f3f3 	udiv	r3, r2, r3
 800397e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8003982:	e003      	b.n	800398c <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003984:	4b06      	ldr	r3, [pc, #24]	@ (80039a0 <HAL_RCC_GetSysClockFreq+0x45c>)
 8003986:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 800398a:	bf00      	nop
    }
  }
  return sysclockfreq;
 800398c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
}
 8003990:	4618      	mov	r0, r3
 8003992:	37b8      	adds	r7, #184	@ 0xb8
 8003994:	46bd      	mov	sp, r7
 8003996:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800399a:	bf00      	nop
 800399c:	40023800 	.word	0x40023800
 80039a0:	00f42400 	.word	0x00f42400

080039a4 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80039a4:	b580      	push	{r7, lr}
 80039a6:	b086      	sub	sp, #24
 80039a8:	af00      	add	r7, sp, #0
 80039aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	d101      	bne.n	80039b6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80039b2:	2301      	movs	r3, #1
 80039b4:	e28d      	b.n	8003ed2 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	f003 0301 	and.w	r3, r3, #1
 80039be:	2b00      	cmp	r3, #0
 80039c0:	f000 8083 	beq.w	8003aca <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 80039c4:	4b94      	ldr	r3, [pc, #592]	@ (8003c18 <HAL_RCC_OscConfig+0x274>)
 80039c6:	689b      	ldr	r3, [r3, #8]
 80039c8:	f003 030c 	and.w	r3, r3, #12
 80039cc:	2b04      	cmp	r3, #4
 80039ce:	d019      	beq.n	8003a04 <HAL_RCC_OscConfig+0x60>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 80039d0:	4b91      	ldr	r3, [pc, #580]	@ (8003c18 <HAL_RCC_OscConfig+0x274>)
 80039d2:	689b      	ldr	r3, [r3, #8]
 80039d4:	f003 030c 	and.w	r3, r3, #12
        || \
 80039d8:	2b08      	cmp	r3, #8
 80039da:	d106      	bne.n	80039ea <HAL_RCC_OscConfig+0x46>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 80039dc:	4b8e      	ldr	r3, [pc, #568]	@ (8003c18 <HAL_RCC_OscConfig+0x274>)
 80039de:	685b      	ldr	r3, [r3, #4]
 80039e0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80039e4:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80039e8:	d00c      	beq.n	8003a04 <HAL_RCC_OscConfig+0x60>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80039ea:	4b8b      	ldr	r3, [pc, #556]	@ (8003c18 <HAL_RCC_OscConfig+0x274>)
 80039ec:	689b      	ldr	r3, [r3, #8]
 80039ee:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 80039f2:	2b0c      	cmp	r3, #12
 80039f4:	d112      	bne.n	8003a1c <HAL_RCC_OscConfig+0x78>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80039f6:	4b88      	ldr	r3, [pc, #544]	@ (8003c18 <HAL_RCC_OscConfig+0x274>)
 80039f8:	685b      	ldr	r3, [r3, #4]
 80039fa:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80039fe:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003a02:	d10b      	bne.n	8003a1c <HAL_RCC_OscConfig+0x78>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003a04:	4b84      	ldr	r3, [pc, #528]	@ (8003c18 <HAL_RCC_OscConfig+0x274>)
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003a0c:	2b00      	cmp	r3, #0
 8003a0e:	d05b      	beq.n	8003ac8 <HAL_RCC_OscConfig+0x124>
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	685b      	ldr	r3, [r3, #4]
 8003a14:	2b00      	cmp	r3, #0
 8003a16:	d157      	bne.n	8003ac8 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8003a18:	2301      	movs	r3, #1
 8003a1a:	e25a      	b.n	8003ed2 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	685b      	ldr	r3, [r3, #4]
 8003a20:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003a24:	d106      	bne.n	8003a34 <HAL_RCC_OscConfig+0x90>
 8003a26:	4b7c      	ldr	r3, [pc, #496]	@ (8003c18 <HAL_RCC_OscConfig+0x274>)
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	4a7b      	ldr	r2, [pc, #492]	@ (8003c18 <HAL_RCC_OscConfig+0x274>)
 8003a2c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003a30:	6013      	str	r3, [r2, #0]
 8003a32:	e01d      	b.n	8003a70 <HAL_RCC_OscConfig+0xcc>
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	685b      	ldr	r3, [r3, #4]
 8003a38:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003a3c:	d10c      	bne.n	8003a58 <HAL_RCC_OscConfig+0xb4>
 8003a3e:	4b76      	ldr	r3, [pc, #472]	@ (8003c18 <HAL_RCC_OscConfig+0x274>)
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	4a75      	ldr	r2, [pc, #468]	@ (8003c18 <HAL_RCC_OscConfig+0x274>)
 8003a44:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003a48:	6013      	str	r3, [r2, #0]
 8003a4a:	4b73      	ldr	r3, [pc, #460]	@ (8003c18 <HAL_RCC_OscConfig+0x274>)
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	4a72      	ldr	r2, [pc, #456]	@ (8003c18 <HAL_RCC_OscConfig+0x274>)
 8003a50:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003a54:	6013      	str	r3, [r2, #0]
 8003a56:	e00b      	b.n	8003a70 <HAL_RCC_OscConfig+0xcc>
 8003a58:	4b6f      	ldr	r3, [pc, #444]	@ (8003c18 <HAL_RCC_OscConfig+0x274>)
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	4a6e      	ldr	r2, [pc, #440]	@ (8003c18 <HAL_RCC_OscConfig+0x274>)
 8003a5e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003a62:	6013      	str	r3, [r2, #0]
 8003a64:	4b6c      	ldr	r3, [pc, #432]	@ (8003c18 <HAL_RCC_OscConfig+0x274>)
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	4a6b      	ldr	r2, [pc, #428]	@ (8003c18 <HAL_RCC_OscConfig+0x274>)
 8003a6a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003a6e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	685b      	ldr	r3, [r3, #4]
 8003a74:	2b00      	cmp	r3, #0
 8003a76:	d013      	beq.n	8003aa0 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a78:	f7fe fa2a 	bl	8001ed0 <HAL_GetTick>
 8003a7c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003a7e:	e008      	b.n	8003a92 <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003a80:	f7fe fa26 	bl	8001ed0 <HAL_GetTick>
 8003a84:	4602      	mov	r2, r0
 8003a86:	693b      	ldr	r3, [r7, #16]
 8003a88:	1ad3      	subs	r3, r2, r3
 8003a8a:	2b64      	cmp	r3, #100	@ 0x64
 8003a8c:	d901      	bls.n	8003a92 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8003a8e:	2303      	movs	r3, #3
 8003a90:	e21f      	b.n	8003ed2 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003a92:	4b61      	ldr	r3, [pc, #388]	@ (8003c18 <HAL_RCC_OscConfig+0x274>)
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	d0f0      	beq.n	8003a80 <HAL_RCC_OscConfig+0xdc>
 8003a9e:	e014      	b.n	8003aca <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003aa0:	f7fe fa16 	bl	8001ed0 <HAL_GetTick>
 8003aa4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003aa6:	e008      	b.n	8003aba <HAL_RCC_OscConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003aa8:	f7fe fa12 	bl	8001ed0 <HAL_GetTick>
 8003aac:	4602      	mov	r2, r0
 8003aae:	693b      	ldr	r3, [r7, #16]
 8003ab0:	1ad3      	subs	r3, r2, r3
 8003ab2:	2b64      	cmp	r3, #100	@ 0x64
 8003ab4:	d901      	bls.n	8003aba <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8003ab6:	2303      	movs	r3, #3
 8003ab8:	e20b      	b.n	8003ed2 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003aba:	4b57      	ldr	r3, [pc, #348]	@ (8003c18 <HAL_RCC_OscConfig+0x274>)
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	d1f0      	bne.n	8003aa8 <HAL_RCC_OscConfig+0x104>
 8003ac6:	e000      	b.n	8003aca <HAL_RCC_OscConfig+0x126>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003ac8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	f003 0302 	and.w	r3, r3, #2
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	d06f      	beq.n	8003bb6 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8003ad6:	4b50      	ldr	r3, [pc, #320]	@ (8003c18 <HAL_RCC_OscConfig+0x274>)
 8003ad8:	689b      	ldr	r3, [r3, #8]
 8003ada:	f003 030c 	and.w	r3, r3, #12
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	d017      	beq.n	8003b12 <HAL_RCC_OscConfig+0x16e>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8003ae2:	4b4d      	ldr	r3, [pc, #308]	@ (8003c18 <HAL_RCC_OscConfig+0x274>)
 8003ae4:	689b      	ldr	r3, [r3, #8]
 8003ae6:	f003 030c 	and.w	r3, r3, #12
        || \
 8003aea:	2b08      	cmp	r3, #8
 8003aec:	d105      	bne.n	8003afa <HAL_RCC_OscConfig+0x156>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8003aee:	4b4a      	ldr	r3, [pc, #296]	@ (8003c18 <HAL_RCC_OscConfig+0x274>)
 8003af0:	685b      	ldr	r3, [r3, #4]
 8003af2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	d00b      	beq.n	8003b12 <HAL_RCC_OscConfig+0x16e>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003afa:	4b47      	ldr	r3, [pc, #284]	@ (8003c18 <HAL_RCC_OscConfig+0x274>)
 8003afc:	689b      	ldr	r3, [r3, #8]
 8003afe:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8003b02:	2b0c      	cmp	r3, #12
 8003b04:	d11c      	bne.n	8003b40 <HAL_RCC_OscConfig+0x19c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003b06:	4b44      	ldr	r3, [pc, #272]	@ (8003c18 <HAL_RCC_OscConfig+0x274>)
 8003b08:	685b      	ldr	r3, [r3, #4]
 8003b0a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	d116      	bne.n	8003b40 <HAL_RCC_OscConfig+0x19c>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003b12:	4b41      	ldr	r3, [pc, #260]	@ (8003c18 <HAL_RCC_OscConfig+0x274>)
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	f003 0302 	and.w	r3, r3, #2
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	d005      	beq.n	8003b2a <HAL_RCC_OscConfig+0x186>
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	68db      	ldr	r3, [r3, #12]
 8003b22:	2b01      	cmp	r3, #1
 8003b24:	d001      	beq.n	8003b2a <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8003b26:	2301      	movs	r3, #1
 8003b28:	e1d3      	b.n	8003ed2 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003b2a:	4b3b      	ldr	r3, [pc, #236]	@ (8003c18 <HAL_RCC_OscConfig+0x274>)
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	691b      	ldr	r3, [r3, #16]
 8003b36:	00db      	lsls	r3, r3, #3
 8003b38:	4937      	ldr	r1, [pc, #220]	@ (8003c18 <HAL_RCC_OscConfig+0x274>)
 8003b3a:	4313      	orrs	r3, r2
 8003b3c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003b3e:	e03a      	b.n	8003bb6 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	68db      	ldr	r3, [r3, #12]
 8003b44:	2b00      	cmp	r3, #0
 8003b46:	d020      	beq.n	8003b8a <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003b48:	4b34      	ldr	r3, [pc, #208]	@ (8003c1c <HAL_RCC_OscConfig+0x278>)
 8003b4a:	2201      	movs	r2, #1
 8003b4c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b4e:	f7fe f9bf 	bl	8001ed0 <HAL_GetTick>
 8003b52:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003b54:	e008      	b.n	8003b68 <HAL_RCC_OscConfig+0x1c4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003b56:	f7fe f9bb 	bl	8001ed0 <HAL_GetTick>
 8003b5a:	4602      	mov	r2, r0
 8003b5c:	693b      	ldr	r3, [r7, #16]
 8003b5e:	1ad3      	subs	r3, r2, r3
 8003b60:	2b02      	cmp	r3, #2
 8003b62:	d901      	bls.n	8003b68 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8003b64:	2303      	movs	r3, #3
 8003b66:	e1b4      	b.n	8003ed2 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003b68:	4b2b      	ldr	r3, [pc, #172]	@ (8003c18 <HAL_RCC_OscConfig+0x274>)
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	f003 0302 	and.w	r3, r3, #2
 8003b70:	2b00      	cmp	r3, #0
 8003b72:	d0f0      	beq.n	8003b56 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003b74:	4b28      	ldr	r3, [pc, #160]	@ (8003c18 <HAL_RCC_OscConfig+0x274>)
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	691b      	ldr	r3, [r3, #16]
 8003b80:	00db      	lsls	r3, r3, #3
 8003b82:	4925      	ldr	r1, [pc, #148]	@ (8003c18 <HAL_RCC_OscConfig+0x274>)
 8003b84:	4313      	orrs	r3, r2
 8003b86:	600b      	str	r3, [r1, #0]
 8003b88:	e015      	b.n	8003bb6 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003b8a:	4b24      	ldr	r3, [pc, #144]	@ (8003c1c <HAL_RCC_OscConfig+0x278>)
 8003b8c:	2200      	movs	r2, #0
 8003b8e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b90:	f7fe f99e 	bl	8001ed0 <HAL_GetTick>
 8003b94:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003b96:	e008      	b.n	8003baa <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003b98:	f7fe f99a 	bl	8001ed0 <HAL_GetTick>
 8003b9c:	4602      	mov	r2, r0
 8003b9e:	693b      	ldr	r3, [r7, #16]
 8003ba0:	1ad3      	subs	r3, r2, r3
 8003ba2:	2b02      	cmp	r3, #2
 8003ba4:	d901      	bls.n	8003baa <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8003ba6:	2303      	movs	r3, #3
 8003ba8:	e193      	b.n	8003ed2 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003baa:	4b1b      	ldr	r3, [pc, #108]	@ (8003c18 <HAL_RCC_OscConfig+0x274>)
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	f003 0302 	and.w	r3, r3, #2
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	d1f0      	bne.n	8003b98 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	f003 0308 	and.w	r3, r3, #8
 8003bbe:	2b00      	cmp	r3, #0
 8003bc0:	d036      	beq.n	8003c30 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	695b      	ldr	r3, [r3, #20]
 8003bc6:	2b00      	cmp	r3, #0
 8003bc8:	d016      	beq.n	8003bf8 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003bca:	4b15      	ldr	r3, [pc, #84]	@ (8003c20 <HAL_RCC_OscConfig+0x27c>)
 8003bcc:	2201      	movs	r2, #1
 8003bce:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003bd0:	f7fe f97e 	bl	8001ed0 <HAL_GetTick>
 8003bd4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003bd6:	e008      	b.n	8003bea <HAL_RCC_OscConfig+0x246>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003bd8:	f7fe f97a 	bl	8001ed0 <HAL_GetTick>
 8003bdc:	4602      	mov	r2, r0
 8003bde:	693b      	ldr	r3, [r7, #16]
 8003be0:	1ad3      	subs	r3, r2, r3
 8003be2:	2b02      	cmp	r3, #2
 8003be4:	d901      	bls.n	8003bea <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8003be6:	2303      	movs	r3, #3
 8003be8:	e173      	b.n	8003ed2 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003bea:	4b0b      	ldr	r3, [pc, #44]	@ (8003c18 <HAL_RCC_OscConfig+0x274>)
 8003bec:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003bee:	f003 0302 	and.w	r3, r3, #2
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	d0f0      	beq.n	8003bd8 <HAL_RCC_OscConfig+0x234>
 8003bf6:	e01b      	b.n	8003c30 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003bf8:	4b09      	ldr	r3, [pc, #36]	@ (8003c20 <HAL_RCC_OscConfig+0x27c>)
 8003bfa:	2200      	movs	r2, #0
 8003bfc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003bfe:	f7fe f967 	bl	8001ed0 <HAL_GetTick>
 8003c02:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003c04:	e00e      	b.n	8003c24 <HAL_RCC_OscConfig+0x280>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003c06:	f7fe f963 	bl	8001ed0 <HAL_GetTick>
 8003c0a:	4602      	mov	r2, r0
 8003c0c:	693b      	ldr	r3, [r7, #16]
 8003c0e:	1ad3      	subs	r3, r2, r3
 8003c10:	2b02      	cmp	r3, #2
 8003c12:	d907      	bls.n	8003c24 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8003c14:	2303      	movs	r3, #3
 8003c16:	e15c      	b.n	8003ed2 <HAL_RCC_OscConfig+0x52e>
 8003c18:	40023800 	.word	0x40023800
 8003c1c:	42470000 	.word	0x42470000
 8003c20:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003c24:	4b8a      	ldr	r3, [pc, #552]	@ (8003e50 <HAL_RCC_OscConfig+0x4ac>)
 8003c26:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003c28:	f003 0302 	and.w	r3, r3, #2
 8003c2c:	2b00      	cmp	r3, #0
 8003c2e:	d1ea      	bne.n	8003c06 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	f003 0304 	and.w	r3, r3, #4
 8003c38:	2b00      	cmp	r3, #0
 8003c3a:	f000 8097 	beq.w	8003d6c <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003c3e:	2300      	movs	r3, #0
 8003c40:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003c42:	4b83      	ldr	r3, [pc, #524]	@ (8003e50 <HAL_RCC_OscConfig+0x4ac>)
 8003c44:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c46:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	d10f      	bne.n	8003c6e <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003c4e:	2300      	movs	r3, #0
 8003c50:	60bb      	str	r3, [r7, #8]
 8003c52:	4b7f      	ldr	r3, [pc, #508]	@ (8003e50 <HAL_RCC_OscConfig+0x4ac>)
 8003c54:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c56:	4a7e      	ldr	r2, [pc, #504]	@ (8003e50 <HAL_RCC_OscConfig+0x4ac>)
 8003c58:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003c5c:	6413      	str	r3, [r2, #64]	@ 0x40
 8003c5e:	4b7c      	ldr	r3, [pc, #496]	@ (8003e50 <HAL_RCC_OscConfig+0x4ac>)
 8003c60:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c62:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003c66:	60bb      	str	r3, [r7, #8]
 8003c68:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003c6a:	2301      	movs	r3, #1
 8003c6c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003c6e:	4b79      	ldr	r3, [pc, #484]	@ (8003e54 <HAL_RCC_OscConfig+0x4b0>)
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	d118      	bne.n	8003cac <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003c7a:	4b76      	ldr	r3, [pc, #472]	@ (8003e54 <HAL_RCC_OscConfig+0x4b0>)
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	4a75      	ldr	r2, [pc, #468]	@ (8003e54 <HAL_RCC_OscConfig+0x4b0>)
 8003c80:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003c84:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003c86:	f7fe f923 	bl	8001ed0 <HAL_GetTick>
 8003c8a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003c8c:	e008      	b.n	8003ca0 <HAL_RCC_OscConfig+0x2fc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003c8e:	f7fe f91f 	bl	8001ed0 <HAL_GetTick>
 8003c92:	4602      	mov	r2, r0
 8003c94:	693b      	ldr	r3, [r7, #16]
 8003c96:	1ad3      	subs	r3, r2, r3
 8003c98:	2b02      	cmp	r3, #2
 8003c9a:	d901      	bls.n	8003ca0 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8003c9c:	2303      	movs	r3, #3
 8003c9e:	e118      	b.n	8003ed2 <HAL_RCC_OscConfig+0x52e>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003ca0:	4b6c      	ldr	r3, [pc, #432]	@ (8003e54 <HAL_RCC_OscConfig+0x4b0>)
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003ca8:	2b00      	cmp	r3, #0
 8003caa:	d0f0      	beq.n	8003c8e <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	689b      	ldr	r3, [r3, #8]
 8003cb0:	2b01      	cmp	r3, #1
 8003cb2:	d106      	bne.n	8003cc2 <HAL_RCC_OscConfig+0x31e>
 8003cb4:	4b66      	ldr	r3, [pc, #408]	@ (8003e50 <HAL_RCC_OscConfig+0x4ac>)
 8003cb6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003cb8:	4a65      	ldr	r2, [pc, #404]	@ (8003e50 <HAL_RCC_OscConfig+0x4ac>)
 8003cba:	f043 0301 	orr.w	r3, r3, #1
 8003cbe:	6713      	str	r3, [r2, #112]	@ 0x70
 8003cc0:	e01c      	b.n	8003cfc <HAL_RCC_OscConfig+0x358>
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	689b      	ldr	r3, [r3, #8]
 8003cc6:	2b05      	cmp	r3, #5
 8003cc8:	d10c      	bne.n	8003ce4 <HAL_RCC_OscConfig+0x340>
 8003cca:	4b61      	ldr	r3, [pc, #388]	@ (8003e50 <HAL_RCC_OscConfig+0x4ac>)
 8003ccc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003cce:	4a60      	ldr	r2, [pc, #384]	@ (8003e50 <HAL_RCC_OscConfig+0x4ac>)
 8003cd0:	f043 0304 	orr.w	r3, r3, #4
 8003cd4:	6713      	str	r3, [r2, #112]	@ 0x70
 8003cd6:	4b5e      	ldr	r3, [pc, #376]	@ (8003e50 <HAL_RCC_OscConfig+0x4ac>)
 8003cd8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003cda:	4a5d      	ldr	r2, [pc, #372]	@ (8003e50 <HAL_RCC_OscConfig+0x4ac>)
 8003cdc:	f043 0301 	orr.w	r3, r3, #1
 8003ce0:	6713      	str	r3, [r2, #112]	@ 0x70
 8003ce2:	e00b      	b.n	8003cfc <HAL_RCC_OscConfig+0x358>
 8003ce4:	4b5a      	ldr	r3, [pc, #360]	@ (8003e50 <HAL_RCC_OscConfig+0x4ac>)
 8003ce6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003ce8:	4a59      	ldr	r2, [pc, #356]	@ (8003e50 <HAL_RCC_OscConfig+0x4ac>)
 8003cea:	f023 0301 	bic.w	r3, r3, #1
 8003cee:	6713      	str	r3, [r2, #112]	@ 0x70
 8003cf0:	4b57      	ldr	r3, [pc, #348]	@ (8003e50 <HAL_RCC_OscConfig+0x4ac>)
 8003cf2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003cf4:	4a56      	ldr	r2, [pc, #344]	@ (8003e50 <HAL_RCC_OscConfig+0x4ac>)
 8003cf6:	f023 0304 	bic.w	r3, r3, #4
 8003cfa:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	689b      	ldr	r3, [r3, #8]
 8003d00:	2b00      	cmp	r3, #0
 8003d02:	d015      	beq.n	8003d30 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003d04:	f7fe f8e4 	bl	8001ed0 <HAL_GetTick>
 8003d08:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003d0a:	e00a      	b.n	8003d22 <HAL_RCC_OscConfig+0x37e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003d0c:	f7fe f8e0 	bl	8001ed0 <HAL_GetTick>
 8003d10:	4602      	mov	r2, r0
 8003d12:	693b      	ldr	r3, [r7, #16]
 8003d14:	1ad3      	subs	r3, r2, r3
 8003d16:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003d1a:	4293      	cmp	r3, r2
 8003d1c:	d901      	bls.n	8003d22 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8003d1e:	2303      	movs	r3, #3
 8003d20:	e0d7      	b.n	8003ed2 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003d22:	4b4b      	ldr	r3, [pc, #300]	@ (8003e50 <HAL_RCC_OscConfig+0x4ac>)
 8003d24:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003d26:	f003 0302 	and.w	r3, r3, #2
 8003d2a:	2b00      	cmp	r3, #0
 8003d2c:	d0ee      	beq.n	8003d0c <HAL_RCC_OscConfig+0x368>
 8003d2e:	e014      	b.n	8003d5a <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003d30:	f7fe f8ce 	bl	8001ed0 <HAL_GetTick>
 8003d34:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003d36:	e00a      	b.n	8003d4e <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003d38:	f7fe f8ca 	bl	8001ed0 <HAL_GetTick>
 8003d3c:	4602      	mov	r2, r0
 8003d3e:	693b      	ldr	r3, [r7, #16]
 8003d40:	1ad3      	subs	r3, r2, r3
 8003d42:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003d46:	4293      	cmp	r3, r2
 8003d48:	d901      	bls.n	8003d4e <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8003d4a:	2303      	movs	r3, #3
 8003d4c:	e0c1      	b.n	8003ed2 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003d4e:	4b40      	ldr	r3, [pc, #256]	@ (8003e50 <HAL_RCC_OscConfig+0x4ac>)
 8003d50:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003d52:	f003 0302 	and.w	r3, r3, #2
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	d1ee      	bne.n	8003d38 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003d5a:	7dfb      	ldrb	r3, [r7, #23]
 8003d5c:	2b01      	cmp	r3, #1
 8003d5e:	d105      	bne.n	8003d6c <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003d60:	4b3b      	ldr	r3, [pc, #236]	@ (8003e50 <HAL_RCC_OscConfig+0x4ac>)
 8003d62:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d64:	4a3a      	ldr	r2, [pc, #232]	@ (8003e50 <HAL_RCC_OscConfig+0x4ac>)
 8003d66:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003d6a:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	699b      	ldr	r3, [r3, #24]
 8003d70:	2b00      	cmp	r3, #0
 8003d72:	f000 80ad 	beq.w	8003ed0 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003d76:	4b36      	ldr	r3, [pc, #216]	@ (8003e50 <HAL_RCC_OscConfig+0x4ac>)
 8003d78:	689b      	ldr	r3, [r3, #8]
 8003d7a:	f003 030c 	and.w	r3, r3, #12
 8003d7e:	2b08      	cmp	r3, #8
 8003d80:	d060      	beq.n	8003e44 <HAL_RCC_OscConfig+0x4a0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	699b      	ldr	r3, [r3, #24]
 8003d86:	2b02      	cmp	r3, #2
 8003d88:	d145      	bne.n	8003e16 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003d8a:	4b33      	ldr	r3, [pc, #204]	@ (8003e58 <HAL_RCC_OscConfig+0x4b4>)
 8003d8c:	2200      	movs	r2, #0
 8003d8e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d90:	f7fe f89e 	bl	8001ed0 <HAL_GetTick>
 8003d94:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003d96:	e008      	b.n	8003daa <HAL_RCC_OscConfig+0x406>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003d98:	f7fe f89a 	bl	8001ed0 <HAL_GetTick>
 8003d9c:	4602      	mov	r2, r0
 8003d9e:	693b      	ldr	r3, [r7, #16]
 8003da0:	1ad3      	subs	r3, r2, r3
 8003da2:	2b02      	cmp	r3, #2
 8003da4:	d901      	bls.n	8003daa <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8003da6:	2303      	movs	r3, #3
 8003da8:	e093      	b.n	8003ed2 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003daa:	4b29      	ldr	r3, [pc, #164]	@ (8003e50 <HAL_RCC_OscConfig+0x4ac>)
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	d1f0      	bne.n	8003d98 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	69da      	ldr	r2, [r3, #28]
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	6a1b      	ldr	r3, [r3, #32]
 8003dbe:	431a      	orrs	r2, r3
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003dc4:	019b      	lsls	r3, r3, #6
 8003dc6:	431a      	orrs	r2, r3
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003dcc:	085b      	lsrs	r3, r3, #1
 8003dce:	3b01      	subs	r3, #1
 8003dd0:	041b      	lsls	r3, r3, #16
 8003dd2:	431a      	orrs	r2, r3
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003dd8:	061b      	lsls	r3, r3, #24
 8003dda:	431a      	orrs	r2, r3
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003de0:	071b      	lsls	r3, r3, #28
 8003de2:	491b      	ldr	r1, [pc, #108]	@ (8003e50 <HAL_RCC_OscConfig+0x4ac>)
 8003de4:	4313      	orrs	r3, r2
 8003de6:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003de8:	4b1b      	ldr	r3, [pc, #108]	@ (8003e58 <HAL_RCC_OscConfig+0x4b4>)
 8003dea:	2201      	movs	r2, #1
 8003dec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003dee:	f7fe f86f 	bl	8001ed0 <HAL_GetTick>
 8003df2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003df4:	e008      	b.n	8003e08 <HAL_RCC_OscConfig+0x464>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003df6:	f7fe f86b 	bl	8001ed0 <HAL_GetTick>
 8003dfa:	4602      	mov	r2, r0
 8003dfc:	693b      	ldr	r3, [r7, #16]
 8003dfe:	1ad3      	subs	r3, r2, r3
 8003e00:	2b02      	cmp	r3, #2
 8003e02:	d901      	bls.n	8003e08 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8003e04:	2303      	movs	r3, #3
 8003e06:	e064      	b.n	8003ed2 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003e08:	4b11      	ldr	r3, [pc, #68]	@ (8003e50 <HAL_RCC_OscConfig+0x4ac>)
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003e10:	2b00      	cmp	r3, #0
 8003e12:	d0f0      	beq.n	8003df6 <HAL_RCC_OscConfig+0x452>
 8003e14:	e05c      	b.n	8003ed0 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003e16:	4b10      	ldr	r3, [pc, #64]	@ (8003e58 <HAL_RCC_OscConfig+0x4b4>)
 8003e18:	2200      	movs	r2, #0
 8003e1a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e1c:	f7fe f858 	bl	8001ed0 <HAL_GetTick>
 8003e20:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003e22:	e008      	b.n	8003e36 <HAL_RCC_OscConfig+0x492>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003e24:	f7fe f854 	bl	8001ed0 <HAL_GetTick>
 8003e28:	4602      	mov	r2, r0
 8003e2a:	693b      	ldr	r3, [r7, #16]
 8003e2c:	1ad3      	subs	r3, r2, r3
 8003e2e:	2b02      	cmp	r3, #2
 8003e30:	d901      	bls.n	8003e36 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8003e32:	2303      	movs	r3, #3
 8003e34:	e04d      	b.n	8003ed2 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003e36:	4b06      	ldr	r3, [pc, #24]	@ (8003e50 <HAL_RCC_OscConfig+0x4ac>)
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	d1f0      	bne.n	8003e24 <HAL_RCC_OscConfig+0x480>
 8003e42:	e045      	b.n	8003ed0 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	699b      	ldr	r3, [r3, #24]
 8003e48:	2b01      	cmp	r3, #1
 8003e4a:	d107      	bne.n	8003e5c <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8003e4c:	2301      	movs	r3, #1
 8003e4e:	e040      	b.n	8003ed2 <HAL_RCC_OscConfig+0x52e>
 8003e50:	40023800 	.word	0x40023800
 8003e54:	40007000 	.word	0x40007000
 8003e58:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003e5c:	4b1f      	ldr	r3, [pc, #124]	@ (8003edc <HAL_RCC_OscConfig+0x538>)
 8003e5e:	685b      	ldr	r3, [r3, #4]
 8003e60:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	699b      	ldr	r3, [r3, #24]
 8003e66:	2b01      	cmp	r3, #1
 8003e68:	d030      	beq.n	8003ecc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003e6a:	68fb      	ldr	r3, [r7, #12]
 8003e6c:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003e74:	429a      	cmp	r2, r3
 8003e76:	d129      	bne.n	8003ecc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003e82:	429a      	cmp	r2, r3
 8003e84:	d122      	bne.n	8003ecc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003e86:	68fa      	ldr	r2, [r7, #12]
 8003e88:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8003e8c:	4013      	ands	r3, r2
 8003e8e:	687a      	ldr	r2, [r7, #4]
 8003e90:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8003e92:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003e94:	4293      	cmp	r3, r2
 8003e96:	d119      	bne.n	8003ecc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003e98:	68fb      	ldr	r3, [r7, #12]
 8003e9a:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003ea2:	085b      	lsrs	r3, r3, #1
 8003ea4:	3b01      	subs	r3, #1
 8003ea6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003ea8:	429a      	cmp	r2, r3
 8003eaa:	d10f      	bne.n	8003ecc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003eb6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003eb8:	429a      	cmp	r2, r3
 8003eba:	d107      	bne.n	8003ecc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003ec6:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003ec8:	429a      	cmp	r2, r3
 8003eca:	d001      	beq.n	8003ed0 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8003ecc:	2301      	movs	r3, #1
 8003ece:	e000      	b.n	8003ed2 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8003ed0:	2300      	movs	r3, #0
}
 8003ed2:	4618      	mov	r0, r3
 8003ed4:	3718      	adds	r7, #24
 8003ed6:	46bd      	mov	sp, r7
 8003ed8:	bd80      	pop	{r7, pc}
 8003eda:	bf00      	nop
 8003edc:	40023800 	.word	0x40023800

08003ee0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003ee0:	b580      	push	{r7, lr}
 8003ee2:	b082      	sub	sp, #8
 8003ee4:	af00      	add	r7, sp, #0
 8003ee6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	d101      	bne.n	8003ef2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003eee:	2301      	movs	r3, #1
 8003ef0:	e041      	b.n	8003f76 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003ef8:	b2db      	uxtb	r3, r3
 8003efa:	2b00      	cmp	r3, #0
 8003efc:	d106      	bne.n	8003f0c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	2200      	movs	r2, #0
 8003f02:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003f06:	6878      	ldr	r0, [r7, #4]
 8003f08:	f7fd fe3a 	bl	8001b80 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	2202      	movs	r2, #2
 8003f10:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	681a      	ldr	r2, [r3, #0]
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	3304      	adds	r3, #4
 8003f1c:	4619      	mov	r1, r3
 8003f1e:	4610      	mov	r0, r2
 8003f20:	f000 fd3c 	bl	800499c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	2201      	movs	r2, #1
 8003f28:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	2201      	movs	r2, #1
 8003f30:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	2201      	movs	r2, #1
 8003f38:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	2201      	movs	r2, #1
 8003f40:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	2201      	movs	r2, #1
 8003f48:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	2201      	movs	r2, #1
 8003f50:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	2201      	movs	r2, #1
 8003f58:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	2201      	movs	r2, #1
 8003f60:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	2201      	movs	r2, #1
 8003f68:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	2201      	movs	r2, #1
 8003f70:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003f74:	2300      	movs	r3, #0
}
 8003f76:	4618      	mov	r0, r3
 8003f78:	3708      	adds	r7, #8
 8003f7a:	46bd      	mov	sp, r7
 8003f7c:	bd80      	pop	{r7, pc}

08003f7e <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 8003f7e:	b580      	push	{r7, lr}
 8003f80:	b082      	sub	sp, #8
 8003f82:	af00      	add	r7, sp, #0
 8003f84:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	2b00      	cmp	r3, #0
 8003f8a:	d101      	bne.n	8003f90 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 8003f8c:	2301      	movs	r3, #1
 8003f8e:	e041      	b.n	8004014 <HAL_TIM_OC_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003f96:	b2db      	uxtb	r3, r3
 8003f98:	2b00      	cmp	r3, #0
 8003f9a:	d106      	bne.n	8003faa <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	2200      	movs	r2, #0
 8003fa0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 8003fa4:	6878      	ldr	r0, [r7, #4]
 8003fa6:	f000 f839 	bl	800401c <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	2202      	movs	r2, #2
 8003fae:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	681a      	ldr	r2, [r3, #0]
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	3304      	adds	r3, #4
 8003fba:	4619      	mov	r1, r3
 8003fbc:	4610      	mov	r0, r2
 8003fbe:	f000 fced 	bl	800499c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	2201      	movs	r2, #1
 8003fc6:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	2201      	movs	r2, #1
 8003fce:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	2201      	movs	r2, #1
 8003fd6:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	2201      	movs	r2, #1
 8003fde:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	2201      	movs	r2, #1
 8003fe6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	2201      	movs	r2, #1
 8003fee:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	2201      	movs	r2, #1
 8003ff6:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	2201      	movs	r2, #1
 8003ffe:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	2201      	movs	r2, #1
 8004006:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	2201      	movs	r2, #1
 800400e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004012:	2300      	movs	r3, #0
}
 8004014:	4618      	mov	r0, r3
 8004016:	3708      	adds	r7, #8
 8004018:	46bd      	mov	sp, r7
 800401a:	bd80      	pop	{r7, pc}

0800401c <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 800401c:	b480      	push	{r7}
 800401e:	b083      	sub	sp, #12
 8004020:	af00      	add	r7, sp, #0
 8004022:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 8004024:	bf00      	nop
 8004026:	370c      	adds	r7, #12
 8004028:	46bd      	mov	sp, r7
 800402a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800402e:	4770      	bx	lr

08004030 <HAL_TIM_OC_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004030:	b580      	push	{r7, lr}
 8004032:	b084      	sub	sp, #16
 8004034:	af00      	add	r7, sp, #0
 8004036:	6078      	str	r0, [r7, #4]
 8004038:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800403a:	683b      	ldr	r3, [r7, #0]
 800403c:	2b00      	cmp	r3, #0
 800403e:	d109      	bne.n	8004054 <HAL_TIM_OC_Start+0x24>
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004046:	b2db      	uxtb	r3, r3
 8004048:	2b01      	cmp	r3, #1
 800404a:	bf14      	ite	ne
 800404c:	2301      	movne	r3, #1
 800404e:	2300      	moveq	r3, #0
 8004050:	b2db      	uxtb	r3, r3
 8004052:	e022      	b.n	800409a <HAL_TIM_OC_Start+0x6a>
 8004054:	683b      	ldr	r3, [r7, #0]
 8004056:	2b04      	cmp	r3, #4
 8004058:	d109      	bne.n	800406e <HAL_TIM_OC_Start+0x3e>
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8004060:	b2db      	uxtb	r3, r3
 8004062:	2b01      	cmp	r3, #1
 8004064:	bf14      	ite	ne
 8004066:	2301      	movne	r3, #1
 8004068:	2300      	moveq	r3, #0
 800406a:	b2db      	uxtb	r3, r3
 800406c:	e015      	b.n	800409a <HAL_TIM_OC_Start+0x6a>
 800406e:	683b      	ldr	r3, [r7, #0]
 8004070:	2b08      	cmp	r3, #8
 8004072:	d109      	bne.n	8004088 <HAL_TIM_OC_Start+0x58>
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800407a:	b2db      	uxtb	r3, r3
 800407c:	2b01      	cmp	r3, #1
 800407e:	bf14      	ite	ne
 8004080:	2301      	movne	r3, #1
 8004082:	2300      	moveq	r3, #0
 8004084:	b2db      	uxtb	r3, r3
 8004086:	e008      	b.n	800409a <HAL_TIM_OC_Start+0x6a>
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800408e:	b2db      	uxtb	r3, r3
 8004090:	2b01      	cmp	r3, #1
 8004092:	bf14      	ite	ne
 8004094:	2301      	movne	r3, #1
 8004096:	2300      	moveq	r3, #0
 8004098:	b2db      	uxtb	r3, r3
 800409a:	2b00      	cmp	r3, #0
 800409c:	d001      	beq.n	80040a2 <HAL_TIM_OC_Start+0x72>
  {
    return HAL_ERROR;
 800409e:	2301      	movs	r3, #1
 80040a0:	e07c      	b.n	800419c <HAL_TIM_OC_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80040a2:	683b      	ldr	r3, [r7, #0]
 80040a4:	2b00      	cmp	r3, #0
 80040a6:	d104      	bne.n	80040b2 <HAL_TIM_OC_Start+0x82>
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	2202      	movs	r2, #2
 80040ac:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80040b0:	e013      	b.n	80040da <HAL_TIM_OC_Start+0xaa>
 80040b2:	683b      	ldr	r3, [r7, #0]
 80040b4:	2b04      	cmp	r3, #4
 80040b6:	d104      	bne.n	80040c2 <HAL_TIM_OC_Start+0x92>
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	2202      	movs	r2, #2
 80040bc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80040c0:	e00b      	b.n	80040da <HAL_TIM_OC_Start+0xaa>
 80040c2:	683b      	ldr	r3, [r7, #0]
 80040c4:	2b08      	cmp	r3, #8
 80040c6:	d104      	bne.n	80040d2 <HAL_TIM_OC_Start+0xa2>
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	2202      	movs	r2, #2
 80040cc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80040d0:	e003      	b.n	80040da <HAL_TIM_OC_Start+0xaa>
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	2202      	movs	r2, #2
 80040d6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Output compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	2201      	movs	r2, #1
 80040e0:	6839      	ldr	r1, [r7, #0]
 80040e2:	4618      	mov	r0, r3
 80040e4:	f000 ffe1 	bl	80050aa <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	4a2d      	ldr	r2, [pc, #180]	@ (80041a4 <HAL_TIM_OC_Start+0x174>)
 80040ee:	4293      	cmp	r3, r2
 80040f0:	d004      	beq.n	80040fc <HAL_TIM_OC_Start+0xcc>
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	4a2c      	ldr	r2, [pc, #176]	@ (80041a8 <HAL_TIM_OC_Start+0x178>)
 80040f8:	4293      	cmp	r3, r2
 80040fa:	d101      	bne.n	8004100 <HAL_TIM_OC_Start+0xd0>
 80040fc:	2301      	movs	r3, #1
 80040fe:	e000      	b.n	8004102 <HAL_TIM_OC_Start+0xd2>
 8004100:	2300      	movs	r3, #0
 8004102:	2b00      	cmp	r3, #0
 8004104:	d007      	beq.n	8004116 <HAL_TIM_OC_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8004114:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	4a22      	ldr	r2, [pc, #136]	@ (80041a4 <HAL_TIM_OC_Start+0x174>)
 800411c:	4293      	cmp	r3, r2
 800411e:	d022      	beq.n	8004166 <HAL_TIM_OC_Start+0x136>
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004128:	d01d      	beq.n	8004166 <HAL_TIM_OC_Start+0x136>
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	4a1f      	ldr	r2, [pc, #124]	@ (80041ac <HAL_TIM_OC_Start+0x17c>)
 8004130:	4293      	cmp	r3, r2
 8004132:	d018      	beq.n	8004166 <HAL_TIM_OC_Start+0x136>
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	4a1d      	ldr	r2, [pc, #116]	@ (80041b0 <HAL_TIM_OC_Start+0x180>)
 800413a:	4293      	cmp	r3, r2
 800413c:	d013      	beq.n	8004166 <HAL_TIM_OC_Start+0x136>
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	4a1c      	ldr	r2, [pc, #112]	@ (80041b4 <HAL_TIM_OC_Start+0x184>)
 8004144:	4293      	cmp	r3, r2
 8004146:	d00e      	beq.n	8004166 <HAL_TIM_OC_Start+0x136>
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	4a16      	ldr	r2, [pc, #88]	@ (80041a8 <HAL_TIM_OC_Start+0x178>)
 800414e:	4293      	cmp	r3, r2
 8004150:	d009      	beq.n	8004166 <HAL_TIM_OC_Start+0x136>
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	4a18      	ldr	r2, [pc, #96]	@ (80041b8 <HAL_TIM_OC_Start+0x188>)
 8004158:	4293      	cmp	r3, r2
 800415a:	d004      	beq.n	8004166 <HAL_TIM_OC_Start+0x136>
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	4a16      	ldr	r2, [pc, #88]	@ (80041bc <HAL_TIM_OC_Start+0x18c>)
 8004162:	4293      	cmp	r3, r2
 8004164:	d111      	bne.n	800418a <HAL_TIM_OC_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	689b      	ldr	r3, [r3, #8]
 800416c:	f003 0307 	and.w	r3, r3, #7
 8004170:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004172:	68fb      	ldr	r3, [r7, #12]
 8004174:	2b06      	cmp	r3, #6
 8004176:	d010      	beq.n	800419a <HAL_TIM_OC_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	681a      	ldr	r2, [r3, #0]
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	f042 0201 	orr.w	r2, r2, #1
 8004186:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004188:	e007      	b.n	800419a <HAL_TIM_OC_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	681a      	ldr	r2, [r3, #0]
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	f042 0201 	orr.w	r2, r2, #1
 8004198:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800419a:	2300      	movs	r3, #0
}
 800419c:	4618      	mov	r0, r3
 800419e:	3710      	adds	r7, #16
 80041a0:	46bd      	mov	sp, r7
 80041a2:	bd80      	pop	{r7, pc}
 80041a4:	40010000 	.word	0x40010000
 80041a8:	40010400 	.word	0x40010400
 80041ac:	40000400 	.word	0x40000400
 80041b0:	40000800 	.word	0x40000800
 80041b4:	40000c00 	.word	0x40000c00
 80041b8:	40014000 	.word	0x40014000
 80041bc:	40001800 	.word	0x40001800

080041c0 <HAL_TIM_OC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80041c0:	b580      	push	{r7, lr}
 80041c2:	b084      	sub	sp, #16
 80041c4:	af00      	add	r7, sp, #0
 80041c6:	6078      	str	r0, [r7, #4]
 80041c8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80041ca:	2300      	movs	r3, #0
 80041cc:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80041ce:	683b      	ldr	r3, [r7, #0]
 80041d0:	2b00      	cmp	r3, #0
 80041d2:	d109      	bne.n	80041e8 <HAL_TIM_OC_Start_IT+0x28>
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80041da:	b2db      	uxtb	r3, r3
 80041dc:	2b01      	cmp	r3, #1
 80041de:	bf14      	ite	ne
 80041e0:	2301      	movne	r3, #1
 80041e2:	2300      	moveq	r3, #0
 80041e4:	b2db      	uxtb	r3, r3
 80041e6:	e022      	b.n	800422e <HAL_TIM_OC_Start_IT+0x6e>
 80041e8:	683b      	ldr	r3, [r7, #0]
 80041ea:	2b04      	cmp	r3, #4
 80041ec:	d109      	bne.n	8004202 <HAL_TIM_OC_Start_IT+0x42>
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80041f4:	b2db      	uxtb	r3, r3
 80041f6:	2b01      	cmp	r3, #1
 80041f8:	bf14      	ite	ne
 80041fa:	2301      	movne	r3, #1
 80041fc:	2300      	moveq	r3, #0
 80041fe:	b2db      	uxtb	r3, r3
 8004200:	e015      	b.n	800422e <HAL_TIM_OC_Start_IT+0x6e>
 8004202:	683b      	ldr	r3, [r7, #0]
 8004204:	2b08      	cmp	r3, #8
 8004206:	d109      	bne.n	800421c <HAL_TIM_OC_Start_IT+0x5c>
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800420e:	b2db      	uxtb	r3, r3
 8004210:	2b01      	cmp	r3, #1
 8004212:	bf14      	ite	ne
 8004214:	2301      	movne	r3, #1
 8004216:	2300      	moveq	r3, #0
 8004218:	b2db      	uxtb	r3, r3
 800421a:	e008      	b.n	800422e <HAL_TIM_OC_Start_IT+0x6e>
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004222:	b2db      	uxtb	r3, r3
 8004224:	2b01      	cmp	r3, #1
 8004226:	bf14      	ite	ne
 8004228:	2301      	movne	r3, #1
 800422a:	2300      	moveq	r3, #0
 800422c:	b2db      	uxtb	r3, r3
 800422e:	2b00      	cmp	r3, #0
 8004230:	d001      	beq.n	8004236 <HAL_TIM_OC_Start_IT+0x76>
  {
    return HAL_ERROR;
 8004232:	2301      	movs	r3, #1
 8004234:	e0c7      	b.n	80043c6 <HAL_TIM_OC_Start_IT+0x206>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004236:	683b      	ldr	r3, [r7, #0]
 8004238:	2b00      	cmp	r3, #0
 800423a:	d104      	bne.n	8004246 <HAL_TIM_OC_Start_IT+0x86>
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	2202      	movs	r2, #2
 8004240:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004244:	e013      	b.n	800426e <HAL_TIM_OC_Start_IT+0xae>
 8004246:	683b      	ldr	r3, [r7, #0]
 8004248:	2b04      	cmp	r3, #4
 800424a:	d104      	bne.n	8004256 <HAL_TIM_OC_Start_IT+0x96>
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	2202      	movs	r2, #2
 8004250:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004254:	e00b      	b.n	800426e <HAL_TIM_OC_Start_IT+0xae>
 8004256:	683b      	ldr	r3, [r7, #0]
 8004258:	2b08      	cmp	r3, #8
 800425a:	d104      	bne.n	8004266 <HAL_TIM_OC_Start_IT+0xa6>
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	2202      	movs	r2, #2
 8004260:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004264:	e003      	b.n	800426e <HAL_TIM_OC_Start_IT+0xae>
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	2202      	movs	r2, #2
 800426a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  switch (Channel)
 800426e:	683b      	ldr	r3, [r7, #0]
 8004270:	2b0c      	cmp	r3, #12
 8004272:	d841      	bhi.n	80042f8 <HAL_TIM_OC_Start_IT+0x138>
 8004274:	a201      	add	r2, pc, #4	@ (adr r2, 800427c <HAL_TIM_OC_Start_IT+0xbc>)
 8004276:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800427a:	bf00      	nop
 800427c:	080042b1 	.word	0x080042b1
 8004280:	080042f9 	.word	0x080042f9
 8004284:	080042f9 	.word	0x080042f9
 8004288:	080042f9 	.word	0x080042f9
 800428c:	080042c3 	.word	0x080042c3
 8004290:	080042f9 	.word	0x080042f9
 8004294:	080042f9 	.word	0x080042f9
 8004298:	080042f9 	.word	0x080042f9
 800429c:	080042d5 	.word	0x080042d5
 80042a0:	080042f9 	.word	0x080042f9
 80042a4:	080042f9 	.word	0x080042f9
 80042a8:	080042f9 	.word	0x080042f9
 80042ac:	080042e7 	.word	0x080042e7
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	68da      	ldr	r2, [r3, #12]
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	f042 0202 	orr.w	r2, r2, #2
 80042be:	60da      	str	r2, [r3, #12]
      break;
 80042c0:	e01d      	b.n	80042fe <HAL_TIM_OC_Start_IT+0x13e>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	68da      	ldr	r2, [r3, #12]
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	f042 0204 	orr.w	r2, r2, #4
 80042d0:	60da      	str	r2, [r3, #12]
      break;
 80042d2:	e014      	b.n	80042fe <HAL_TIM_OC_Start_IT+0x13e>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	68da      	ldr	r2, [r3, #12]
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	f042 0208 	orr.w	r2, r2, #8
 80042e2:	60da      	str	r2, [r3, #12]
      break;
 80042e4:	e00b      	b.n	80042fe <HAL_TIM_OC_Start_IT+0x13e>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	68da      	ldr	r2, [r3, #12]
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	f042 0210 	orr.w	r2, r2, #16
 80042f4:	60da      	str	r2, [r3, #12]
      break;
 80042f6:	e002      	b.n	80042fe <HAL_TIM_OC_Start_IT+0x13e>
    }

    default:
      status = HAL_ERROR;
 80042f8:	2301      	movs	r3, #1
 80042fa:	73fb      	strb	r3, [r7, #15]
      break;
 80042fc:	bf00      	nop
  }

  if (status == HAL_OK)
 80042fe:	7bfb      	ldrb	r3, [r7, #15]
 8004300:	2b00      	cmp	r3, #0
 8004302:	d15f      	bne.n	80043c4 <HAL_TIM_OC_Start_IT+0x204>
  {
    /* Enable the Output compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	2201      	movs	r2, #1
 800430a:	6839      	ldr	r1, [r7, #0]
 800430c:	4618      	mov	r0, r3
 800430e:	f000 fecc 	bl	80050aa <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	4a2e      	ldr	r2, [pc, #184]	@ (80043d0 <HAL_TIM_OC_Start_IT+0x210>)
 8004318:	4293      	cmp	r3, r2
 800431a:	d004      	beq.n	8004326 <HAL_TIM_OC_Start_IT+0x166>
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	4a2c      	ldr	r2, [pc, #176]	@ (80043d4 <HAL_TIM_OC_Start_IT+0x214>)
 8004322:	4293      	cmp	r3, r2
 8004324:	d101      	bne.n	800432a <HAL_TIM_OC_Start_IT+0x16a>
 8004326:	2301      	movs	r3, #1
 8004328:	e000      	b.n	800432c <HAL_TIM_OC_Start_IT+0x16c>
 800432a:	2300      	movs	r3, #0
 800432c:	2b00      	cmp	r3, #0
 800432e:	d007      	beq.n	8004340 <HAL_TIM_OC_Start_IT+0x180>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800433e:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	4a22      	ldr	r2, [pc, #136]	@ (80043d0 <HAL_TIM_OC_Start_IT+0x210>)
 8004346:	4293      	cmp	r3, r2
 8004348:	d022      	beq.n	8004390 <HAL_TIM_OC_Start_IT+0x1d0>
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004352:	d01d      	beq.n	8004390 <HAL_TIM_OC_Start_IT+0x1d0>
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	4a1f      	ldr	r2, [pc, #124]	@ (80043d8 <HAL_TIM_OC_Start_IT+0x218>)
 800435a:	4293      	cmp	r3, r2
 800435c:	d018      	beq.n	8004390 <HAL_TIM_OC_Start_IT+0x1d0>
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	4a1e      	ldr	r2, [pc, #120]	@ (80043dc <HAL_TIM_OC_Start_IT+0x21c>)
 8004364:	4293      	cmp	r3, r2
 8004366:	d013      	beq.n	8004390 <HAL_TIM_OC_Start_IT+0x1d0>
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	4a1c      	ldr	r2, [pc, #112]	@ (80043e0 <HAL_TIM_OC_Start_IT+0x220>)
 800436e:	4293      	cmp	r3, r2
 8004370:	d00e      	beq.n	8004390 <HAL_TIM_OC_Start_IT+0x1d0>
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	4a17      	ldr	r2, [pc, #92]	@ (80043d4 <HAL_TIM_OC_Start_IT+0x214>)
 8004378:	4293      	cmp	r3, r2
 800437a:	d009      	beq.n	8004390 <HAL_TIM_OC_Start_IT+0x1d0>
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	4a18      	ldr	r2, [pc, #96]	@ (80043e4 <HAL_TIM_OC_Start_IT+0x224>)
 8004382:	4293      	cmp	r3, r2
 8004384:	d004      	beq.n	8004390 <HAL_TIM_OC_Start_IT+0x1d0>
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	4a17      	ldr	r2, [pc, #92]	@ (80043e8 <HAL_TIM_OC_Start_IT+0x228>)
 800438c:	4293      	cmp	r3, r2
 800438e:	d111      	bne.n	80043b4 <HAL_TIM_OC_Start_IT+0x1f4>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	689b      	ldr	r3, [r3, #8]
 8004396:	f003 0307 	and.w	r3, r3, #7
 800439a:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800439c:	68bb      	ldr	r3, [r7, #8]
 800439e:	2b06      	cmp	r3, #6
 80043a0:	d010      	beq.n	80043c4 <HAL_TIM_OC_Start_IT+0x204>
      {
        __HAL_TIM_ENABLE(htim);
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	681a      	ldr	r2, [r3, #0]
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	f042 0201 	orr.w	r2, r2, #1
 80043b0:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80043b2:	e007      	b.n	80043c4 <HAL_TIM_OC_Start_IT+0x204>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	681a      	ldr	r2, [r3, #0]
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	f042 0201 	orr.w	r2, r2, #1
 80043c2:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 80043c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80043c6:	4618      	mov	r0, r3
 80043c8:	3710      	adds	r7, #16
 80043ca:	46bd      	mov	sp, r7
 80043cc:	bd80      	pop	{r7, pc}
 80043ce:	bf00      	nop
 80043d0:	40010000 	.word	0x40010000
 80043d4:	40010400 	.word	0x40010400
 80043d8:	40000400 	.word	0x40000400
 80043dc:	40000800 	.word	0x40000800
 80043e0:	40000c00 	.word	0x40000c00
 80043e4:	40014000 	.word	0x40014000
 80043e8:	40001800 	.word	0x40001800

080043ec <HAL_TIM_OnePulse_Init>:
  *            @arg TIM_OPMODE_SINGLE: Only one pulse will be generated.
  *            @arg TIM_OPMODE_REPETITIVE: Repetitive pulses will be generated.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OnePulse_Init(TIM_HandleTypeDef *htim, uint32_t OnePulseMode)
{
 80043ec:	b580      	push	{r7, lr}
 80043ee:	b082      	sub	sp, #8
 80043f0:	af00      	add	r7, sp, #0
 80043f2:	6078      	str	r0, [r7, #4]
 80043f4:	6039      	str	r1, [r7, #0]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	2b00      	cmp	r3, #0
 80043fa:	d101      	bne.n	8004400 <HAL_TIM_OnePulse_Init+0x14>
  {
    return HAL_ERROR;
 80043fc:	2301      	movs	r3, #1
 80043fe:	e041      	b.n	8004484 <HAL_TIM_OnePulse_Init+0x98>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_OPM_MODE(OnePulseMode));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004406:	b2db      	uxtb	r3, r3
 8004408:	2b00      	cmp	r3, #0
 800440a:	d106      	bne.n	800441a <HAL_TIM_OnePulse_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	2200      	movs	r2, #0
 8004410:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OnePulse_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OnePulse_MspInit(htim);
 8004414:	6878      	ldr	r0, [r7, #4]
 8004416:	f000 f839 	bl	800448c <HAL_TIM_OnePulse_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	2202      	movs	r2, #2
 800441e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Configure the Time base in the One Pulse Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	681a      	ldr	r2, [r3, #0]
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	3304      	adds	r3, #4
 800442a:	4619      	mov	r1, r3
 800442c:	4610      	mov	r0, r2
 800442e:	f000 fab5 	bl	800499c <TIM_Base_SetConfig>

  /* Reset the OPM Bit */
  htim->Instance->CR1 &= ~TIM_CR1_OPM;
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	681a      	ldr	r2, [r3, #0]
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	f022 0208 	bic.w	r2, r2, #8
 8004440:	601a      	str	r2, [r3, #0]

  /* Configure the OPM Mode */
  htim->Instance->CR1 |= OnePulseMode;
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	6819      	ldr	r1, [r3, #0]
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	683a      	ldr	r2, [r7, #0]
 800444e:	430a      	orrs	r2, r1
 8004450:	601a      	str	r2, [r3, #0]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	2201      	movs	r2, #1
 8004456:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	2201      	movs	r2, #1
 800445e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	2201      	movs	r2, #1
 8004466:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	2201      	movs	r2, #1
 800446e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	2201      	movs	r2, #1
 8004476:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	2201      	movs	r2, #1
 800447e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004482:	2300      	movs	r3, #0
}
 8004484:	4618      	mov	r0, r3
 8004486:	3708      	adds	r7, #8
 8004488:	46bd      	mov	sp, r7
 800448a:	bd80      	pop	{r7, pc}

0800448c <HAL_TIM_OnePulse_MspInit>:
  * @brief  Initializes the TIM One Pulse MSP.
  * @param  htim TIM One Pulse handle
  * @retval None
  */
__weak void HAL_TIM_OnePulse_MspInit(TIM_HandleTypeDef *htim)
{
 800448c:	b480      	push	{r7}
 800448e:	b083      	sub	sp, #12
 8004490:	af00      	add	r7, sp, #0
 8004492:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OnePulse_MspInit could be implemented in the user file
   */
}
 8004494:	bf00      	nop
 8004496:	370c      	adds	r7, #12
 8004498:	46bd      	mov	sp, r7
 800449a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800449e:	4770      	bx	lr

080044a0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80044a0:	b580      	push	{r7, lr}
 80044a2:	b084      	sub	sp, #16
 80044a4:	af00      	add	r7, sp, #0
 80044a6:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	68db      	ldr	r3, [r3, #12]
 80044ae:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	691b      	ldr	r3, [r3, #16]
 80044b6:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80044b8:	68bb      	ldr	r3, [r7, #8]
 80044ba:	f003 0302 	and.w	r3, r3, #2
 80044be:	2b00      	cmp	r3, #0
 80044c0:	d020      	beq.n	8004504 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80044c2:	68fb      	ldr	r3, [r7, #12]
 80044c4:	f003 0302 	and.w	r3, r3, #2
 80044c8:	2b00      	cmp	r3, #0
 80044ca:	d01b      	beq.n	8004504 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	f06f 0202 	mvn.w	r2, #2
 80044d4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	2201      	movs	r2, #1
 80044da:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	699b      	ldr	r3, [r3, #24]
 80044e2:	f003 0303 	and.w	r3, r3, #3
 80044e6:	2b00      	cmp	r3, #0
 80044e8:	d003      	beq.n	80044f2 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80044ea:	6878      	ldr	r0, [r7, #4]
 80044ec:	f000 fa37 	bl	800495e <HAL_TIM_IC_CaptureCallback>
 80044f0:	e005      	b.n	80044fe <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80044f2:	6878      	ldr	r0, [r7, #4]
 80044f4:	f7fc ff20 	bl	8001338 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80044f8:	6878      	ldr	r0, [r7, #4]
 80044fa:	f000 fa3a 	bl	8004972 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	2200      	movs	r2, #0
 8004502:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8004504:	68bb      	ldr	r3, [r7, #8]
 8004506:	f003 0304 	and.w	r3, r3, #4
 800450a:	2b00      	cmp	r3, #0
 800450c:	d020      	beq.n	8004550 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800450e:	68fb      	ldr	r3, [r7, #12]
 8004510:	f003 0304 	and.w	r3, r3, #4
 8004514:	2b00      	cmp	r3, #0
 8004516:	d01b      	beq.n	8004550 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	f06f 0204 	mvn.w	r2, #4
 8004520:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	2202      	movs	r2, #2
 8004526:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	699b      	ldr	r3, [r3, #24]
 800452e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004532:	2b00      	cmp	r3, #0
 8004534:	d003      	beq.n	800453e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004536:	6878      	ldr	r0, [r7, #4]
 8004538:	f000 fa11 	bl	800495e <HAL_TIM_IC_CaptureCallback>
 800453c:	e005      	b.n	800454a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800453e:	6878      	ldr	r0, [r7, #4]
 8004540:	f7fc fefa 	bl	8001338 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004544:	6878      	ldr	r0, [r7, #4]
 8004546:	f000 fa14 	bl	8004972 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	2200      	movs	r2, #0
 800454e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8004550:	68bb      	ldr	r3, [r7, #8]
 8004552:	f003 0308 	and.w	r3, r3, #8
 8004556:	2b00      	cmp	r3, #0
 8004558:	d020      	beq.n	800459c <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800455a:	68fb      	ldr	r3, [r7, #12]
 800455c:	f003 0308 	and.w	r3, r3, #8
 8004560:	2b00      	cmp	r3, #0
 8004562:	d01b      	beq.n	800459c <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	f06f 0208 	mvn.w	r2, #8
 800456c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	2204      	movs	r2, #4
 8004572:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	69db      	ldr	r3, [r3, #28]
 800457a:	f003 0303 	and.w	r3, r3, #3
 800457e:	2b00      	cmp	r3, #0
 8004580:	d003      	beq.n	800458a <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004582:	6878      	ldr	r0, [r7, #4]
 8004584:	f000 f9eb 	bl	800495e <HAL_TIM_IC_CaptureCallback>
 8004588:	e005      	b.n	8004596 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800458a:	6878      	ldr	r0, [r7, #4]
 800458c:	f7fc fed4 	bl	8001338 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004590:	6878      	ldr	r0, [r7, #4]
 8004592:	f000 f9ee 	bl	8004972 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	2200      	movs	r2, #0
 800459a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800459c:	68bb      	ldr	r3, [r7, #8]
 800459e:	f003 0310 	and.w	r3, r3, #16
 80045a2:	2b00      	cmp	r3, #0
 80045a4:	d020      	beq.n	80045e8 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80045a6:	68fb      	ldr	r3, [r7, #12]
 80045a8:	f003 0310 	and.w	r3, r3, #16
 80045ac:	2b00      	cmp	r3, #0
 80045ae:	d01b      	beq.n	80045e8 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	f06f 0210 	mvn.w	r2, #16
 80045b8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	2208      	movs	r2, #8
 80045be:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	69db      	ldr	r3, [r3, #28]
 80045c6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80045ca:	2b00      	cmp	r3, #0
 80045cc:	d003      	beq.n	80045d6 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80045ce:	6878      	ldr	r0, [r7, #4]
 80045d0:	f000 f9c5 	bl	800495e <HAL_TIM_IC_CaptureCallback>
 80045d4:	e005      	b.n	80045e2 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80045d6:	6878      	ldr	r0, [r7, #4]
 80045d8:	f7fc feae 	bl	8001338 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80045dc:	6878      	ldr	r0, [r7, #4]
 80045de:	f000 f9c8 	bl	8004972 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	2200      	movs	r2, #0
 80045e6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80045e8:	68bb      	ldr	r3, [r7, #8]
 80045ea:	f003 0301 	and.w	r3, r3, #1
 80045ee:	2b00      	cmp	r3, #0
 80045f0:	d00c      	beq.n	800460c <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80045f2:	68fb      	ldr	r3, [r7, #12]
 80045f4:	f003 0301 	and.w	r3, r3, #1
 80045f8:	2b00      	cmp	r3, #0
 80045fa:	d007      	beq.n	800460c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	f06f 0201 	mvn.w	r2, #1
 8004604:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004606:	6878      	ldr	r0, [r7, #4]
 8004608:	f000 f99f 	bl	800494a <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 800460c:	68bb      	ldr	r3, [r7, #8]
 800460e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004612:	2b00      	cmp	r3, #0
 8004614:	d00c      	beq.n	8004630 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004616:	68fb      	ldr	r3, [r7, #12]
 8004618:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800461c:	2b00      	cmp	r3, #0
 800461e:	d007      	beq.n	8004630 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8004628:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800462a:	6878      	ldr	r0, [r7, #4]
 800462c:	f000 fde8 	bl	8005200 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8004630:	68bb      	ldr	r3, [r7, #8]
 8004632:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004636:	2b00      	cmp	r3, #0
 8004638:	d00c      	beq.n	8004654 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800463a:	68fb      	ldr	r3, [r7, #12]
 800463c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004640:	2b00      	cmp	r3, #0
 8004642:	d007      	beq.n	8004654 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800464c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800464e:	6878      	ldr	r0, [r7, #4]
 8004650:	f000 f999 	bl	8004986 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8004654:	68bb      	ldr	r3, [r7, #8]
 8004656:	f003 0320 	and.w	r3, r3, #32
 800465a:	2b00      	cmp	r3, #0
 800465c:	d00c      	beq.n	8004678 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800465e:	68fb      	ldr	r3, [r7, #12]
 8004660:	f003 0320 	and.w	r3, r3, #32
 8004664:	2b00      	cmp	r3, #0
 8004666:	d007      	beq.n	8004678 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	f06f 0220 	mvn.w	r2, #32
 8004670:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004672:	6878      	ldr	r0, [r7, #4]
 8004674:	f000 fdba 	bl	80051ec <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004678:	bf00      	nop
 800467a:	3710      	adds	r7, #16
 800467c:	46bd      	mov	sp, r7
 800467e:	bd80      	pop	{r7, pc}

08004680 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           const TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8004680:	b580      	push	{r7, lr}
 8004682:	b086      	sub	sp, #24
 8004684:	af00      	add	r7, sp, #0
 8004686:	60f8      	str	r0, [r7, #12]
 8004688:	60b9      	str	r1, [r7, #8]
 800468a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800468c:	2300      	movs	r3, #0
 800468e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004690:	68fb      	ldr	r3, [r7, #12]
 8004692:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004696:	2b01      	cmp	r3, #1
 8004698:	d101      	bne.n	800469e <HAL_TIM_OC_ConfigChannel+0x1e>
 800469a:	2302      	movs	r3, #2
 800469c:	e048      	b.n	8004730 <HAL_TIM_OC_ConfigChannel+0xb0>
 800469e:	68fb      	ldr	r3, [r7, #12]
 80046a0:	2201      	movs	r2, #1
 80046a2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	2b0c      	cmp	r3, #12
 80046aa:	d839      	bhi.n	8004720 <HAL_TIM_OC_ConfigChannel+0xa0>
 80046ac:	a201      	add	r2, pc, #4	@ (adr r2, 80046b4 <HAL_TIM_OC_ConfigChannel+0x34>)
 80046ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80046b2:	bf00      	nop
 80046b4:	080046e9 	.word	0x080046e9
 80046b8:	08004721 	.word	0x08004721
 80046bc:	08004721 	.word	0x08004721
 80046c0:	08004721 	.word	0x08004721
 80046c4:	080046f7 	.word	0x080046f7
 80046c8:	08004721 	.word	0x08004721
 80046cc:	08004721 	.word	0x08004721
 80046d0:	08004721 	.word	0x08004721
 80046d4:	08004705 	.word	0x08004705
 80046d8:	08004721 	.word	0x08004721
 80046dc:	08004721 	.word	0x08004721
 80046e0:	08004721 	.word	0x08004721
 80046e4:	08004713 	.word	0x08004713
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80046e8:	68fb      	ldr	r3, [r7, #12]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	68b9      	ldr	r1, [r7, #8]
 80046ee:	4618      	mov	r0, r3
 80046f0:	f000 fa00 	bl	8004af4 <TIM_OC1_SetConfig>
      break;
 80046f4:	e017      	b.n	8004726 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80046f6:	68fb      	ldr	r3, [r7, #12]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	68b9      	ldr	r1, [r7, #8]
 80046fc:	4618      	mov	r0, r3
 80046fe:	f000 fa69 	bl	8004bd4 <TIM_OC2_SetConfig>
      break;
 8004702:	e010      	b.n	8004726 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004704:	68fb      	ldr	r3, [r7, #12]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	68b9      	ldr	r1, [r7, #8]
 800470a:	4618      	mov	r0, r3
 800470c:	f000 fad8 	bl	8004cc0 <TIM_OC3_SetConfig>
      break;
 8004710:	e009      	b.n	8004726 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004712:	68fb      	ldr	r3, [r7, #12]
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	68b9      	ldr	r1, [r7, #8]
 8004718:	4618      	mov	r0, r3
 800471a:	f000 fb45 	bl	8004da8 <TIM_OC4_SetConfig>
      break;
 800471e:	e002      	b.n	8004726 <HAL_TIM_OC_ConfigChannel+0xa6>
    }

    default:
      status = HAL_ERROR;
 8004720:	2301      	movs	r3, #1
 8004722:	75fb      	strb	r3, [r7, #23]
      break;
 8004724:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004726:	68fb      	ldr	r3, [r7, #12]
 8004728:	2200      	movs	r2, #0
 800472a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800472e:	7dfb      	ldrb	r3, [r7, #23]
}
 8004730:	4618      	mov	r0, r3
 8004732:	3718      	adds	r7, #24
 8004734:	46bd      	mov	sp, r7
 8004736:	bd80      	pop	{r7, pc}

08004738 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004738:	b580      	push	{r7, lr}
 800473a:	b084      	sub	sp, #16
 800473c:	af00      	add	r7, sp, #0
 800473e:	6078      	str	r0, [r7, #4]
 8004740:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004742:	2300      	movs	r3, #0
 8004744:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800474c:	2b01      	cmp	r3, #1
 800474e:	d101      	bne.n	8004754 <HAL_TIM_ConfigClockSource+0x1c>
 8004750:	2302      	movs	r3, #2
 8004752:	e0b4      	b.n	80048be <HAL_TIM_ConfigClockSource+0x186>
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	2201      	movs	r2, #1
 8004758:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	2202      	movs	r2, #2
 8004760:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	689b      	ldr	r3, [r3, #8]
 800476a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800476c:	68bb      	ldr	r3, [r7, #8]
 800476e:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8004772:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004774:	68bb      	ldr	r3, [r7, #8]
 8004776:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800477a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	68ba      	ldr	r2, [r7, #8]
 8004782:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004784:	683b      	ldr	r3, [r7, #0]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800478c:	d03e      	beq.n	800480c <HAL_TIM_ConfigClockSource+0xd4>
 800478e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004792:	f200 8087 	bhi.w	80048a4 <HAL_TIM_ConfigClockSource+0x16c>
 8004796:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800479a:	f000 8086 	beq.w	80048aa <HAL_TIM_ConfigClockSource+0x172>
 800479e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80047a2:	d87f      	bhi.n	80048a4 <HAL_TIM_ConfigClockSource+0x16c>
 80047a4:	2b70      	cmp	r3, #112	@ 0x70
 80047a6:	d01a      	beq.n	80047de <HAL_TIM_ConfigClockSource+0xa6>
 80047a8:	2b70      	cmp	r3, #112	@ 0x70
 80047aa:	d87b      	bhi.n	80048a4 <HAL_TIM_ConfigClockSource+0x16c>
 80047ac:	2b60      	cmp	r3, #96	@ 0x60
 80047ae:	d050      	beq.n	8004852 <HAL_TIM_ConfigClockSource+0x11a>
 80047b0:	2b60      	cmp	r3, #96	@ 0x60
 80047b2:	d877      	bhi.n	80048a4 <HAL_TIM_ConfigClockSource+0x16c>
 80047b4:	2b50      	cmp	r3, #80	@ 0x50
 80047b6:	d03c      	beq.n	8004832 <HAL_TIM_ConfigClockSource+0xfa>
 80047b8:	2b50      	cmp	r3, #80	@ 0x50
 80047ba:	d873      	bhi.n	80048a4 <HAL_TIM_ConfigClockSource+0x16c>
 80047bc:	2b40      	cmp	r3, #64	@ 0x40
 80047be:	d058      	beq.n	8004872 <HAL_TIM_ConfigClockSource+0x13a>
 80047c0:	2b40      	cmp	r3, #64	@ 0x40
 80047c2:	d86f      	bhi.n	80048a4 <HAL_TIM_ConfigClockSource+0x16c>
 80047c4:	2b30      	cmp	r3, #48	@ 0x30
 80047c6:	d064      	beq.n	8004892 <HAL_TIM_ConfigClockSource+0x15a>
 80047c8:	2b30      	cmp	r3, #48	@ 0x30
 80047ca:	d86b      	bhi.n	80048a4 <HAL_TIM_ConfigClockSource+0x16c>
 80047cc:	2b20      	cmp	r3, #32
 80047ce:	d060      	beq.n	8004892 <HAL_TIM_ConfigClockSource+0x15a>
 80047d0:	2b20      	cmp	r3, #32
 80047d2:	d867      	bhi.n	80048a4 <HAL_TIM_ConfigClockSource+0x16c>
 80047d4:	2b00      	cmp	r3, #0
 80047d6:	d05c      	beq.n	8004892 <HAL_TIM_ConfigClockSource+0x15a>
 80047d8:	2b10      	cmp	r3, #16
 80047da:	d05a      	beq.n	8004892 <HAL_TIM_ConfigClockSource+0x15a>
 80047dc:	e062      	b.n	80048a4 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80047e2:	683b      	ldr	r3, [r7, #0]
 80047e4:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80047e6:	683b      	ldr	r3, [r7, #0]
 80047e8:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80047ea:	683b      	ldr	r3, [r7, #0]
 80047ec:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80047ee:	f000 fc3c 	bl	800506a <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	689b      	ldr	r3, [r3, #8]
 80047f8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80047fa:	68bb      	ldr	r3, [r7, #8]
 80047fc:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8004800:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	68ba      	ldr	r2, [r7, #8]
 8004808:	609a      	str	r2, [r3, #8]
      break;
 800480a:	e04f      	b.n	80048ac <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004810:	683b      	ldr	r3, [r7, #0]
 8004812:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004814:	683b      	ldr	r3, [r7, #0]
 8004816:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004818:	683b      	ldr	r3, [r7, #0]
 800481a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800481c:	f000 fc25 	bl	800506a <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	689a      	ldr	r2, [r3, #8]
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800482e:	609a      	str	r2, [r3, #8]
      break;
 8004830:	e03c      	b.n	80048ac <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004836:	683b      	ldr	r3, [r7, #0]
 8004838:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800483a:	683b      	ldr	r3, [r7, #0]
 800483c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800483e:	461a      	mov	r2, r3
 8004840:	f000 fb99 	bl	8004f76 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	2150      	movs	r1, #80	@ 0x50
 800484a:	4618      	mov	r0, r3
 800484c:	f000 fbf2 	bl	8005034 <TIM_ITRx_SetConfig>
      break;
 8004850:	e02c      	b.n	80048ac <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004856:	683b      	ldr	r3, [r7, #0]
 8004858:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800485a:	683b      	ldr	r3, [r7, #0]
 800485c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800485e:	461a      	mov	r2, r3
 8004860:	f000 fbb8 	bl	8004fd4 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	2160      	movs	r1, #96	@ 0x60
 800486a:	4618      	mov	r0, r3
 800486c:	f000 fbe2 	bl	8005034 <TIM_ITRx_SetConfig>
      break;
 8004870:	e01c      	b.n	80048ac <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004876:	683b      	ldr	r3, [r7, #0]
 8004878:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800487a:	683b      	ldr	r3, [r7, #0]
 800487c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800487e:	461a      	mov	r2, r3
 8004880:	f000 fb79 	bl	8004f76 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	2140      	movs	r1, #64	@ 0x40
 800488a:	4618      	mov	r0, r3
 800488c:	f000 fbd2 	bl	8005034 <TIM_ITRx_SetConfig>
      break;
 8004890:	e00c      	b.n	80048ac <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	681a      	ldr	r2, [r3, #0]
 8004896:	683b      	ldr	r3, [r7, #0]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	4619      	mov	r1, r3
 800489c:	4610      	mov	r0, r2
 800489e:	f000 fbc9 	bl	8005034 <TIM_ITRx_SetConfig>
      break;
 80048a2:	e003      	b.n	80048ac <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80048a4:	2301      	movs	r3, #1
 80048a6:	73fb      	strb	r3, [r7, #15]
      break;
 80048a8:	e000      	b.n	80048ac <HAL_TIM_ConfigClockSource+0x174>
      break;
 80048aa:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	2201      	movs	r2, #1
 80048b0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	2200      	movs	r2, #0
 80048b8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80048bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80048be:	4618      	mov	r0, r3
 80048c0:	3710      	adds	r7, #16
 80048c2:	46bd      	mov	sp, r7
 80048c4:	bd80      	pop	{r7, pc}

080048c6 <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 80048c6:	b580      	push	{r7, lr}
 80048c8:	b082      	sub	sp, #8
 80048ca:	af00      	add	r7, sp, #0
 80048cc:	6078      	str	r0, [r7, #4]
 80048ce:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80048d6:	2b01      	cmp	r3, #1
 80048d8:	d101      	bne.n	80048de <HAL_TIM_SlaveConfigSynchro+0x18>
 80048da:	2302      	movs	r3, #2
 80048dc:	e031      	b.n	8004942 <HAL_TIM_SlaveConfigSynchro+0x7c>
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	2201      	movs	r2, #1
 80048e2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	2202      	movs	r2, #2
 80048ea:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 80048ee:	6839      	ldr	r1, [r7, #0]
 80048f0:	6878      	ldr	r0, [r7, #4]
 80048f2:	f000 faaf 	bl	8004e54 <TIM_SlaveTimer_SetConfig>
 80048f6:	4603      	mov	r3, r0
 80048f8:	2b00      	cmp	r3, #0
 80048fa:	d009      	beq.n	8004910 <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	2201      	movs	r2, #1
 8004900:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    __HAL_UNLOCK(htim);
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	2200      	movs	r2, #0
 8004908:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    return HAL_ERROR;
 800490c:	2301      	movs	r3, #1
 800490e:	e018      	b.n	8004942 <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	68da      	ldr	r2, [r3, #12]
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800491e:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	68da      	ldr	r2, [r3, #12]
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 800492e:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	2201      	movs	r2, #1
 8004934:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	2200      	movs	r2, #0
 800493c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8004940:	2300      	movs	r3, #0
}
 8004942:	4618      	mov	r0, r3
 8004944:	3708      	adds	r7, #8
 8004946:	46bd      	mov	sp, r7
 8004948:	bd80      	pop	{r7, pc}

0800494a <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800494a:	b480      	push	{r7}
 800494c:	b083      	sub	sp, #12
 800494e:	af00      	add	r7, sp, #0
 8004950:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8004952:	bf00      	nop
 8004954:	370c      	adds	r7, #12
 8004956:	46bd      	mov	sp, r7
 8004958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800495c:	4770      	bx	lr

0800495e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800495e:	b480      	push	{r7}
 8004960:	b083      	sub	sp, #12
 8004962:	af00      	add	r7, sp, #0
 8004964:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004966:	bf00      	nop
 8004968:	370c      	adds	r7, #12
 800496a:	46bd      	mov	sp, r7
 800496c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004970:	4770      	bx	lr

08004972 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004972:	b480      	push	{r7}
 8004974:	b083      	sub	sp, #12
 8004976:	af00      	add	r7, sp, #0
 8004978:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800497a:	bf00      	nop
 800497c:	370c      	adds	r7, #12
 800497e:	46bd      	mov	sp, r7
 8004980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004984:	4770      	bx	lr

08004986 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004986:	b480      	push	{r7}
 8004988:	b083      	sub	sp, #12
 800498a:	af00      	add	r7, sp, #0
 800498c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800498e:	bf00      	nop
 8004990:	370c      	adds	r7, #12
 8004992:	46bd      	mov	sp, r7
 8004994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004998:	4770      	bx	lr
	...

0800499c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800499c:	b480      	push	{r7}
 800499e:	b085      	sub	sp, #20
 80049a0:	af00      	add	r7, sp, #0
 80049a2:	6078      	str	r0, [r7, #4]
 80049a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	4a46      	ldr	r2, [pc, #280]	@ (8004ac8 <TIM_Base_SetConfig+0x12c>)
 80049b0:	4293      	cmp	r3, r2
 80049b2:	d013      	beq.n	80049dc <TIM_Base_SetConfig+0x40>
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80049ba:	d00f      	beq.n	80049dc <TIM_Base_SetConfig+0x40>
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	4a43      	ldr	r2, [pc, #268]	@ (8004acc <TIM_Base_SetConfig+0x130>)
 80049c0:	4293      	cmp	r3, r2
 80049c2:	d00b      	beq.n	80049dc <TIM_Base_SetConfig+0x40>
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	4a42      	ldr	r2, [pc, #264]	@ (8004ad0 <TIM_Base_SetConfig+0x134>)
 80049c8:	4293      	cmp	r3, r2
 80049ca:	d007      	beq.n	80049dc <TIM_Base_SetConfig+0x40>
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	4a41      	ldr	r2, [pc, #260]	@ (8004ad4 <TIM_Base_SetConfig+0x138>)
 80049d0:	4293      	cmp	r3, r2
 80049d2:	d003      	beq.n	80049dc <TIM_Base_SetConfig+0x40>
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	4a40      	ldr	r2, [pc, #256]	@ (8004ad8 <TIM_Base_SetConfig+0x13c>)
 80049d8:	4293      	cmp	r3, r2
 80049da:	d108      	bne.n	80049ee <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80049dc:	68fb      	ldr	r3, [r7, #12]
 80049de:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80049e2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80049e4:	683b      	ldr	r3, [r7, #0]
 80049e6:	685b      	ldr	r3, [r3, #4]
 80049e8:	68fa      	ldr	r2, [r7, #12]
 80049ea:	4313      	orrs	r3, r2
 80049ec:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	4a35      	ldr	r2, [pc, #212]	@ (8004ac8 <TIM_Base_SetConfig+0x12c>)
 80049f2:	4293      	cmp	r3, r2
 80049f4:	d02b      	beq.n	8004a4e <TIM_Base_SetConfig+0xb2>
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80049fc:	d027      	beq.n	8004a4e <TIM_Base_SetConfig+0xb2>
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	4a32      	ldr	r2, [pc, #200]	@ (8004acc <TIM_Base_SetConfig+0x130>)
 8004a02:	4293      	cmp	r3, r2
 8004a04:	d023      	beq.n	8004a4e <TIM_Base_SetConfig+0xb2>
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	4a31      	ldr	r2, [pc, #196]	@ (8004ad0 <TIM_Base_SetConfig+0x134>)
 8004a0a:	4293      	cmp	r3, r2
 8004a0c:	d01f      	beq.n	8004a4e <TIM_Base_SetConfig+0xb2>
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	4a30      	ldr	r2, [pc, #192]	@ (8004ad4 <TIM_Base_SetConfig+0x138>)
 8004a12:	4293      	cmp	r3, r2
 8004a14:	d01b      	beq.n	8004a4e <TIM_Base_SetConfig+0xb2>
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	4a2f      	ldr	r2, [pc, #188]	@ (8004ad8 <TIM_Base_SetConfig+0x13c>)
 8004a1a:	4293      	cmp	r3, r2
 8004a1c:	d017      	beq.n	8004a4e <TIM_Base_SetConfig+0xb2>
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	4a2e      	ldr	r2, [pc, #184]	@ (8004adc <TIM_Base_SetConfig+0x140>)
 8004a22:	4293      	cmp	r3, r2
 8004a24:	d013      	beq.n	8004a4e <TIM_Base_SetConfig+0xb2>
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	4a2d      	ldr	r2, [pc, #180]	@ (8004ae0 <TIM_Base_SetConfig+0x144>)
 8004a2a:	4293      	cmp	r3, r2
 8004a2c:	d00f      	beq.n	8004a4e <TIM_Base_SetConfig+0xb2>
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	4a2c      	ldr	r2, [pc, #176]	@ (8004ae4 <TIM_Base_SetConfig+0x148>)
 8004a32:	4293      	cmp	r3, r2
 8004a34:	d00b      	beq.n	8004a4e <TIM_Base_SetConfig+0xb2>
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	4a2b      	ldr	r2, [pc, #172]	@ (8004ae8 <TIM_Base_SetConfig+0x14c>)
 8004a3a:	4293      	cmp	r3, r2
 8004a3c:	d007      	beq.n	8004a4e <TIM_Base_SetConfig+0xb2>
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	4a2a      	ldr	r2, [pc, #168]	@ (8004aec <TIM_Base_SetConfig+0x150>)
 8004a42:	4293      	cmp	r3, r2
 8004a44:	d003      	beq.n	8004a4e <TIM_Base_SetConfig+0xb2>
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	4a29      	ldr	r2, [pc, #164]	@ (8004af0 <TIM_Base_SetConfig+0x154>)
 8004a4a:	4293      	cmp	r3, r2
 8004a4c:	d108      	bne.n	8004a60 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004a4e:	68fb      	ldr	r3, [r7, #12]
 8004a50:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004a54:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004a56:	683b      	ldr	r3, [r7, #0]
 8004a58:	68db      	ldr	r3, [r3, #12]
 8004a5a:	68fa      	ldr	r2, [r7, #12]
 8004a5c:	4313      	orrs	r3, r2
 8004a5e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004a60:	68fb      	ldr	r3, [r7, #12]
 8004a62:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8004a66:	683b      	ldr	r3, [r7, #0]
 8004a68:	695b      	ldr	r3, [r3, #20]
 8004a6a:	4313      	orrs	r3, r2
 8004a6c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	68fa      	ldr	r2, [r7, #12]
 8004a72:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004a74:	683b      	ldr	r3, [r7, #0]
 8004a76:	689a      	ldr	r2, [r3, #8]
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004a7c:	683b      	ldr	r3, [r7, #0]
 8004a7e:	681a      	ldr	r2, [r3, #0]
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	4a10      	ldr	r2, [pc, #64]	@ (8004ac8 <TIM_Base_SetConfig+0x12c>)
 8004a88:	4293      	cmp	r3, r2
 8004a8a:	d003      	beq.n	8004a94 <TIM_Base_SetConfig+0xf8>
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	4a12      	ldr	r2, [pc, #72]	@ (8004ad8 <TIM_Base_SetConfig+0x13c>)
 8004a90:	4293      	cmp	r3, r2
 8004a92:	d103      	bne.n	8004a9c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004a94:	683b      	ldr	r3, [r7, #0]
 8004a96:	691a      	ldr	r2, [r3, #16]
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	2201      	movs	r2, #1
 8004aa0:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	691b      	ldr	r3, [r3, #16]
 8004aa6:	f003 0301 	and.w	r3, r3, #1
 8004aaa:	2b01      	cmp	r3, #1
 8004aac:	d105      	bne.n	8004aba <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	691b      	ldr	r3, [r3, #16]
 8004ab2:	f023 0201 	bic.w	r2, r3, #1
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	611a      	str	r2, [r3, #16]
  }
}
 8004aba:	bf00      	nop
 8004abc:	3714      	adds	r7, #20
 8004abe:	46bd      	mov	sp, r7
 8004ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ac4:	4770      	bx	lr
 8004ac6:	bf00      	nop
 8004ac8:	40010000 	.word	0x40010000
 8004acc:	40000400 	.word	0x40000400
 8004ad0:	40000800 	.word	0x40000800
 8004ad4:	40000c00 	.word	0x40000c00
 8004ad8:	40010400 	.word	0x40010400
 8004adc:	40014000 	.word	0x40014000
 8004ae0:	40014400 	.word	0x40014400
 8004ae4:	40014800 	.word	0x40014800
 8004ae8:	40001800 	.word	0x40001800
 8004aec:	40001c00 	.word	0x40001c00
 8004af0:	40002000 	.word	0x40002000

08004af4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004af4:	b480      	push	{r7}
 8004af6:	b087      	sub	sp, #28
 8004af8:	af00      	add	r7, sp, #0
 8004afa:	6078      	str	r0, [r7, #4]
 8004afc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	6a1b      	ldr	r3, [r3, #32]
 8004b02:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	6a1b      	ldr	r3, [r3, #32]
 8004b08:	f023 0201 	bic.w	r2, r3, #1
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	685b      	ldr	r3, [r3, #4]
 8004b14:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	699b      	ldr	r3, [r3, #24]
 8004b1a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004b1c:	68fb      	ldr	r3, [r7, #12]
 8004b1e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004b22:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004b24:	68fb      	ldr	r3, [r7, #12]
 8004b26:	f023 0303 	bic.w	r3, r3, #3
 8004b2a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004b2c:	683b      	ldr	r3, [r7, #0]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	68fa      	ldr	r2, [r7, #12]
 8004b32:	4313      	orrs	r3, r2
 8004b34:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004b36:	697b      	ldr	r3, [r7, #20]
 8004b38:	f023 0302 	bic.w	r3, r3, #2
 8004b3c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004b3e:	683b      	ldr	r3, [r7, #0]
 8004b40:	689b      	ldr	r3, [r3, #8]
 8004b42:	697a      	ldr	r2, [r7, #20]
 8004b44:	4313      	orrs	r3, r2
 8004b46:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	4a20      	ldr	r2, [pc, #128]	@ (8004bcc <TIM_OC1_SetConfig+0xd8>)
 8004b4c:	4293      	cmp	r3, r2
 8004b4e:	d003      	beq.n	8004b58 <TIM_OC1_SetConfig+0x64>
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	4a1f      	ldr	r2, [pc, #124]	@ (8004bd0 <TIM_OC1_SetConfig+0xdc>)
 8004b54:	4293      	cmp	r3, r2
 8004b56:	d10c      	bne.n	8004b72 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004b58:	697b      	ldr	r3, [r7, #20]
 8004b5a:	f023 0308 	bic.w	r3, r3, #8
 8004b5e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004b60:	683b      	ldr	r3, [r7, #0]
 8004b62:	68db      	ldr	r3, [r3, #12]
 8004b64:	697a      	ldr	r2, [r7, #20]
 8004b66:	4313      	orrs	r3, r2
 8004b68:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004b6a:	697b      	ldr	r3, [r7, #20]
 8004b6c:	f023 0304 	bic.w	r3, r3, #4
 8004b70:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	4a15      	ldr	r2, [pc, #84]	@ (8004bcc <TIM_OC1_SetConfig+0xd8>)
 8004b76:	4293      	cmp	r3, r2
 8004b78:	d003      	beq.n	8004b82 <TIM_OC1_SetConfig+0x8e>
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	4a14      	ldr	r2, [pc, #80]	@ (8004bd0 <TIM_OC1_SetConfig+0xdc>)
 8004b7e:	4293      	cmp	r3, r2
 8004b80:	d111      	bne.n	8004ba6 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004b82:	693b      	ldr	r3, [r7, #16]
 8004b84:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004b88:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004b8a:	693b      	ldr	r3, [r7, #16]
 8004b8c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8004b90:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004b92:	683b      	ldr	r3, [r7, #0]
 8004b94:	695b      	ldr	r3, [r3, #20]
 8004b96:	693a      	ldr	r2, [r7, #16]
 8004b98:	4313      	orrs	r3, r2
 8004b9a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004b9c:	683b      	ldr	r3, [r7, #0]
 8004b9e:	699b      	ldr	r3, [r3, #24]
 8004ba0:	693a      	ldr	r2, [r7, #16]
 8004ba2:	4313      	orrs	r3, r2
 8004ba4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	693a      	ldr	r2, [r7, #16]
 8004baa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	68fa      	ldr	r2, [r7, #12]
 8004bb0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004bb2:	683b      	ldr	r3, [r7, #0]
 8004bb4:	685a      	ldr	r2, [r3, #4]
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	697a      	ldr	r2, [r7, #20]
 8004bbe:	621a      	str	r2, [r3, #32]
}
 8004bc0:	bf00      	nop
 8004bc2:	371c      	adds	r7, #28
 8004bc4:	46bd      	mov	sp, r7
 8004bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bca:	4770      	bx	lr
 8004bcc:	40010000 	.word	0x40010000
 8004bd0:	40010400 	.word	0x40010400

08004bd4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004bd4:	b480      	push	{r7}
 8004bd6:	b087      	sub	sp, #28
 8004bd8:	af00      	add	r7, sp, #0
 8004bda:	6078      	str	r0, [r7, #4]
 8004bdc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	6a1b      	ldr	r3, [r3, #32]
 8004be2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	6a1b      	ldr	r3, [r3, #32]
 8004be8:	f023 0210 	bic.w	r2, r3, #16
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	685b      	ldr	r3, [r3, #4]
 8004bf4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	699b      	ldr	r3, [r3, #24]
 8004bfa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004bfc:	68fb      	ldr	r3, [r7, #12]
 8004bfe:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004c02:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004c04:	68fb      	ldr	r3, [r7, #12]
 8004c06:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004c0a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004c0c:	683b      	ldr	r3, [r7, #0]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	021b      	lsls	r3, r3, #8
 8004c12:	68fa      	ldr	r2, [r7, #12]
 8004c14:	4313      	orrs	r3, r2
 8004c16:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004c18:	697b      	ldr	r3, [r7, #20]
 8004c1a:	f023 0320 	bic.w	r3, r3, #32
 8004c1e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004c20:	683b      	ldr	r3, [r7, #0]
 8004c22:	689b      	ldr	r3, [r3, #8]
 8004c24:	011b      	lsls	r3, r3, #4
 8004c26:	697a      	ldr	r2, [r7, #20]
 8004c28:	4313      	orrs	r3, r2
 8004c2a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	4a22      	ldr	r2, [pc, #136]	@ (8004cb8 <TIM_OC2_SetConfig+0xe4>)
 8004c30:	4293      	cmp	r3, r2
 8004c32:	d003      	beq.n	8004c3c <TIM_OC2_SetConfig+0x68>
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	4a21      	ldr	r2, [pc, #132]	@ (8004cbc <TIM_OC2_SetConfig+0xe8>)
 8004c38:	4293      	cmp	r3, r2
 8004c3a:	d10d      	bne.n	8004c58 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004c3c:	697b      	ldr	r3, [r7, #20]
 8004c3e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004c42:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004c44:	683b      	ldr	r3, [r7, #0]
 8004c46:	68db      	ldr	r3, [r3, #12]
 8004c48:	011b      	lsls	r3, r3, #4
 8004c4a:	697a      	ldr	r2, [r7, #20]
 8004c4c:	4313      	orrs	r3, r2
 8004c4e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004c50:	697b      	ldr	r3, [r7, #20]
 8004c52:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004c56:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	4a17      	ldr	r2, [pc, #92]	@ (8004cb8 <TIM_OC2_SetConfig+0xe4>)
 8004c5c:	4293      	cmp	r3, r2
 8004c5e:	d003      	beq.n	8004c68 <TIM_OC2_SetConfig+0x94>
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	4a16      	ldr	r2, [pc, #88]	@ (8004cbc <TIM_OC2_SetConfig+0xe8>)
 8004c64:	4293      	cmp	r3, r2
 8004c66:	d113      	bne.n	8004c90 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004c68:	693b      	ldr	r3, [r7, #16]
 8004c6a:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8004c6e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004c70:	693b      	ldr	r3, [r7, #16]
 8004c72:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8004c76:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004c78:	683b      	ldr	r3, [r7, #0]
 8004c7a:	695b      	ldr	r3, [r3, #20]
 8004c7c:	009b      	lsls	r3, r3, #2
 8004c7e:	693a      	ldr	r2, [r7, #16]
 8004c80:	4313      	orrs	r3, r2
 8004c82:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004c84:	683b      	ldr	r3, [r7, #0]
 8004c86:	699b      	ldr	r3, [r3, #24]
 8004c88:	009b      	lsls	r3, r3, #2
 8004c8a:	693a      	ldr	r2, [r7, #16]
 8004c8c:	4313      	orrs	r3, r2
 8004c8e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	693a      	ldr	r2, [r7, #16]
 8004c94:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	68fa      	ldr	r2, [r7, #12]
 8004c9a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004c9c:	683b      	ldr	r3, [r7, #0]
 8004c9e:	685a      	ldr	r2, [r3, #4]
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	697a      	ldr	r2, [r7, #20]
 8004ca8:	621a      	str	r2, [r3, #32]
}
 8004caa:	bf00      	nop
 8004cac:	371c      	adds	r7, #28
 8004cae:	46bd      	mov	sp, r7
 8004cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cb4:	4770      	bx	lr
 8004cb6:	bf00      	nop
 8004cb8:	40010000 	.word	0x40010000
 8004cbc:	40010400 	.word	0x40010400

08004cc0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004cc0:	b480      	push	{r7}
 8004cc2:	b087      	sub	sp, #28
 8004cc4:	af00      	add	r7, sp, #0
 8004cc6:	6078      	str	r0, [r7, #4]
 8004cc8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	6a1b      	ldr	r3, [r3, #32]
 8004cce:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	6a1b      	ldr	r3, [r3, #32]
 8004cd4:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	685b      	ldr	r3, [r3, #4]
 8004ce0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	69db      	ldr	r3, [r3, #28]
 8004ce6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004ce8:	68fb      	ldr	r3, [r7, #12]
 8004cea:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004cee:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004cf0:	68fb      	ldr	r3, [r7, #12]
 8004cf2:	f023 0303 	bic.w	r3, r3, #3
 8004cf6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004cf8:	683b      	ldr	r3, [r7, #0]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	68fa      	ldr	r2, [r7, #12]
 8004cfe:	4313      	orrs	r3, r2
 8004d00:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004d02:	697b      	ldr	r3, [r7, #20]
 8004d04:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8004d08:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004d0a:	683b      	ldr	r3, [r7, #0]
 8004d0c:	689b      	ldr	r3, [r3, #8]
 8004d0e:	021b      	lsls	r3, r3, #8
 8004d10:	697a      	ldr	r2, [r7, #20]
 8004d12:	4313      	orrs	r3, r2
 8004d14:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	4a21      	ldr	r2, [pc, #132]	@ (8004da0 <TIM_OC3_SetConfig+0xe0>)
 8004d1a:	4293      	cmp	r3, r2
 8004d1c:	d003      	beq.n	8004d26 <TIM_OC3_SetConfig+0x66>
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	4a20      	ldr	r2, [pc, #128]	@ (8004da4 <TIM_OC3_SetConfig+0xe4>)
 8004d22:	4293      	cmp	r3, r2
 8004d24:	d10d      	bne.n	8004d42 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004d26:	697b      	ldr	r3, [r7, #20]
 8004d28:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8004d2c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004d2e:	683b      	ldr	r3, [r7, #0]
 8004d30:	68db      	ldr	r3, [r3, #12]
 8004d32:	021b      	lsls	r3, r3, #8
 8004d34:	697a      	ldr	r2, [r7, #20]
 8004d36:	4313      	orrs	r3, r2
 8004d38:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004d3a:	697b      	ldr	r3, [r7, #20]
 8004d3c:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8004d40:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	4a16      	ldr	r2, [pc, #88]	@ (8004da0 <TIM_OC3_SetConfig+0xe0>)
 8004d46:	4293      	cmp	r3, r2
 8004d48:	d003      	beq.n	8004d52 <TIM_OC3_SetConfig+0x92>
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	4a15      	ldr	r2, [pc, #84]	@ (8004da4 <TIM_OC3_SetConfig+0xe4>)
 8004d4e:	4293      	cmp	r3, r2
 8004d50:	d113      	bne.n	8004d7a <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004d52:	693b      	ldr	r3, [r7, #16]
 8004d54:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004d58:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004d5a:	693b      	ldr	r3, [r7, #16]
 8004d5c:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8004d60:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004d62:	683b      	ldr	r3, [r7, #0]
 8004d64:	695b      	ldr	r3, [r3, #20]
 8004d66:	011b      	lsls	r3, r3, #4
 8004d68:	693a      	ldr	r2, [r7, #16]
 8004d6a:	4313      	orrs	r3, r2
 8004d6c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004d6e:	683b      	ldr	r3, [r7, #0]
 8004d70:	699b      	ldr	r3, [r3, #24]
 8004d72:	011b      	lsls	r3, r3, #4
 8004d74:	693a      	ldr	r2, [r7, #16]
 8004d76:	4313      	orrs	r3, r2
 8004d78:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	693a      	ldr	r2, [r7, #16]
 8004d7e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	68fa      	ldr	r2, [r7, #12]
 8004d84:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004d86:	683b      	ldr	r3, [r7, #0]
 8004d88:	685a      	ldr	r2, [r3, #4]
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	697a      	ldr	r2, [r7, #20]
 8004d92:	621a      	str	r2, [r3, #32]
}
 8004d94:	bf00      	nop
 8004d96:	371c      	adds	r7, #28
 8004d98:	46bd      	mov	sp, r7
 8004d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d9e:	4770      	bx	lr
 8004da0:	40010000 	.word	0x40010000
 8004da4:	40010400 	.word	0x40010400

08004da8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004da8:	b480      	push	{r7}
 8004daa:	b087      	sub	sp, #28
 8004dac:	af00      	add	r7, sp, #0
 8004dae:	6078      	str	r0, [r7, #4]
 8004db0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	6a1b      	ldr	r3, [r3, #32]
 8004db6:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	6a1b      	ldr	r3, [r3, #32]
 8004dbc:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	685b      	ldr	r3, [r3, #4]
 8004dc8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	69db      	ldr	r3, [r3, #28]
 8004dce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004dd0:	68fb      	ldr	r3, [r7, #12]
 8004dd2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004dd6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004dd8:	68fb      	ldr	r3, [r7, #12]
 8004dda:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004dde:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004de0:	683b      	ldr	r3, [r7, #0]
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	021b      	lsls	r3, r3, #8
 8004de6:	68fa      	ldr	r2, [r7, #12]
 8004de8:	4313      	orrs	r3, r2
 8004dea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004dec:	693b      	ldr	r3, [r7, #16]
 8004dee:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8004df2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004df4:	683b      	ldr	r3, [r7, #0]
 8004df6:	689b      	ldr	r3, [r3, #8]
 8004df8:	031b      	lsls	r3, r3, #12
 8004dfa:	693a      	ldr	r2, [r7, #16]
 8004dfc:	4313      	orrs	r3, r2
 8004dfe:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	4a12      	ldr	r2, [pc, #72]	@ (8004e4c <TIM_OC4_SetConfig+0xa4>)
 8004e04:	4293      	cmp	r3, r2
 8004e06:	d003      	beq.n	8004e10 <TIM_OC4_SetConfig+0x68>
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	4a11      	ldr	r2, [pc, #68]	@ (8004e50 <TIM_OC4_SetConfig+0xa8>)
 8004e0c:	4293      	cmp	r3, r2
 8004e0e:	d109      	bne.n	8004e24 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004e10:	697b      	ldr	r3, [r7, #20]
 8004e12:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004e16:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004e18:	683b      	ldr	r3, [r7, #0]
 8004e1a:	695b      	ldr	r3, [r3, #20]
 8004e1c:	019b      	lsls	r3, r3, #6
 8004e1e:	697a      	ldr	r2, [r7, #20]
 8004e20:	4313      	orrs	r3, r2
 8004e22:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	697a      	ldr	r2, [r7, #20]
 8004e28:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	68fa      	ldr	r2, [r7, #12]
 8004e2e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004e30:	683b      	ldr	r3, [r7, #0]
 8004e32:	685a      	ldr	r2, [r3, #4]
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	693a      	ldr	r2, [r7, #16]
 8004e3c:	621a      	str	r2, [r3, #32]
}
 8004e3e:	bf00      	nop
 8004e40:	371c      	adds	r7, #28
 8004e42:	46bd      	mov	sp, r7
 8004e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e48:	4770      	bx	lr
 8004e4a:	bf00      	nop
 8004e4c:	40010000 	.word	0x40010000
 8004e50:	40010400 	.word	0x40010400

08004e54 <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8004e54:	b580      	push	{r7, lr}
 8004e56:	b086      	sub	sp, #24
 8004e58:	af00      	add	r7, sp, #0
 8004e5a:	6078      	str	r0, [r7, #4]
 8004e5c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004e5e:	2300      	movs	r3, #0
 8004e60:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	689b      	ldr	r3, [r3, #8]
 8004e68:	613b      	str	r3, [r7, #16]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004e6a:	693b      	ldr	r3, [r7, #16]
 8004e6c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004e70:	613b      	str	r3, [r7, #16]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 8004e72:	683b      	ldr	r3, [r7, #0]
 8004e74:	685b      	ldr	r3, [r3, #4]
 8004e76:	693a      	ldr	r2, [r7, #16]
 8004e78:	4313      	orrs	r3, r2
 8004e7a:	613b      	str	r3, [r7, #16]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 8004e7c:	693b      	ldr	r3, [r7, #16]
 8004e7e:	f023 0307 	bic.w	r3, r3, #7
 8004e82:	613b      	str	r3, [r7, #16]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 8004e84:	683b      	ldr	r3, [r7, #0]
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	693a      	ldr	r2, [r7, #16]
 8004e8a:	4313      	orrs	r3, r2
 8004e8c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	693a      	ldr	r2, [r7, #16]
 8004e94:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 8004e96:	683b      	ldr	r3, [r7, #0]
 8004e98:	685b      	ldr	r3, [r3, #4]
 8004e9a:	2b70      	cmp	r3, #112	@ 0x70
 8004e9c:	d01a      	beq.n	8004ed4 <TIM_SlaveTimer_SetConfig+0x80>
 8004e9e:	2b70      	cmp	r3, #112	@ 0x70
 8004ea0:	d860      	bhi.n	8004f64 <TIM_SlaveTimer_SetConfig+0x110>
 8004ea2:	2b60      	cmp	r3, #96	@ 0x60
 8004ea4:	d054      	beq.n	8004f50 <TIM_SlaveTimer_SetConfig+0xfc>
 8004ea6:	2b60      	cmp	r3, #96	@ 0x60
 8004ea8:	d85c      	bhi.n	8004f64 <TIM_SlaveTimer_SetConfig+0x110>
 8004eaa:	2b50      	cmp	r3, #80	@ 0x50
 8004eac:	d046      	beq.n	8004f3c <TIM_SlaveTimer_SetConfig+0xe8>
 8004eae:	2b50      	cmp	r3, #80	@ 0x50
 8004eb0:	d858      	bhi.n	8004f64 <TIM_SlaveTimer_SetConfig+0x110>
 8004eb2:	2b40      	cmp	r3, #64	@ 0x40
 8004eb4:	d019      	beq.n	8004eea <TIM_SlaveTimer_SetConfig+0x96>
 8004eb6:	2b40      	cmp	r3, #64	@ 0x40
 8004eb8:	d854      	bhi.n	8004f64 <TIM_SlaveTimer_SetConfig+0x110>
 8004eba:	2b30      	cmp	r3, #48	@ 0x30
 8004ebc:	d055      	beq.n	8004f6a <TIM_SlaveTimer_SetConfig+0x116>
 8004ebe:	2b30      	cmp	r3, #48	@ 0x30
 8004ec0:	d850      	bhi.n	8004f64 <TIM_SlaveTimer_SetConfig+0x110>
 8004ec2:	2b20      	cmp	r3, #32
 8004ec4:	d051      	beq.n	8004f6a <TIM_SlaveTimer_SetConfig+0x116>
 8004ec6:	2b20      	cmp	r3, #32
 8004ec8:	d84c      	bhi.n	8004f64 <TIM_SlaveTimer_SetConfig+0x110>
 8004eca:	2b00      	cmp	r3, #0
 8004ecc:	d04d      	beq.n	8004f6a <TIM_SlaveTimer_SetConfig+0x116>
 8004ece:	2b10      	cmp	r3, #16
 8004ed0:	d04b      	beq.n	8004f6a <TIM_SlaveTimer_SetConfig+0x116>
 8004ed2:	e047      	b.n	8004f64 <TIM_SlaveTimer_SetConfig+0x110>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPRESCALER(sSlaveConfig->TriggerPrescaler));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
      /* Configure the ETR Trigger source */
      TIM_ETR_SetConfig(htim->Instance,
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	6818      	ldr	r0, [r3, #0]
                        sSlaveConfig->TriggerPrescaler,
 8004ed8:	683b      	ldr	r3, [r7, #0]
 8004eda:	68d9      	ldr	r1, [r3, #12]
                        sSlaveConfig->TriggerPolarity,
 8004edc:	683b      	ldr	r3, [r7, #0]
 8004ede:	689a      	ldr	r2, [r3, #8]
                        sSlaveConfig->TriggerFilter);
 8004ee0:	683b      	ldr	r3, [r7, #0]
 8004ee2:	691b      	ldr	r3, [r3, #16]
      TIM_ETR_SetConfig(htim->Instance,
 8004ee4:	f000 f8c1 	bl	800506a <TIM_ETR_SetConfig>
      break;
 8004ee8:	e040      	b.n	8004f6c <TIM_SlaveTimer_SetConfig+0x118>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 8004eea:	683b      	ldr	r3, [r7, #0]
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	2b05      	cmp	r3, #5
 8004ef0:	d101      	bne.n	8004ef6 <TIM_SlaveTimer_SetConfig+0xa2>
      {
        return HAL_ERROR;
 8004ef2:	2301      	movs	r3, #1
 8004ef4:	e03b      	b.n	8004f6e <TIM_SlaveTimer_SetConfig+0x11a>
      }

      /* Disable the Channel 1: Reset the CC1E Bit */
      tmpccer = htim->Instance->CCER;
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	6a1b      	ldr	r3, [r3, #32]
 8004efc:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	6a1a      	ldr	r2, [r3, #32]
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	f022 0201 	bic.w	r2, r2, #1
 8004f0c:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	699b      	ldr	r3, [r3, #24]
 8004f14:	60bb      	str	r3, [r7, #8]

      /* Set the filter */
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004f16:	68bb      	ldr	r3, [r7, #8]
 8004f18:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004f1c:	60bb      	str	r3, [r7, #8]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 8004f1e:	683b      	ldr	r3, [r7, #0]
 8004f20:	691b      	ldr	r3, [r3, #16]
 8004f22:	011b      	lsls	r3, r3, #4
 8004f24:	68ba      	ldr	r2, [r7, #8]
 8004f26:	4313      	orrs	r3, r2
 8004f28:	60bb      	str	r3, [r7, #8]

      /* Write to TIMx CCMR1 and CCER registers */
      htim->Instance->CCMR1 = tmpccmr1;
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	68ba      	ldr	r2, [r7, #8]
 8004f30:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	68fa      	ldr	r2, [r7, #12]
 8004f38:	621a      	str	r2, [r3, #32]
      break;
 8004f3a:	e017      	b.n	8004f6c <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI1 Filter and Polarity */
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 8004f40:	683b      	ldr	r3, [r7, #0]
 8004f42:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 8004f44:	683b      	ldr	r3, [r7, #0]
 8004f46:	691b      	ldr	r3, [r3, #16]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004f48:	461a      	mov	r2, r3
 8004f4a:	f000 f814 	bl	8004f76 <TIM_TI1_ConfigInputStage>
      break;
 8004f4e:	e00d      	b.n	8004f6c <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI2 Filter and Polarity */
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 8004f54:	683b      	ldr	r3, [r7, #0]
 8004f56:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 8004f58:	683b      	ldr	r3, [r7, #0]
 8004f5a:	691b      	ldr	r3, [r3, #16]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004f5c:	461a      	mov	r2, r3
 8004f5e:	f000 f839 	bl	8004fd4 <TIM_TI2_ConfigInputStage>
      break;
 8004f62:	e003      	b.n	8004f6c <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      break;
    }

    default:
      status = HAL_ERROR;
 8004f64:	2301      	movs	r3, #1
 8004f66:	75fb      	strb	r3, [r7, #23]
      break;
 8004f68:	e000      	b.n	8004f6c <TIM_SlaveTimer_SetConfig+0x118>
      break;
 8004f6a:	bf00      	nop
  }

  return status;
 8004f6c:	7dfb      	ldrb	r3, [r7, #23]
}
 8004f6e:	4618      	mov	r0, r3
 8004f70:	3718      	adds	r7, #24
 8004f72:	46bd      	mov	sp, r7
 8004f74:	bd80      	pop	{r7, pc}

08004f76 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004f76:	b480      	push	{r7}
 8004f78:	b087      	sub	sp, #28
 8004f7a:	af00      	add	r7, sp, #0
 8004f7c:	60f8      	str	r0, [r7, #12]
 8004f7e:	60b9      	str	r1, [r7, #8]
 8004f80:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004f82:	68fb      	ldr	r3, [r7, #12]
 8004f84:	6a1b      	ldr	r3, [r3, #32]
 8004f86:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004f88:	68fb      	ldr	r3, [r7, #12]
 8004f8a:	6a1b      	ldr	r3, [r3, #32]
 8004f8c:	f023 0201 	bic.w	r2, r3, #1
 8004f90:	68fb      	ldr	r3, [r7, #12]
 8004f92:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004f94:	68fb      	ldr	r3, [r7, #12]
 8004f96:	699b      	ldr	r3, [r3, #24]
 8004f98:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004f9a:	693b      	ldr	r3, [r7, #16]
 8004f9c:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004fa0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	011b      	lsls	r3, r3, #4
 8004fa6:	693a      	ldr	r2, [r7, #16]
 8004fa8:	4313      	orrs	r3, r2
 8004faa:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004fac:	697b      	ldr	r3, [r7, #20]
 8004fae:	f023 030a 	bic.w	r3, r3, #10
 8004fb2:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004fb4:	697a      	ldr	r2, [r7, #20]
 8004fb6:	68bb      	ldr	r3, [r7, #8]
 8004fb8:	4313      	orrs	r3, r2
 8004fba:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004fbc:	68fb      	ldr	r3, [r7, #12]
 8004fbe:	693a      	ldr	r2, [r7, #16]
 8004fc0:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004fc2:	68fb      	ldr	r3, [r7, #12]
 8004fc4:	697a      	ldr	r2, [r7, #20]
 8004fc6:	621a      	str	r2, [r3, #32]
}
 8004fc8:	bf00      	nop
 8004fca:	371c      	adds	r7, #28
 8004fcc:	46bd      	mov	sp, r7
 8004fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fd2:	4770      	bx	lr

08004fd4 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004fd4:	b480      	push	{r7}
 8004fd6:	b087      	sub	sp, #28
 8004fd8:	af00      	add	r7, sp, #0
 8004fda:	60f8      	str	r0, [r7, #12]
 8004fdc:	60b9      	str	r1, [r7, #8]
 8004fde:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8004fe0:	68fb      	ldr	r3, [r7, #12]
 8004fe2:	6a1b      	ldr	r3, [r3, #32]
 8004fe4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004fe6:	68fb      	ldr	r3, [r7, #12]
 8004fe8:	6a1b      	ldr	r3, [r3, #32]
 8004fea:	f023 0210 	bic.w	r2, r3, #16
 8004fee:	68fb      	ldr	r3, [r7, #12]
 8004ff0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004ff2:	68fb      	ldr	r3, [r7, #12]
 8004ff4:	699b      	ldr	r3, [r3, #24]
 8004ff6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004ff8:	693b      	ldr	r3, [r7, #16]
 8004ffa:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8004ffe:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	031b      	lsls	r3, r3, #12
 8005004:	693a      	ldr	r2, [r7, #16]
 8005006:	4313      	orrs	r3, r2
 8005008:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800500a:	697b      	ldr	r3, [r7, #20]
 800500c:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8005010:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005012:	68bb      	ldr	r3, [r7, #8]
 8005014:	011b      	lsls	r3, r3, #4
 8005016:	697a      	ldr	r2, [r7, #20]
 8005018:	4313      	orrs	r3, r2
 800501a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800501c:	68fb      	ldr	r3, [r7, #12]
 800501e:	693a      	ldr	r2, [r7, #16]
 8005020:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005022:	68fb      	ldr	r3, [r7, #12]
 8005024:	697a      	ldr	r2, [r7, #20]
 8005026:	621a      	str	r2, [r3, #32]
}
 8005028:	bf00      	nop
 800502a:	371c      	adds	r7, #28
 800502c:	46bd      	mov	sp, r7
 800502e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005032:	4770      	bx	lr

08005034 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005034:	b480      	push	{r7}
 8005036:	b085      	sub	sp, #20
 8005038:	af00      	add	r7, sp, #0
 800503a:	6078      	str	r0, [r7, #4]
 800503c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	689b      	ldr	r3, [r3, #8]
 8005042:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005044:	68fb      	ldr	r3, [r7, #12]
 8005046:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800504a:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800504c:	683a      	ldr	r2, [r7, #0]
 800504e:	68fb      	ldr	r3, [r7, #12]
 8005050:	4313      	orrs	r3, r2
 8005052:	f043 0307 	orr.w	r3, r3, #7
 8005056:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	68fa      	ldr	r2, [r7, #12]
 800505c:	609a      	str	r2, [r3, #8]
}
 800505e:	bf00      	nop
 8005060:	3714      	adds	r7, #20
 8005062:	46bd      	mov	sp, r7
 8005064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005068:	4770      	bx	lr

0800506a <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800506a:	b480      	push	{r7}
 800506c:	b087      	sub	sp, #28
 800506e:	af00      	add	r7, sp, #0
 8005070:	60f8      	str	r0, [r7, #12]
 8005072:	60b9      	str	r1, [r7, #8]
 8005074:	607a      	str	r2, [r7, #4]
 8005076:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005078:	68fb      	ldr	r3, [r7, #12]
 800507a:	689b      	ldr	r3, [r3, #8]
 800507c:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800507e:	697b      	ldr	r3, [r7, #20]
 8005080:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005084:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005086:	683b      	ldr	r3, [r7, #0]
 8005088:	021a      	lsls	r2, r3, #8
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	431a      	orrs	r2, r3
 800508e:	68bb      	ldr	r3, [r7, #8]
 8005090:	4313      	orrs	r3, r2
 8005092:	697a      	ldr	r2, [r7, #20]
 8005094:	4313      	orrs	r3, r2
 8005096:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005098:	68fb      	ldr	r3, [r7, #12]
 800509a:	697a      	ldr	r2, [r7, #20]
 800509c:	609a      	str	r2, [r3, #8]
}
 800509e:	bf00      	nop
 80050a0:	371c      	adds	r7, #28
 80050a2:	46bd      	mov	sp, r7
 80050a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050a8:	4770      	bx	lr

080050aa <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80050aa:	b480      	push	{r7}
 80050ac:	b087      	sub	sp, #28
 80050ae:	af00      	add	r7, sp, #0
 80050b0:	60f8      	str	r0, [r7, #12]
 80050b2:	60b9      	str	r1, [r7, #8]
 80050b4:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80050b6:	68bb      	ldr	r3, [r7, #8]
 80050b8:	f003 031f 	and.w	r3, r3, #31
 80050bc:	2201      	movs	r2, #1
 80050be:	fa02 f303 	lsl.w	r3, r2, r3
 80050c2:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80050c4:	68fb      	ldr	r3, [r7, #12]
 80050c6:	6a1a      	ldr	r2, [r3, #32]
 80050c8:	697b      	ldr	r3, [r7, #20]
 80050ca:	43db      	mvns	r3, r3
 80050cc:	401a      	ands	r2, r3
 80050ce:	68fb      	ldr	r3, [r7, #12]
 80050d0:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80050d2:	68fb      	ldr	r3, [r7, #12]
 80050d4:	6a1a      	ldr	r2, [r3, #32]
 80050d6:	68bb      	ldr	r3, [r7, #8]
 80050d8:	f003 031f 	and.w	r3, r3, #31
 80050dc:	6879      	ldr	r1, [r7, #4]
 80050de:	fa01 f303 	lsl.w	r3, r1, r3
 80050e2:	431a      	orrs	r2, r3
 80050e4:	68fb      	ldr	r3, [r7, #12]
 80050e6:	621a      	str	r2, [r3, #32]
}
 80050e8:	bf00      	nop
 80050ea:	371c      	adds	r7, #28
 80050ec:	46bd      	mov	sp, r7
 80050ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050f2:	4770      	bx	lr

080050f4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80050f4:	b480      	push	{r7}
 80050f6:	b085      	sub	sp, #20
 80050f8:	af00      	add	r7, sp, #0
 80050fa:	6078      	str	r0, [r7, #4]
 80050fc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005104:	2b01      	cmp	r3, #1
 8005106:	d101      	bne.n	800510c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005108:	2302      	movs	r3, #2
 800510a:	e05a      	b.n	80051c2 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	2201      	movs	r2, #1
 8005110:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	2202      	movs	r2, #2
 8005118:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	685b      	ldr	r3, [r3, #4]
 8005122:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	689b      	ldr	r3, [r3, #8]
 800512a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800512c:	68fb      	ldr	r3, [r7, #12]
 800512e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005132:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005134:	683b      	ldr	r3, [r7, #0]
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	68fa      	ldr	r2, [r7, #12]
 800513a:	4313      	orrs	r3, r2
 800513c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	68fa      	ldr	r2, [r7, #12]
 8005144:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	4a21      	ldr	r2, [pc, #132]	@ (80051d0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800514c:	4293      	cmp	r3, r2
 800514e:	d022      	beq.n	8005196 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005158:	d01d      	beq.n	8005196 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	4a1d      	ldr	r2, [pc, #116]	@ (80051d4 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8005160:	4293      	cmp	r3, r2
 8005162:	d018      	beq.n	8005196 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	4a1b      	ldr	r2, [pc, #108]	@ (80051d8 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800516a:	4293      	cmp	r3, r2
 800516c:	d013      	beq.n	8005196 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	4a1a      	ldr	r2, [pc, #104]	@ (80051dc <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8005174:	4293      	cmp	r3, r2
 8005176:	d00e      	beq.n	8005196 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	4a18      	ldr	r2, [pc, #96]	@ (80051e0 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800517e:	4293      	cmp	r3, r2
 8005180:	d009      	beq.n	8005196 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	4a17      	ldr	r2, [pc, #92]	@ (80051e4 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8005188:	4293      	cmp	r3, r2
 800518a:	d004      	beq.n	8005196 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	4a15      	ldr	r2, [pc, #84]	@ (80051e8 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8005192:	4293      	cmp	r3, r2
 8005194:	d10c      	bne.n	80051b0 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005196:	68bb      	ldr	r3, [r7, #8]
 8005198:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800519c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800519e:	683b      	ldr	r3, [r7, #0]
 80051a0:	685b      	ldr	r3, [r3, #4]
 80051a2:	68ba      	ldr	r2, [r7, #8]
 80051a4:	4313      	orrs	r3, r2
 80051a6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	68ba      	ldr	r2, [r7, #8]
 80051ae:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	2201      	movs	r2, #1
 80051b4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	2200      	movs	r2, #0
 80051bc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80051c0:	2300      	movs	r3, #0
}
 80051c2:	4618      	mov	r0, r3
 80051c4:	3714      	adds	r7, #20
 80051c6:	46bd      	mov	sp, r7
 80051c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051cc:	4770      	bx	lr
 80051ce:	bf00      	nop
 80051d0:	40010000 	.word	0x40010000
 80051d4:	40000400 	.word	0x40000400
 80051d8:	40000800 	.word	0x40000800
 80051dc:	40000c00 	.word	0x40000c00
 80051e0:	40010400 	.word	0x40010400
 80051e4:	40014000 	.word	0x40014000
 80051e8:	40001800 	.word	0x40001800

080051ec <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80051ec:	b480      	push	{r7}
 80051ee:	b083      	sub	sp, #12
 80051f0:	af00      	add	r7, sp, #0
 80051f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80051f4:	bf00      	nop
 80051f6:	370c      	adds	r7, #12
 80051f8:	46bd      	mov	sp, r7
 80051fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051fe:	4770      	bx	lr

08005200 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005200:	b480      	push	{r7}
 8005202:	b083      	sub	sp, #12
 8005204:	af00      	add	r7, sp, #0
 8005206:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005208:	bf00      	nop
 800520a:	370c      	adds	r7, #12
 800520c:	46bd      	mov	sp, r7
 800520e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005212:	4770      	bx	lr

08005214 <memset>:
 8005214:	4402      	add	r2, r0
 8005216:	4603      	mov	r3, r0
 8005218:	4293      	cmp	r3, r2
 800521a:	d100      	bne.n	800521e <memset+0xa>
 800521c:	4770      	bx	lr
 800521e:	f803 1b01 	strb.w	r1, [r3], #1
 8005222:	e7f9      	b.n	8005218 <memset+0x4>

08005224 <__libc_init_array>:
 8005224:	b570      	push	{r4, r5, r6, lr}
 8005226:	4d0d      	ldr	r5, [pc, #52]	@ (800525c <__libc_init_array+0x38>)
 8005228:	4c0d      	ldr	r4, [pc, #52]	@ (8005260 <__libc_init_array+0x3c>)
 800522a:	1b64      	subs	r4, r4, r5
 800522c:	10a4      	asrs	r4, r4, #2
 800522e:	2600      	movs	r6, #0
 8005230:	42a6      	cmp	r6, r4
 8005232:	d109      	bne.n	8005248 <__libc_init_array+0x24>
 8005234:	4d0b      	ldr	r5, [pc, #44]	@ (8005264 <__libc_init_array+0x40>)
 8005236:	4c0c      	ldr	r4, [pc, #48]	@ (8005268 <__libc_init_array+0x44>)
 8005238:	f000 f818 	bl	800526c <_init>
 800523c:	1b64      	subs	r4, r4, r5
 800523e:	10a4      	asrs	r4, r4, #2
 8005240:	2600      	movs	r6, #0
 8005242:	42a6      	cmp	r6, r4
 8005244:	d105      	bne.n	8005252 <__libc_init_array+0x2e>
 8005246:	bd70      	pop	{r4, r5, r6, pc}
 8005248:	f855 3b04 	ldr.w	r3, [r5], #4
 800524c:	4798      	blx	r3
 800524e:	3601      	adds	r6, #1
 8005250:	e7ee      	b.n	8005230 <__libc_init_array+0xc>
 8005252:	f855 3b04 	ldr.w	r3, [r5], #4
 8005256:	4798      	blx	r3
 8005258:	3601      	adds	r6, #1
 800525a:	e7f2      	b.n	8005242 <__libc_init_array+0x1e>
 800525c:	080052a4 	.word	0x080052a4
 8005260:	080052a4 	.word	0x080052a4
 8005264:	080052a4 	.word	0x080052a4
 8005268:	080052a8 	.word	0x080052a8

0800526c <_init>:
 800526c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800526e:	bf00      	nop
 8005270:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005272:	bc08      	pop	{r3}
 8005274:	469e      	mov	lr, r3
 8005276:	4770      	bx	lr

08005278 <_fini>:
 8005278:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800527a:	bf00      	nop
 800527c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800527e:	bc08      	pop	{r3}
 8005280:	469e      	mov	lr, r3
 8005282:	4770      	bx	lr
